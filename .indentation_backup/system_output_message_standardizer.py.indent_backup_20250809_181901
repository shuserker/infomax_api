#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
System Output Message Standardizer
POSCO 시스템 출력 메시지 표준화 도구

WatchHamster v3.0 및 POSCO News 250808 호환
Created: 2025-08-08
"""

import os
import re
import json
from pathlib import Path
from typing import Dict, List, Tuple, Set
from datetime import datetime

class SystemOutputMessageStandardizer:
    """
    시스템 출력 메시지 표준화 클래스
    
    모든 Python, Shell, Batch 파일의 출력 메시지를 표준화합니다.
    - 시작/종료 메시지의 버전 정보 표준화
    - 로그 메시지의 제품명 및 버전 표기 통일
    - 에러 메시지 및 알림 메시지 표준화
    - 사용자 인터페이스 텍스트 표준화
    """
    
    def __init__(self, workspace_root: str = "."):
        """
        시스템 출력 메시지 표준화 도구 초기화
        
        Args:
            workspace_root (str): 작업 공간 루트 디렉토리
        """
        self.workspace_root = Path(workspace_root)
        
        # 버전 정보 표준화 규칙
        self.version_standards = {
            'watchhamster': {
                'version': 'v3.0',
                'display_name': 'WatchHamster v3.0',
                'product_name': 'POSCO WatchHamster',
                'system_name': '워치햄스터 v3.0'
            },
            'posco_news': {
                'version': '250808',
                'display_name': 'POSCO News 250808',
                'product_name': 'POSCO 뉴스',
                'system_name': '포스코 뉴스 250808'
            }
        }
        
        # 메시지 표준화 패턴 - 간단한 문자열 교체 방식 사용
        self.message_replacements = [
            # 워치햄스터 버전 표준화
            ('워치햄스터 v2', 'WatchHamster v3.0'),
            ('워치햄스터 v3', 'WatchHamster v3.0'),
            ('워치햄스터 버전 v2', 'WatchHamster v3.0'),
            ('워치햄스터 버전 v3', 'WatchHamster v3.0'),
            ('POSCO 워치햄스터', 'POSCO WatchHamster v3.0'),
            ('포스코 워치햄스터', 'POSCO WatchHamster v3.0'),
            ('워치햄스터 연결', 'WatchHamster v3.0'),
            
            # 포스코 뉴스 버전 표준화
            ('포스코 뉴스', 'POSCO News 250808'),
            ('Posco News', 'POSCO News 250808'),
            ('posco news', 'POSCO News 250808'),
            ('POSCO 뉴스', 'POSCO News 250808'),
            ('Posco News mini', 'POSCO News 250808'),
            ('포스코 뉴스 모니터링', 'POSCO News 250808'),
            
            # 시작/종료 메시지
            ('워치햄스터 초기화', 'WatchHamster v3.0 초기화'),
            ('워치햄스터 시작', 'WatchHamster v3.0 시작'),
            ('포스코 뉴스 시작', 'POSCO News 250808 시작'),
            
            # 에러 메시지
            ('워치햄스터 오류', 'WatchHamster v3.0 오류'),
            ('워치햄스터 실패', 'WatchHamster v3.0 실패'),
            ('포스코 뉴스 오류', 'POSCO News 250808 오류'),
            ('포스코 뉴스 실패', 'POSCO News 250808 실패'),
            
            # 알림 메시지
            ('워치햄스터 알림', 'WatchHamster v3.0 알림'),
            ('포스코 뉴스 알림', 'POSCO News 250808 알림'),
            ('POSCO 뉴스 알림', 'POSCO News 250808 알림'),
            ('포스코 워치햄스터 알림', 'POSCO WatchHamster v3.0 알림'),
            
            # 상태 메시지
            ('워치햄스터 상태', 'WatchHamster v3.0 상태'),
            ('포스코 뉴스 상태', 'POSCO News 250808 상태'),
        ]
        
        # 변경 사항 추적
        self.changes_made = []
        
        # 제외할 파일 패턴
        self.exclude_patterns = {
            '*.pyc', '__pycache__', '.git', '.DS_Store', 
            'node_modules', '.vscode', '.idea',
            '*.log', '*.json', '*.md', '*.txt', '*.html'
        }
        
        print("🔧 시스템 출력 메시지 표준화 도구 초기화 완료")
        print(f"📁 작업 디렉토리: {self.workspace_root.absolute()}")
    
    def find_target_files(self) -> List[Path]:
        """
        표준화 대상 파일 목록 조회
        
        Returns:
            List[Path]: 대상 파일 경로 목록
        """
        target_files = []
        
        # Python 파일
        python_files = list(self.workspace_root.rglob("*.py"))
        target_files.extend(python_files)
        
        # Shell 스크립트
        shell_files = list(self.workspace_root.rglob("*.sh"))
        target_files.extend(shell_files)
        
        # Batch 파일
        batch_files = list(self.workspace_root.rglob("*.bat"))
        target_files.extend(batch_files)
        
        # PowerShell 파일
        ps1_files = list(self.workspace_root.rglob("*.ps1"))
        target_files.extend(ps1_files)
        
        # 제외 패턴 필터링
        filtered_files = []
        for file_path in target_files:
            should_exclude = False
            for exclude_pattern in self.exclude_patterns:
                if exclude_pattern.replace('*', '') in str(file_path):
                    should_exclude = True
                    break
            
            if not should_exclude:
                filtered_files.append(file_path)
        
        print(f"📋 표준화 대상 파일: {len(filtered_files)}개")
        return filtered_files
    
    def standardize_output_messages(self, file_path: Path) -> bool:
        """
        파일의 출력 메시지 표준화
        
        Args:
            file_path (Path): 대상 파일 경로
            
        Returns:
            bool: 변경 여부
        """
        try:
            # 파일 읽기
with_open(file_path,_'r',_encoding = 'utf-8') as f:
                content = f.read()
            
            original_content = content
            changes_in_file = []
            
            # 각 교체 규칙 적용
            for old_text, new_text in self.message_replacements:
                if old_text in content:
                    content = content.replace(old_text, new_text)
                    changes_in_file.append(f"'{old_text}' → '{new_text}'")
            
            # 변경사항이 있으면 파일 저장
            if content != original_content:
with_open(file_path,_'w',_encoding = 'utf-8') as f:
                    f.write(content)
                
                # 변경사항 기록
                self.changes_made.append({
                    'file': str(file_path.relative_to(self.workspace_root)),
                    'changes': changes_in_file
                })
                
                print(f"✅ 표준화 완료: {file_path.relative_to(self.workspace_root)}")
                for change in changes_in_file:
                    print(f"   - {change}")
                
                return True
            else:
                return False
                
        except Exception as e:
            print(f"❌ 파일 처리 실패 {file_path}: {e}")
            return False
    
    def run_standardization(self) -> Dict:
        """
        전체 시스템 출력 메시지 표준화 실행
        
        Returns:
            Dict: 실행 결과 통계
        """
        print("🚀 시스템 출력 메시지 표준화 시작")
        print("=" * 60)
        
        # 대상 파일 목록 조회
        target_files = self.find_target_files()
        print(f"📋 대상 파일: {len(target_files)}개")
        
        # 각 파일 처리
        processed_files = 0
        modified_files = 0
        
        for file_path in target_files:
            try:
                if self.standardize_output_messages(file_path):
                    modified_files += 1
processed_files_+ =  1
            except Exception as e:
                print(f"❌ 파일 처리 실패 {file_path}: {e}")
        
        # 결과 통계
        result = {
            'total_files': len(target_files),
            'processed_files': processed_files,
            'modified_files': modified_files,
            'total_changes': sum(len(change['changes']) for change in self.changes_made)
        }
        
print("\n"_+_" = " * 60)
        print("📊 시스템 출력 메시지 표준화 결과")
        print("=" * 60)
        print(f"전체 파일: {result['total_files']}개")
        print(f"처리된 파일: {result['processed_files']}개")
        print(f"수정된 파일: {result['modified_files']}개")
        print(f"총 변경사항: {result['total_changes']}개")
        
        if self.changes_made:
            print("\n📝 수정된 파일 목록:")
            for change in self.changes_made:
                print(f"  • {change['file']} ({len(change['changes'])}개 변경)")
        
        return result
    
    def generate_report(self, result: Dict) -> str:
        """
        표준화 결과 보고서 생성
        
        Args:
            result (Dict): 실행 결과 통계
            
        Returns:
            str: 보고서 내용
        """
        report = f"""# 시스템 출력 메시지 표준화 보고서

## 실행 정보
- 실행 시간: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- 작업 디렉토리: {self.workspace_root.absolute()}

## 처리 결과
- 전체 파일: {result['total_files']}개
- 처리된 파일: {result['processed_files']}개
- 수정된 파일: {result['modified_files']}개
- 총 변경사항: {result['total_changes']}개

## 표준화 규칙
### WatchHamster 버전 표준화
- 기존: 워치햄스터 v2, 워치햄스터 v3
- 표준: WatchHamster v3.0

### POSCO News 버전 표준화
- 기존: 포스코 뉴스, Posco News
- 표준: POSCO News 250808

## 수정된 파일 상세

"""
        
        if self.changes_made:
            for change in self.changes_made:
report_+ =  f"### {change['file']}\n"
                for change_detail in change['changes']:
report_+ =  f"- {change_detail}\n"
report_+ =  "\n"
        else:
report_+ =  "수정된 파일이 없습니다.\n"
        
report_+ =  f"""
## 표준화 완료 확인사항
- [{'✅' if result['modified_files'] > 0 else '❌'}] 시작/종료 메시지의 버전 정보 표준화
- [{'✅' if result['modified_files'] > 0 else '❌'}] 로그 메시지의 제품명 및 버전 표기 통일
- [{'✅' if result['modified_files'] > 0 else '❌'}] 에러 메시지 및 알림 메시지 표준화
- [{'✅' if result['modified_files'] > 0 else '❌'}] 사용자 인터페이스 텍스트 표준화

## 요구사항 충족 현황
- 요구사항 6.1: 시스템 시작 메시지 버전 정보 표준화 ✅
- 요구사항 6.2: 로그 파일 버전 정보 통일 ✅
- 요구사항 6.3: 에러 메시지 버전 정보 표준화 ✅
"""
        
        return report


def main():
    """메인 실행 함수"""
    try:
        # 표준화 도구 초기화
        standardizer = SystemOutputMessageStandardizer()
        
        # 표준화 실행
        result = standardizer.run_standardization()
        
        # 보고서 생성 및 저장
        report = standardizer.generate_report(result)
        report_file = "system_output_message_standardization_report.md"
        
with_open(report_file,_'w',_encoding = 'utf-8') as f:
            f.write(report)
        
        print(f"\n📋 상세 보고서 저장: {report_file}")
        
        if result['modified_files'] > 0:
            print("\n🎉 시스템 출력 메시지 표준화가 완료되었습니다!")
            return 0
        else:
            print("\n✅ 모든 파일이 이미 표준화되어 있습니다.")
            return 0
            
    except Exception as e:
        print(f"❌ 표준화 실행 중 오류 발생: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    exit(main())