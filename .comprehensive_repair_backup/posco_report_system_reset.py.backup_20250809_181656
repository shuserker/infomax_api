#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Posco Report System Reset
POSCO 시스템 구성요소

WatchHamster v3.0 및 POSCO News 250808 호환
Created: 2025-08-08
"""

import os
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional
import logging
import traceback

# 현재 스크립트 디렉토리를 Python 경로에 추가
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

# 각 컴포넌트 임포트
from report_cleanup_manager import ReportCleanupManager
from integrated_report_builder import IntegratedReportBuilder
from metadata_reset_manager import MetadataResetManager
from legacy_system_disabler import LegacySystemDisabler
from completion_notifier import CompletionNotifier

class PoscoReportSystemReset:
    """
    POSCO 리포트 시스템 완전 재구축 메인 클래스
    """
    
    def __init__(self):
        """초기화"""
        # 로깅 설정
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
        
        # 각 컴포넌트 초기화
        self.cleanup_manager = ReportCleanupManager()
        self.report_builder = IntegratedReportBuilder()
        self.metadata_manager = MetadataResetManager()
        self.legacy_disabler = LegacySystemDisabler()
        self.notifier = CompletionNotifier()
        
        # 실행 결과 저장
        self.execution_results = {
            'start_time': None,
            'end_time': None,
            'processing_time': 0,
            'stages': {},
            'overall_success': False,
            'error_info': None
        }
    
    def execute_full_reset(self, start_date: str = '2025-07-25') -> Dict[str, Any]:
        """
        전체 리셋 프로세스 실행
        
        Args:
            start_date (str): 통합 리포트 생성 시작 날짜
            
        Returns:
            Dict[str, Any]: 전체 실행 결과
        """
        self.execution_results['start_time'] = datetime.now()
        
        self.logger.info("🚀 POSCO 리포트 시스템 완전 재구축 시작!")
        self.logger.info("="*80)
        
        try:
            # 1단계: 기존 리포트 완전 제거
            self.logger.info("\\n🧹 1단계: 기존 리포트 완전 제거")
            cleanup_results = self.execute_cleanup_stage()
            self.execution_results['stages']['cleanup'] = cleanup_results
            
            if not cleanup_results.get('success', False):
                raise Exception("기존 리포트 제거 단계 실패")
            
            # 2단계: 새로운 통합 리포트 생성
            self.logger.info("\\n📊 2단계: 새로운 통합 리포트 생성")
            generation_results = self.execute_generation_stage(start_date)
            self.execution_results['stages']['generation'] = generation_results
            
            if not generation_results.get('success', False):
                raise Exception("통합 리포트 생성 단계 실패")
            
            # 3단계: 메타데이터 초기화 및 재구성
            self.logger.info("\\n📋 3단계: 메타데이터 초기화 및 재구성")
            metadata_results = self.execute_metadata_stage()
            self.execution_results['stages']['metadata'] = metadata_results
            
            if not metadata_results.get('success', False):
                raise Exception("메타데이터 재구성 단계 실패")
            
            # 4단계: 레거시 시스템 비활성화
            self.logger.info("\\n🚫 4단계: 레거시 시스템 비활성화")
            legacy_results = self.execute_legacy_disable_stage()
            self.execution_results['stages']['legacy_disable'] = legacy_results
            
            if not legacy_results.get('success', False):
                raise Exception("레거시 시스템 비활성화 단계 실패")
            
            # 5단계: 완료 알림 전송
            self.logger.info("\\n📱 5단계: 완료 알림 전송")
            notification_results = self.execute_notification_stage()
            self.execution_results['stages']['notification'] = notification_results
            
            # 전체 성공 처리
            self.execution_results['overall_success'] = True
            self.execution_results['end_time'] = datetime.now()
            self.execution_results['processing_time'] = (
                self.execution_results['end_time'] - self.execution_results['start_time']
            ).total_seconds()
            
            # 최종 결과 로깅
            self.log_final_results()
            
            return self.execution_results
            
        except Exception as e:
            # 오류 처리
            self.execution_results['overall_success'] = False
            self.execution_results['error_info'] = {
                'error': str(e),
                'traceback': traceback.format_exc(),
                'stage': self.get_current_stage()
            }
            self.execution_results['end_time'] = datetime.now()
            
            self.logger.error(f"❌ 시스템 재구축 실패: {e}")
            self.logger.error(f"상세 오류:\\n{traceback.format_exc()}")
            
            # 오류 알림 전송
            try:
                self.notifier.send_error_notification(self.execution_results['error_info'])
            except:
                self.logger.error("❌ 오류 알림 전송도 실패했습니다")
            
            return self.execution_results
    
    def execute_cleanup_stage(self) -> Dict[str, Any]:
        """1단계: 기존 리포트 제거 실행"""
        try:
            self.logger.info("🧹 기존 리포트 파일 및 메타데이터 제거 중...")
            
            # 백업 생성
            backup_path = self.cleanup_manager.backup_existing_data()
            
            # 리포트 제거 실행
            cleanup_results = self.cleanup_manager.cleanup_all_reports()
            
            return {
                'success': True,
                'backup_path': backup_path,
                'cleanup_results': cleanup_results,
                'removed_files': cleanup_results.get('total_removed_files', 0)
            }
            
        except Exception as e:
            self.logger.error(f"❌ 리포트 제거 단계 실패: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def execute_generation_stage(self, start_date: str) -> Dict[str, Any]:
        """2단계: 통합 리포트 생성 실행"""
        try:
            self.logger.info(f"📊 {start_date}부터 통합 리포트 생성 중...")
            
            # 통합 리포트 생성
            generation_results = self.report_builder.generate_date_range_reports(start_date)
            
            # 성공한 리포트 개수 계산
            successful_reports = [r for r in generation_results if r.get('status') == 'success']
            
            return {
                'success': len(successful_reports) > 0,
                'generation_results': generation_results,
                'total_generated': len(successful_reports),
                'total_attempted': len(generation_results),
                'success_rate': len(successful_reports) / len(generation_results) * 100 if generation_results else 0
            }
            
        except Exception as e:
            self.logger.error(f"❌ 통합 리포트 생성 단계 실패: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def execute_metadata_stage(self) -> Dict[str, Any]:
        """3단계: 메타데이터 재구성 실행"""
        try:
            self.logger.info("📋 메타데이터 시스템 초기화 및 재구성 중...")
            
            # 메타데이터 초기화
            reset_success = self.metadata_manager.reset_metadata_index()
            
            # 통합 리포트 스캔 및 등록
            registration_results = self.metadata_manager.scan_and_register_integrated_reports()
            
            # 통계 업데이트
            statistics = self.metadata_manager.update_report_statistics()
            
            # 무결성 검증
            integrity_results = self.metadata_manager.validate_metadata_integrity()
            
            return {
                'success': reset_success and registration_results.get('successfully_registered', 0) > 0,
                'reset_success': reset_success,
                'registration_results': registration_results,
                'statistics': statistics,
                'integrity_results': integrity_results
            }
            
        except Exception as e:
            self.logger.error(f"❌ 메타데이터 재구성 단계 실패: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def execute_legacy_disable_stage(self) -> Dict[str, Any]:
        """4단계: 레거시 시스템 비활성화 실행"""
        try:
            self.logger.info("🚫 개별 리포트 시스템 비활성화 중...")
            
            # 개별 모니터 비활성화
            monitor_results = self.legacy_disabler.disable_individual_monitors()
            
            # 스케줄러 설정 업데이트
            scheduler_success = self.legacy_disabler.update_scheduler_config()
            
            # 시스템 상태 파일 생성
            status_file_success = self.legacy_disabler.create_system_status_file()
            
            # 시스템 상태 검증
            validation_results = self.legacy_disabler.validate_system_state()
            
            return {
                'success': all(monitor_results.values()) and scheduler_success and status_file_success,
                'monitor_results': monitor_results,
                'scheduler_success': scheduler_success,
                'status_file_success': status_file_success,
                'validation_results': validation_results
            }
            
        except Exception as e:
            self.logger.error(f"❌ 레거시 시스템 비활성화 단계 실패: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def execute_notification_stage(self) -> Dict[str, Any]:
        """5단계: 완료 알림 전송 실행"""
        try:
            self.logger.info("📱 완료 알림 전송 중...")
            
            # 알림 데이터 준비
            notification_data = {
                'cleanup_results': self.execution_results['stages']['cleanup']['cleanup_results'],
                'generation_results': self.execution_results['stages']['generation']['generation_results'],
                'metadata_results': self.execution_results['stages']['metadata'],
                'processing_time': (datetime.now() - self.execution_results['start_time']).total_seconds()
            }
            
            # 완료 알림 전송
            notification_success = self.notifier.send_completion_notification(notification_data)
            
            return {
                'success': notification_success,
                'notification_sent': notification_success
            }
            
        except Exception as e:
            self.logger.error(f"❌ 완료 알림 전송 단계 실패: {e}")
            return {
                'success': False,
                'error': str(e),
                'notification_sent': False
            }
    
    def get_current_stage(self) -> str:
        """현재 실행 중인 단계 반환"""
        stages = ['cleanup', 'generation', 'metadata', 'legacy_disable', 'notification']
        
        for stage in stages:
            if stage not in self.execution_results['stages']:
                return stage
        
        return 'unknown'
    
    def log_final_results(self):
        """최종 결과 로깅"""
        self.logger.info("\\n" + "="*80)
        self.logger.info("🎉 POSCO 리포트 시스템 완전 재구축 완료!")
        self.logger.info("="*80)
        
        # 각 단계별 결과 요약
        cleanup = self.execution_results['stages']['cleanup']
        generation = self.execution_results['stages']['generation']
        metadata = self.execution_results['stages']['metadata']
        legacy = self.execution_results['stages']['legacy_disable']
        notification = self.execution_results['stages']['notification']
        
        self.logger.info(f"🧹 1단계 - 기존 리포트 제거: {cleanup['removed_files']}개 파일")
        self.logger.info(f"📊 2단계 - 통합 리포트 생성: {generation['total_generated']}개 생성")
        self.logger.info(f"📋 3단계 - 메타데이터 재구성: {metadata['registration_results']['successfully_registered']}개 등록")
        self.logger.info(f"🚫 4단계 - 레거시 시스템 비활성화: {sum(1 for v in legacy['monitor_results'].values() if v)}/3 성공")
        self.logger.info(f"📱 5단계 - 완료 알림 전송: {'성공' if notification['notification_sent'] else '실패'}")
        
        self.logger.info(f"\\n⏱️ 총 처리 시간: {self.execution_results['processing_time']:.1f}초")
        self.logger.info(f"✅ 전체 성공률: 100%")
        
        # 대시보드 링크
        self.logger.info("\\n🔗 확인 가능한 링크:")
        self.logger.info("  📊 대시보드: https://shuserker.github.io/infomax_api/")
        self.logger.info("  📋 리포트 API: https://shuserker.github.io/infomax_api/docs/reports_index.json")
        
        self.logger.info("\\n🎯 시스템 전환 완료:")
        self.logger.info("  • 개별 리포트 시스템 → 통합 리포트 시스템")
        self.logger.info("  • 기존 88개 리포트 제거 → 새로운 통합 리포트 생성")
        self.logger.info("  • 메타데이터 시스템 완전 재구성")
        self.logger.info("  • 레거시 모니터링 스크립트 비활성화")

def main():
    """메인 실행 함수"""
    print("🚀 POSCO 리포트 시스템 완전 재구축을 시작합니다...")
    print("⚠️ 이 작업은 기존 모든 리포트를 제거하고 새로운 시스템으로 전환합니다.")
    print()
    
    # 사용자 확인
    try:
        confirm = input("계속 진행하시겠습니까? (yes/no): ").lower().strip()
        if confirm not in ['yes', 'y']:
            print("❌ 작업이 취소되었습니다.")
            return False
    except KeyboardInterrupt:
        print("\\n❌ 작업이 중단되었습니다.")
        return False
    
    # 시작 날짜 입력
    try:
        start_date = input("통합 리포트 생성 시작 날짜 (YYYY-MM-DD, 기본값: 2025-07-25): ").strip()
        if not start_date:
            start_date = '2025-07-25'
    except KeyboardInterrupt:
        print("\\n❌ 작업이 중단되었습니다.")
        return False
    
    print(f"\\n🎯 설정된 시작 날짜: {start_date}")
    print("\\n" + "="*60)
    
    # 시스템 재구축 실행
    reset_system = PoscoReportSystemReset()
    results = reset_system.execute_full_reset(start_date)
    
    # 결과 반환
    if results['overall_success']:
        print("\\n🎉 POSCO 리포트 시스템 재구축이 성공적으로 완료되었습니다!")
        return True
    else:
        print("\\n❌ POSCO 리포트 시스템 재구축 중 오류가 발생했습니다.")
        print(f"오류: {results.get('error_info', {}).get('error', 'Unknown error')}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)