#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sync Publish Branch
POSCO 시스템 구성요소

WatchHamster v3.0 및 POSCO News 250808 호환
Created: 2025-08-08
"""

import os
import subprocess
import shutil
from pathlib import Path

def sync_publish_branch():
    """publish 브랜치를 main 브랜치의 docs/ 내용으로 완전 동기화"""
    
    print("🚀 publish 브랜치 동기화 시작...")
    
    try:
        # 현재 브랜치 확인
        current_branch = subprocess.check_output(['git', 'branch', '--show-current'], text=True).strip()
        print(f"🔄 현재 브랜치: {current_branch}")
        
        # main 브랜치에 있는지 확인
        if current_branch != 'main':
            print("❌ main 브랜치에서 실행해주세요.")
            return False
        
        # docs 디렉토리가 있는지 확인
        if not os.path.exists('docs'):
            print("❌ docs 디렉토리를 찾을 수 없습니다.")
            return False
        
        # 임시 디렉토리에 docs 내용 복사
        temp_dir = '/tmp/docs_backup'
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
        
        print("📋 docs 디렉토리 백업 중...")
        shutil.copytree('docs', temp_dir)
        
        # publish 브랜치로 전환
        print("🔄 publish 브랜치로 전환...")
        subprocess.run(['git', 'checkout', 'publish'], check=True)
        
        # publish 브랜치의 기존 내용 제거 (git 디렉토리 제외)
        print("🧹 기존 내용 제거 중...")
        for item in os.listdir('.'):
            if item != '.git':
                if os.path.isdir(item):
                    shutil.rmtree(item)
                else:
                    os.remove(item)
        
        # docs 내용을 루트로 복사
        print("📁 새로운 내용 복사 중...")
        for item in os.listdir(temp_dir):
            src = os.path.join(temp_dir, item)
            dst = item
            
            if os.path.isdir(src):
                shutil.copytree(src, dst)
            else:
                shutil.copy2(src, dst)
        
        # 최신 통합 리포트들도 복사
        print("📊 최신 통합 리포트 복사 중...")
        os.makedirs('reports', exist_ok=True)
        
        # main 브랜치의 docs/reports에서 통합 리포트 찾기
        main_reports_path = os.path.join(temp_dir, 'reports')
        if os.path.exists(main_reports_path):
            for file in os.listdir(main_reports_path):
                if file.startswith('posco_integrated_analysis_'):
                    src = os.path.join(main_reports_path, file)
                    dst = os.path.join('reports', file)
                    shutil.copy2(src, dst)
                    print(f"  ✅ {file}")
        
        # Git에 모든 변경사항 추가
        print("📝 Git에 변경사항 추가 중...")
        subprocess.run(['git', 'add', '-A'], check=True)
        
        # 커밋
        commit_message = "🔄 main 브랜치 docs/ 내용으로 완전 동기화\n\n✅ 새로운 통합 리포트 시스템 적용\n✅ 동적 대시보드 구조로 업데이트\n✅ 레거시 정적 HTML 제거"
        subprocess.run(['git', 'commit', '-m', commit_message], check=True)
        print("✅ 커밋 완료!")
        
        # 원격 저장소에 푸시
        print("🚀 원격 저장소에 푸시 중...")
        subprocess.run(['git', 'push', 'origin', 'publish'], check=True)
        print("✅ 푸시 완료!")
        
        # main 브랜치로 돌아가기
        subprocess.run(['git', 'checkout', 'main'], check=True)
        print(f"🔄 main 브랜치로 복귀")
        
        # 임시 디렉토리 정리
        shutil.rmtree(temp_dir)
        
        print("🎉 publish 브랜치 동기화 완료!")
        print("🌐 GitHub Pages가 업데이트되는데 몇 분 정도 소요될 수 있습니다.")
        print("🔗 업데이트된 사이트: https://shuserker.github.io/infomax_api/")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"❌ Git 명령 실행 실패: {e}")
        return False
    except Exception as e:
        print(f"❌ 동기화 중 오류 발생: {e}")
        return False

def main():
    """메인 실행 함수"""
    success = sync_publish_branch()
    
    if success:
        print("\n🎯 이제 https://shuserker.github.io/infomax_api/ 에서")
        print("   새로운 통합 리포트 시스템을 확인할 수 있습니다!")
    else:
        print("\n❌ 동기화에 실패했습니다.")

if __name__ == "__main__":
    main()