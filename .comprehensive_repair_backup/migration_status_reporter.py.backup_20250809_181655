#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Migration Status Reporter
POSCO 시스템 구성요소

WatchHamster v3.0 및 POSCO News 250808 호환
Created: 2025-08-08
"""

import os
import sys
import json
import time
import logging
import sqlite3
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
import hashlib
import subprocess

@dataclass
class MigrationEvent:
    """마이그레이션 이벤트"""
    id: str
    timestamp: str
    event_type: str  # 'start', 'progress', 'success', 'warning', 'error', 'complete'
    phase: str  # 'pre_check', 'backup', 'migration', 'verification', 'rollback'
    message: str
    details: Dict[str, Any]
    duration: Optional[float] = None
    user: Optional[str] = None
    system_info: Optional[Dict[str, str]] = None

@dataclass
class SystemSnapshot:
    """시스템 스냅샷"""
    timestamp: str
    cpu_usage: float
    memory_usage: float
    disk_usage: float
    process_count: int
    active_processes: List[str]
    file_checksums: Dict[str, str]

class MigrationStatusReporter:
    """마이그레이션 상태 보고 시스템"""
    
    def __init__(self):
        self.script_dir = Path(__file__).parent.absolute()
        self.db_path = self.script_dir / "migration_history.db"
        self.log_dir = self.script_dir / "migration_logs"
        self.reports_dir = self.script_dir / "migration_reports"
        
        # 디렉토리 생성
        self.log_dir.mkdir(exist_ok=True)
        self.reports_dir.mkdir(exist_ok=True)
        
        # 로깅 설정
        self.log_file = self.log_dir / f"migration_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        self._setup_logging()
        
        # 데이터베이스 초기화
        self._init_database()
        
        # 현재 마이그레이션 세션
        self.session_id = self._generate_session_id()
        self.session_start = datetime.now()
        
        # 색상 정의
        self.colors = {
            'RED': '\033[0;31m',
            'GREEN': '\033[0;32m',
            'YELLOW': '\033[1;33m',
            'BLUE': '\033[0;34m',
            'PURPLE': '\033[0;35m',
            'CYAN': '\033[0;36m',
            'NC': '\033[0m'
        }
        
        self.logger.info(f"마이그레이션 상태 보고 시스템 초기화 완료 (세션: {self.session_id})")
    
    def _setup_logging(self):
        """로깅 시스템 설정"""
        # 파일 핸들러
        file_handler = logging.FileHandler(self.log_file, encoding='utf-8')
        file_handler.setLevel(logging.DEBUG)
        
        # 콘솔 핸들러
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.INFO)
        
        # 포맷터
        formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - [%(name)s] - %(message)s'
        )
        file_handler.setFormatter(formatter)
        console_handler.setFormatter(formatter)
        
        # 로거 설정
        self.logger = logging.getLogger('MigrationReporter')
        self.logger.setLevel(logging.DEBUG)
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)
    
    def _init_database(self):
        """데이터베이스 초기화"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # 마이그레이션 이벤트 테이블
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS migration_events (
                    id TEXT PRIMARY KEY,
                    session_id TEXT,
                    timestamp TEXT,
                    event_type TEXT,
                    phase TEXT,
                    message TEXT,
                    details TEXT,
                    duration REAL,
                    user TEXT,
                    system_info TEXT
                )
            ''')
            
            # 시스템 스냅샷 테이블
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS system_snapshots (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    session_id TEXT,
                    timestamp TEXT,
                    cpu_usage REAL,
                    memory_usage REAL,
                    disk_usage REAL,
                    process_count INTEGER,
                    active_processes TEXT,
                    file_checksums TEXT
                )
            ''')
            
            # 마이그레이션 세션 테이블
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS migration_sessions (
                    session_id TEXT PRIMARY KEY,
                    start_time TEXT,
                    end_time TEXT,
                    status TEXT,
                    total_events INTEGER,
                    success_count INTEGER,
                    error_count INTEGER,
                    warning_count INTEGER
                )
            ''')
            
            conn.commit()
    
    def _generate_session_id(self) -> str:
        """세션 ID 생성"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        hash_input = f"{timestamp}_{os.getpid()}_{time.time()}"
        hash_suffix = hashlib.md5(hash_input.encode()).hexdigest()[:8]
        return f"migration_{timestamp}_{hash_suffix}"
    
    def _print_colored(self, message: str, color: str = 'NC'):
        """색상이 있는 메시지 출력"""
        print(f"{self.colors[color]}{message}{self.colors['NC']}")
    
    def log_event(self, event_type: str, phase: str, message: str, 
                  details: Dict[str, Any] = None, duration: float = None):
        """마이그레이션 이벤트 로깅"""
        event_id = f"{self.session_id}_{int(time.time() * 1000)}"
        
        # 시스템 정보 수집
        system_info = self._collect_system_info()
        
        # 이벤트 생성
        event = MigrationEvent(
            id=event_id,
            timestamp=datetime.now().isoformat(),
            event_type=event_type,
            phase=phase,
            message=message,
            details=details or {},
            duration=duration,
            user=os.getenv('USER', 'unknown'),
            system_info=system_info
        )
        
        # 데이터베이스에 저장
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO migration_events 
                (id, session_id, timestamp, event_type, phase, message, details, duration, user, system_info)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                event.id, self.session_id, event.timestamp, event.event_type,
                event.phase, event.message, json.dumps(event.details, ensure_ascii=False),
                event.duration, event.user, json.dumps(event.system_info, ensure_ascii=False)
            ))
            conn.commit()
        
        # 로그 출력
        level = logging.ERROR if event_type == 'error' else logging.WARNING if event_type == 'warning' else logging.INFO
        self.logger.log(level, f"[{phase}] {message}")
        
        # 콘솔 출력 (색상 포함)
        color = 'RED' if event_type == 'error' else 'YELLOW' if event_type == 'warning' else 'GREEN' if event_type == 'success' else 'BLUE'
        icon = '❌' if event_type == 'error' else '⚠️' if event_type == 'warning' else '✅' if event_type == 'success' else '📋'
        
        self._print_colored(f"{icon} [{phase}] {message}", color)
        
        if details:
            for key, value in details.items():
                self._print_colored(f"    {key}: {value}", 'CYAN')
    
    def _collect_system_info(self) -> Dict[str, str]:
        """시스템 정보 수집"""
        try:
            import psutil
            
            return {
                'cpu_percent': str(psutil.cpu_percent()),
                'memory_percent': str(psutil.virtual_memory().percent),
                'disk_percent': str(psutil.disk_usage('/').percent),
                'process_count': str(len(psutil.pids())),
                'python_version': sys.version.split()[0],
                'platform': sys.platform
            }
        except ImportError:
            # psutil이 없는 경우 기본 정보만
            return {
                'python_version': sys.version.split()[0],
                'platform': sys.platform,
                'pid': str(os.getpid())
            }
    
    def take_system_snapshot(self) -> SystemSnapshot:
        """시스템 스냅샷 생성"""
        try:
            import psutil
            
            # 활성 프로세스 목록
            active_processes = []
            for proc in psutil.process_iter(['pid', 'name']):
                try:
                    if 'python' in proc.info['name'].lower() or 'watchhamster' in proc.info['name'].lower():
                        active_processes.append(f"{proc.info['name']}({proc.info['pid']})")
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            # 주요 파일 체크섬
            file_checksums = self._calculate_file_checksums()
            
            snapshot = SystemSnapshot(
                timestamp=datetime.now().isoformat(),
                cpu_usage=psutil.cpu_percent(),
                memory_usage=psutil.virtual_memory().percent,
                disk_usage=psutil.disk_usage('/').percent,
                process_count=len(psutil.pids()),
                active_processes=active_processes,
                file_checksums=file_checksums
            )
            
            # 데이터베이스에 저장
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO system_snapshots 
                    (session_id, timestamp, cpu_usage, memory_usage, disk_usage, 
                     process_count, active_processes, file_checksums)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    self.session_id, snapshot.timestamp, snapshot.cpu_usage,
                    snapshot.memory_usage, snapshot.disk_usage, snapshot.process_count,
                    json.dumps(snapshot.active_processes, ensure_ascii=False),
                    json.dumps(snapshot.file_checksums, ensure_ascii=False)
                ))
                conn.commit()
            
            return snapshot
            
        except ImportError:
            # psutil이 없는 경우 기본 스냅샷
            return SystemSnapshot(
                timestamp=datetime.now().isoformat(),
                cpu_usage=0.0,
                memory_usage=0.0,
                disk_usage=0.0,
                process_count=0,
                active_processes=[],
                file_checksums=self._calculate_file_checksums()
            )
    
    def _calculate_file_checksums(self) -> Dict[str, str]:
        """주요 파일들의 체크섬 계산"""
        important_files = [
            "Monitoring/POSCO News 250808_mini/monitor_WatchHamster.py",
            "watchhamster_control_center.sh",
            "Monitoring/WatchHamster_v3.0/modules.json"
        ]
        
        checksums = {}
        
        for file_path in important_files:
            full_path = self.script_dir / file_path
            if full_path.exists():
                try:
                    with open(full_path, 'rb') as f:
                        content = f.read()
                        checksums[file_path] = hashlib.md5(content).hexdigest()
                except Exception as e:
                    checksums[file_path] = f"error: {str(e)}"
            else:
                checksums[file_path] = "not_found"
        
        return checksums
    
    def start_migration_phase(self, phase: str, description: str):
        """마이그레이션 단계 시작"""
        self.log_event('start', phase, f"{description} 시작")
        self.take_system_snapshot()
    
    def complete_migration_phase(self, phase: str, description: str, duration: float, success: bool = True):
        """마이그레이션 단계 완료"""
        event_type = 'success' if success else 'error'
        self.log_event(event_type, phase, f"{description} {'완료' if success else '실패'}", 
                      {'duration_seconds': duration}, duration)
        self.take_system_snapshot()
    
    def log_progress(self, phase: str, message: str, progress_percent: int = None):
        """진행 상황 로깅"""
        details = {}
        if progress_percent is not None:
            details['progress_percent'] = progress_percent
        
        self.log_event('progress', phase, message, details)
    
    def log_warning(self, phase: str, message: str, details: Dict[str, Any] = None):
        """경고 로깅"""
        self.log_event('warning', phase, message, details)
    
    def log_error(self, phase: str, message: str, error: Exception = None, details: Dict[str, Any] = None):
        """오류 로깅"""
        error_details = details or {}
        if error:
            error_details['exception_type'] = type(error).__name__
            error_details['exception_message'] = str(error)
        
        self.log_event('error', phase, message, error_details)
    
    def generate_migration_report(self, session_id: str = None) -> str:
        """마이그레이션 보고서 생성"""
        target_session = session_id or self.session_id
        
        self._print_colored("📋 마이그레이션 보고서 생성 중...", 'BLUE')
        
        # 데이터베이스에서 이벤트 조회
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # 이벤트 조회
            cursor.execute('''
                SELECT * FROM migration_events 
                WHERE session_id = ? 
                ORDER BY timestamp
            ''', (target_session,))
            events = cursor.fetchall()
            
            # 스냅샷 조회
            cursor.execute('''
                SELECT * FROM system_snapshots 
                WHERE session_id = ? 
                ORDER BY timestamp
            ''', (target_session,))
            snapshots = cursor.fetchall()
        
        if not events:
            return "지정된 세션의 마이그레이션 데이터를 찾을 수 없습니다."
        
        # 보고서 생성
        report_lines = []
        report_lines.append("=" * 80)
        report_lines.append("POSCO WatchHamster v3.0 마이그레이션 상태 보고서")
        report_lines.append("=" * 80)
        report_lines.append(f"세션 ID: {target_session}")
        report_lines.append(f"보고서 생성 시간: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report_lines.append("")
        
        # 요약 정보
        event_types = {}
        phases = {}
        total_duration = 0
        
        for event in events:
            event_type = event[3]  # event_type
            phase = event[4]       # phase
            duration = event[7]    # duration
            
            event_types[event_type] = event_types.get(event_type, 0) + 1
            phases[phase] = phases.get(phase, 0) + 1
            
            if duration:
                total_duration += duration
        
        report_lines.append("📊 마이그레이션 요약")
        report_lines.append("-" * 40)
        report_lines.append(f"총 이벤트 수: {len(events)}개")
        report_lines.append(f"총 소요 시간: {total_duration:.2f}초")
        report_lines.append("")
        
        report_lines.append("이벤트 유형별 통계:")
        for event_type, count in event_types.items():
            icon = "✅" if event_type == "success" else "❌" if event_type == "error" else "⚠️" if event_type == "warning" else "📋"
            report_lines.append(f"  {icon} {event_type}: {count}개")
        report_lines.append("")
        
        report_lines.append("단계별 통계:")
        for phase, count in phases.items():
            report_lines.append(f"  📋 {phase}: {count}개 이벤트")
        report_lines.append("")
        
        # 상세 이벤트 로그
        report_lines.append("📋 상세 이벤트 로그")
        report_lines.append("-" * 40)
        
        for event in events:
            timestamp = datetime.fromisoformat(event[2]).strftime('%H:%M:%S')
            event_type = event[3]
            phase = event[4]
            message = event[5]
            duration = event[7]
            
            icon = "✅" if event_type == "success" else "❌" if event_type == "error" else "⚠️" if event_type == "warning" else "📋"
            
            duration_str = f" ({duration:.2f}s)" if duration else ""
            report_lines.append(f"{timestamp} {icon} [{phase}] {message}{duration_str}")
            
            # 상세 정보 표시
            if event[6]:  # details
                try:
                    details = json.loads(event[6])
                    for key, value in details.items():
                        if key != 'duration_seconds':  # 이미 표시됨
                            report_lines.append(f"    {key}: {value}")
                except json.JSONDecodeError:
                    pass
        
        report_lines.append("")
        
        # 시스템 스냅샷 정보
        if snapshots:
            report_lines.append("📊 시스템 성능 추이")
            report_lines.append("-" * 40)
            
            for i, snapshot in enumerate(snapshots):
                timestamp = datetime.fromisoformat(snapshot[2]).strftime('%H:%M:%S')
                cpu = snapshot[3]
                memory = snapshot[4]
                disk = snapshot[5]
                processes = snapshot[6]
                
                report_lines.append(f"{timestamp} - CPU: {cpu:.1f}%, 메모리: {memory:.1f}%, 디스크: {disk:.1f}%, 프로세스: {processes}개")
            
            report_lines.append("")
        
        # 권장사항
        report_lines.append("💡 권장사항 및 결론")
        report_lines.append("-" * 40)
        
        error_count = event_types.get('error', 0)
        warning_count = event_types.get('warning', 0)
        success_count = event_types.get('success', 0)
        
        if error_count == 0 and warning_count == 0:
            report_lines.append("✅ 마이그레이션이 성공적으로 완료되었습니다.")
            report_lines.append("   모든 검증이 통과했으며 시스템이 정상 작동합니다.")
        elif error_count == 0 and warning_count > 0:
            report_lines.append(f"⚠️ 마이그레이션이 완료되었으나 {warning_count}개의 경고가 있습니다.")
            report_lines.append("   경고 사항을 검토하고 필요시 조치를 취하세요.")
        else:
            report_lines.append(f"❌ 마이그레이션 중 {error_count}개의 오류가 발생했습니다.")
            report_lines.append("   오류를 해결하거나 롤백을 고려하세요.")
            report_lines.append("   롤백 명령어: ./rollback_migration.sh")
        
        report_lines.append("")
        report_lines.append("📞 지원 정보:")
        report_lines.append("   - 로그 파일: " + str(self.log_file))
        report_lines.append("   - 데이터베이스: " + str(self.db_path))
        report_lines.append("   - 검증 스크립트: ./migration_verification_system.py")
        
        report_lines.append("")
        report_lines.append("=" * 80)
        
        report_content = "\n".join(report_lines)
        
        # 보고서 파일 저장
        report_file = self.reports_dir / f"migration_report_{target_session}.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        self._print_colored(f"📋 보고서 저장됨: {report_file}", 'GREEN')
        
        return report_content
    
    def list_migration_sessions(self) -> List[Tuple[str, str, str]]:
        """마이그레이션 세션 목록 조회"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT DISTINCT session_id, MIN(timestamp) as start_time, COUNT(*) as event_count
                FROM migration_events 
                GROUP BY session_id 
                ORDER BY start_time DESC
            ''')
            return cursor.fetchall()
    
    def cleanup_old_logs(self, days: int = 30):
        """오래된 로그 정리"""
        cutoff_date = datetime.now() - timedelta(days=days)
        
        # 오래된 로그 파일 삭제
        for log_file in self.log_dir.glob("migration_*.log"):
            if log_file.stat().st_mtime < cutoff_date.timestamp():
                log_file.unlink()
                self.logger.info(f"오래된 로그 파일 삭제: {log_file}")
        
        # 데이터베이스에서 오래된 레코드 삭제
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                DELETE FROM migration_events 
                WHERE timestamp < ?
            ''', (cutoff_date.isoformat(),))
            
            cursor.execute('''
                DELETE FROM system_snapshots 
                WHERE timestamp < ?
            ''', (cutoff_date.isoformat(),))
            
            conn.commit()
        
        self.logger.info(f"{days}일 이전 데이터 정리 완료")
    
    def finalize_session(self, status: str = 'completed'):
        """세션 종료"""
        # 세션 정보 업데이트
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # 이벤트 통계 계산
            cursor.execute('''
                SELECT 
                    COUNT(*) as total_events,
                    SUM(CASE WHEN event_type = 'success' THEN 1 ELSE 0 END) as success_count,
                    SUM(CASE WHEN event_type = 'error' THEN 1 ELSE 0 END) as error_count,
                    SUM(CASE WHEN event_type = 'warning' THEN 1 ELSE 0 END) as warning_count
                FROM migration_events 
                WHERE session_id = ?
            ''', (self.session_id,))
            
            stats = cursor.fetchone()
            
            # 세션 정보 저장
            cursor.execute('''
                INSERT OR REPLACE INTO migration_sessions 
                (session_id, start_time, end_time, status, total_events, success_count, error_count, warning_count)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                self.session_id, self.session_start.isoformat(), datetime.now().isoformat(),
                status, stats[0], stats[1], stats[2], stats[3]
            ))
            
            conn.commit()
        
        self.log_event('complete', 'session', f'마이그레이션 세션 종료: {status}')

def main():
    """메인 함수"""
    if len(sys.argv) < 2:
        print("사용법: python3 migration_status_reporter.py [command] [options]")
        print("명령어:")
        print("  report [session_id]  - 마이그레이션 보고서 생성")
        print("  list                 - 마이그레이션 세션 목록")
        print("  cleanup [days]       - 오래된 로그 정리 (기본: 30일)")
        print("  test                 - 테스트 이벤트 생성")
        sys.exit(1)
    
    command = sys.argv[1]
    reporter = MigrationStatusReporter()
    
    if command == "report":
        session_id = sys.argv[2] if len(sys.argv) > 2 else None
        report = reporter.generate_migration_report(session_id)
        print("\n" + report)
    
    elif command == "list":
        sessions = reporter.list_migration_sessions()
        print("\n📋 마이그레이션 세션 목록:")
        print("-" * 60)
        for session_id, start_time, event_count in sessions:
            start_dt = datetime.fromisoformat(start_time)
            print(f"{session_id}")
            print(f"  시작 시간: {start_dt.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"  이벤트 수: {event_count}개")
            print()
    
    elif command == "cleanup":
        days = int(sys.argv[2]) if len(sys.argv) > 2 else 30
        reporter.cleanup_old_logs(days)
        print(f"✅ {days}일 이전 로그 정리 완료")
    
    elif command == "test":
        # 테스트 이벤트 생성
        reporter.start_migration_phase("test", "테스트 단계")
        time.sleep(1)
        reporter.log_progress("test", "테스트 진행 중", 50)
        time.sleep(1)
        reporter.log_warning("test", "테스트 경고", {"test_key": "test_value"})
        time.sleep(1)
        reporter.complete_migration_phase("test", "테스트 단계", 3.0, True)
        reporter.finalize_session("test_completed")
        
        print("✅ 테스트 이벤트 생성 완료")
        
        # 보고서 생성
        report = reporter.generate_migration_report()
        print("\n" + report)
    
    else:
        print(f"알 수 없는 명령어: {command}")
        sys.exit(1)

if __name__ == "__main__":
    main()