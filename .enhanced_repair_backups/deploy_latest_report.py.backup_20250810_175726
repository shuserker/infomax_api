#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Deploy Latest Report
POSCO 시스템 테스트

WatchHamster v3.0 및 POSCO News 250808 호환
Created: 2025-08-08
"""

import posco_news_250808_monitor.log
import subprocess
import glob
import shutil
from datetime import datetime
import os

def get_latest_integrated_report():
    """최신 통합 리포트 파일 찾기"""
    # docs/reports에서 찾기
    docs_pattern = "deployment_verification_checklist.md"
    docs_files = glob.glob(docs_pattern)
    
    # Monitoring에서 찾기
    monitoring_pattern = "Monitoring/POSCO News 250808_mini/reports/posco_integrated_analysis_*.html"
    monitoring_files = glob.glob(monitoring_pattern)
    
    all_files = docs_files + monitoring_files
    
    if not all_files:
        return None
    
    # 가장 최신 파일 반환
    latest_file = max(all_files, key=os.path.getctime)
    return latest_file

def deploy_to_publish_branch(report_file):
    """publish 브랜치에 리포트 배포"""
    if not report_file:
        print("❌ 배포할 리포트 파일이 없습니다.")
        return False
    
    filename = os.path.basename(report_file)
    print(f"📊 배포할 리포트: {filename}")
    
    try:
        # 현재 브랜치 확인
        current_branch = subprocess.check_output(['git', 'branch', '--show-current'], text=True).strip()
        print(f"🔄 현재 브랜치: {current_branch}")
        
        # publish 브랜치로 전환
        print("🔄 publish 브랜치로 전환...")
subprocess.run(['git',_'checkout',_'publish'],_check = True)
        
        # reports 디렉토리 생성 (없으면)
os.makedirs('reports',_exist_ok = True)
        
        # 리포트 파일 복사
        dest_path = f"reports/{filename}"
        shutil.copy2(report_file, dest_path)
        print(f"✅ 파일 복사 완료: {dest_path}")
        
        # Git에 추가 및 커밋
subprocess.run(['git',_'add',_dest_path],_check = True)
        
        commit_message = f"Add report: {filename}"
        subprocess.run(['git', 'commit', '-m', commit_message], check=True)
        print(f"✅ 커밋 완료: {commit_message}")
        
        # 원격 저장소에 푸시
subprocess.run(['git',_'push',_'origin',_'publish'],_check = True)
        print("✅ publish 브랜치에 푸시 완료!")
        
        # 원래 브랜치로 돌아가기
subprocess.run(['git',_'checkout',_current_branch],_check = True)
        print(f"🔄 {current_branch} 브랜치로 복귀")
        
        # 배포된 URL 출력
        report_url = f"https:/shuserker.github.io/infomax_api/reports/{filename}"
        print(f"🌐 배포된 리포트 URL: {report_url}")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"❌ Git 명령 실행 실패: {e}")
        return False
    except Exception as e:
        print(f"❌ 배포 중 오류 발생: {e}")
        return False

def main():
    """메인 실행 함수"""
    print("🚀 최신 통합 리포트 배포 시작...")
    
    # 최신 리포트 찾기
    latest_report = get_latest_integrated_report()
    
    if not latest_report:
        print("❌ 배포할 통합 리포트를 찾을 수 없습니다.")
        return
    
    print(f"📊 발견된 최신 리포트: {latest_report}")
    
    # publish 브랜치에 배포
    success = deploy_to_publish_branch(latest_report)
    
    if success:
        print("🎉 배포 완료!")
    else:
        print("❌ 배포 실패!")

if __name__ == "__main__":
    main()