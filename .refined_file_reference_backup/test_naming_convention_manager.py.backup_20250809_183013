#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Naming Convention Manager
POSCO 시스템 테스트

WatchHamster v3.0 및 POSCO News 250808 250808 250808 250808 250808 250808 호환
Created: 2025-08-08
"""

# BROKEN_REF: import unittest
# BROKEN_REF: from naming_convention_manager.py import (
    NamingConventionManager, 
    ComponentType, 
    ConversionResult
)


class TestPOSCO News 250808 250808 250808 250808 250808 250808NamingConventionManager(unittest.TestCase):
    """네이밍 컨벤션 매니저 테스트 클래스"""
    
    def setUp(self):
        """테스트 설정"""
        self.manager = NamingConventionManager()
    
    def test_component_detection(self):
        """컴포넌트 타입 감지 테스트"""
        # WatchHamster 관련
        self.assertEqual(
            self.manager.detect_component_type(".naming_backup/config_data_backup/watchhamster.log"),
            ComponentType.WATCHHAMSTER
        )
        self.assertEqual(
# BROKEN_REF:             self.manager.detect_component_type("demo_v2_integration.py"),
            ComponentType.WATCHHAMSTER
        )
        self.assertEqual(
            self.manager.detect_component_type("🐹🐹워치햄스터_총괄_관리_센터.bat"),
            ComponentType.WATCHHAMSTER
        )
        
        # POSCO News 250808 250808 250808 250808 250808 관련
        self.assertEqual(
# BROKEN_REF:             self.manager.detect_component_type("POSCO News 250808 250808 250808 250808 250808_mini.py"),
            ComponentType.POSCO News 250808 250808 250808 250808 250808
        )
        self.assertEqual(
            self.manager.detect_component_type("Monitoring/POSCO_News_250808/Monitoring/POSCO_News_250808/posco_main_notifier.py"),
            ComponentType.POSCO News 250808 250808 250808 250808 250808
        )
        self.assertEqual(
            self.manager.detect_component_type("Monitoring/POSCO_News_250808/Monitoring/POSCO_News_250808/realtime_news_monitor.py"),
            ComponentType.POSCO News 250808 250808 250808 250808 250808
        )
        
        # Unknown
        self.assertEqual(
# BROKEN_REF:             self.manager.detect_component_type("random_file.py"),
            ComponentType.UNKNOWN
        )
    
    def test_filename_standardization(self):
        """파일명 표준화 테스트"""
        test_cases = [
            # WatchHamster 관련
            (".naming_backup/config_data_backup/watchhamster.log", "🐹WatchHamster_v3.0_Control_Center.bat"),
            (".naming_backup/config_data_backup/watchhamster.log"),
            (".naming_backup/scripts/.naming_backup/scripts/🎛️POSCO_제어센터_실행_v2.bat", "🎛️WatchHamster_v3.0_Control_Panel.bat"),
# BROKEN_REF:             ("demo_v2_integration.py", "demo_watchhamster_v3.0_integration.py"),
# BROKEN_REF:             ("test_v2_integration.py", "test_watchhamster_v3.0_integration.py"),
            (".naming_backup/config_data_backup/watchhamster.log", "Monitoring/POSCO_News_250808/Monitoring/POSCO_News_250808/monitor_WatchHamster_v3.0.py"),
            
            # POSCO News 250808 250808 250808 250808 250808 관련
# BROKEN_REF:             ("POSCO News 250808 250808 250808 250808 250808_mini.py", "POSCO_News_250808.py"),
# BROKEN_REF:             ("Monitoring/POSCO_News_250808/Monitoring/POSCO_News_250808/posco_main_notifier.py", "POSCO News 250808 250808_250808_notifier.py"),
# BROKEN_REF:             ("posco_continuous_monitor.py", "POSCO News 250808 250808_250808_monitor.py"),
# BROKEN_REF:             ("POSCO News 250808 250808_data.json", "POSCO News 250808 250808_250808_data.json"),
# BROKEN_REF:             ("POSCO News 250808 250808_cache.json", "POSCO News 250808 250808_250808_cache.json"),
        ]
        
        for original, expected in test_cases:
with_self.subTest(original = original):
                result = self.manager.standardize_filename(original)
                self.assertEqual(result.converted, expected)
                self.assertTrue(result.success)
    
    def test_foldername_standardization(self):
        """폴더명 표준화 테스트"""
        test_cases = [
            ("WatchHamster_v3.0", "WatchHamster_v3.0"),
            ("watchhamster-v3.0-integration", "watchhamster-v3.0-integration"),
            ("POSCO News 250808 250808 250808 250808 250808_mini", "POSCO_News_250808"),
        ]
        
        for original, expected in test_cases:
with_self.subTest(original = original):
                result = self.manager.standardize_foldername(original)
                self.assertEqual(result.converted, expected)
                self.assertTrue(result.success)
    
    def test_classname_standardization(self):
        """클래스명 표준화 테스트"""
        test_cases = [
            # WatchHamster 관련
            ("PoscoMonitorWatchHamster", "WatchHamster v3.00Monitor"),
            ("EnhancedProcessManager", "WatchHamster v3.00ProcessManager"),
            ("WatchhamsterIntegration", "WatchHamster v3.00Integration"),
            ("NotificationManager", "WatchHamster v3.00NotificationManager"),
            
            # POSCO News 250808 250808 250808 250808 250808 관련
            ("POSCO News 250808 250808Monitor", "POSCO News 250808 250808 250808 250808 250808 250808Monitor"),
            ("MainNotifier", "POSCO News 250808 250808 250808 250808 250808 250808Notifier"),
            ("RealtimeMonitor", "POSCO News 250808 250808 250808 250808 250808 250808RealtimeMonitor"),
        ]
        
        for original, expected in test_cases:
with_self.subTest(original = original):
                result = self.manager.standardize_classname(original)
                self.assertEqual(result.converted, expected)
                self.assertTrue(result.success)
    
    def test_variable_name_standardization(self):
        """변수명 표준화 테스트"""
        test_cases = [
            # WatchHamster 관련
            ('WATCHHAMSTER_VERSION = "v3.0"', 'WATCHHAMSTER_VERSION = "v3.0"'),
            ("watchhamster_v3_0_config", "watchhamster_v3_0_config"),
            ("watchhamster_v3_0_version", "watchhamster_v3_0_version"),
            
            # POSCO News 250808 250808 250808 250808 250808 관련
('POSCO_News_250808_250808_250808_250808_250808_VERSION =  "250808"', 'POSCO News 250808 250808 250808 250808 250808_VERSION = "250808"'),
            ("POSCO News 250808 250808_250808_data", "POSCO News 250808 250808_250808_data"),
            ("POSCO News 250808 250808_250808_version", "POSCO News 250808 250808_250808_version"),
        ]
        
        for original, expected in test_cases:
with_self.subTest(original = original):
                result = self.manager.standardize_variable_name(original)
                self.assertEqual(result.converted, expected)
                self.assertTrue(result.success)
    
    def test_version_info(self):
        """버전 정보 테스트"""
        version_info = self.manager.get_version_info()
        
        self.assertEqual(version_info["watchwatchhamster_v3_0_version"], "v3.0")
        self.assertEqual(version_info["posco_POSCO News 250808 250808_250808_version"], "250808")
        self.assertIn("last_updated", version_info)
    
    def test_conversion_statistics(self):
        """변환 통계 테스트"""
        # 몇 가지 변환 수행
# BROKEN_REF:         self.manager.standardize_filename("demo_v2_integration.py")
# BROKEN_REF:         self.manager.standardize_filename("POSCO News 250808 250808 250808 250808 250808_mini.py")
# BROKEN_REF:         self.manager.standardize_filename("unknown_file.py")  # 실패 케이스
        
        stats = self.manager.get_conversion_statistics()
        
        self.assertEqual(stats["total_conversions"], 3)
        self.assertEqual(stats["successful_conversions"], 2)
        self.assertEqual(stats["failed_conversions"], 1)
        self.assertEqual(stats["watchhamster_conversions"], 1)
        self.assertEqual(stats["POSCO News 250808 250808_conversions"], 1)
    
    def test_conversion_report_generation(self):
        """변환 보고서 생성 테스트"""
        # 몇 가지 변환 수행
# BROKEN_REF:         self.manager.standardize_filename("demo_v2_integration.py")
        self.manager.standardize_classname("POSCO News 250808 250808Monitor")
        
        report = self.manager.generate_conversion_report()
        
        self.assertIn("POSCO 네이밍 컨벤션 변환 보고서", report)
        self.assertIn("WatchHamster: v3.0", report)
        self.assertIn("POSCO News 250808 250808 250808 250808 250808: 250808", report)
# BROKEN_REF:         self.assertIn("demo_v2_integration.py", report)
        self.assertIn("POSCO News 250808 250808Monitor", report)
    
    def test_unknown_component_handling(self):
        """알 수 없는 컴포넌트 처리 테스트"""
# BROKEN_REF:         result = self.manager.standardize_filename("random_file.py")
        
# BROKEN_REF:         self.assertEqual(result.original, "random_file.py")
# BROKEN_REF:         self.assertEqual(result.converted, "random_file.py")
        self.assertEqual(result.component, ComponentType.UNKNOWN)
        self.assertFalse(result.success)
        self.assertEqual(result.reason, "Unknown component type")


class TestNamingRules(unittest.TestCase):
    """네이밍 규칙 테스트"""
    
    def setUp(self):
        """테스트 설정"""
        self.manager = NamingConventionManager()
    
    def test_naming_rules_initialization(self):
        """네이밍 규칙 초기화 테스트"""
        rules = self.manager.naming_rules
        
        # WatchHamster 규칙 확인
        watchhamster_rule = rules[ComponentType.WATCHHAMSTER]
        self.assertEqual(watchhamster_rule.version, "v3.0")
        self.assertEqual(watchhamster_rule.file_pattern, "*_v3.0_*")
        self.assertEqual(watchhamster_rule.folder_pattern, "WatchHamster_v3.0_*")
        self.assertEqual(watchhamster_rule.class_pattern, "*WatchHamster v3.00*")
        self.assertEqual(watchhamster_rule.variable_pattern, "watchhamster_v3_0_*")
        self.assertEqual(watchhamster_rule.comment_pattern, "WatchHamster v3.0")
        
        # POSCO News 250808 250808 250808 250808 250808 규칙 확인
POSCO_News_250808_250808_rule =  rules[ComponentType.POSCO News 250808 250808 250808 250808 250808]
        self.assertEqual(POSCO News 250808 250808_rule.version, "250808")
        self.assertEqual(POSCO News 250808 250808_rule.file_pattern, "*_250808_*")
        self.assertEqual(POSCO News 250808 250808_rule.folder_pattern, "POSCO_News_250808_*")
        self.assertEqual(POSCO News 250808 250808_rule.class_pattern, "*POSCO News 250808 250808 250808 250808 250808 250808*")
        self.assertEqual(POSCO News 250808 250808_rule.variable_pattern, "POSCO News 250808 250808_250808_*")
        self.assertEqual(POSCO News 250808 250808_rule.comment_pattern, "POSCO News 250808 250808 250808 250808 250808 250808")


if __name__ == "__main__":
    # 테스트 실행
    unittest.main(verbosity=2)