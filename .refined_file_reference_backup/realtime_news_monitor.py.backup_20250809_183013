#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Realtime News Monitor
POSCO 모니터링 시스템

WatchHamster v3.0 및 POSCO News 250808 호환
Created: 2025-08-08
"""

import posco_news_250808_monitor.log
import system_functionality_verification.py
import .comprehensive_repair_backup/realtime_news_monitor.py.backup_20250809_181657
# BROKEN_REF: import requests
# BROKEN_REF: from datetime import datetime, timedelta
import test_config.json

# 현재 스크립트 디렉토리를 Python 경로에 추가
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

try:
from core import posco_news_250808_monitor.log News 250808DataProcessor, DoorayNotifier
    from .git/config import .git/config, DOORAY_WEBHOOK_URL, BOT_PROFILE_IMAGE_URL
# BROKEN_REF:     from Monitoring/POSCO_News_250808/backup_archive_20250806/disabled_monitors_20250803/newyork_monitor.py import NewYorkMarketMonitor
# BROKEN_REF:     from Monitoring/POSCO_News_250808/backup_archive_20250806/disabled_monitors_20250803/kospi_monitor.py import KospiCloseMonitor
# BROKEN_REF:     from Monitoring/POSCO_News_250808/backup_archive_20250806/disabled_monitors_20250803/exchange_monitor.py import ExchangeRateMonitor
# BROKEN_REF:     from Monitoring/POSCO_News_250808/backup_archive_20250806/disabled_monitors_20250803/master_news_monitor.py import MasterNewsMonitor
# BROKEN_REF:     from Monitoring/POSCO_News_250808/core/state_manager.py import StateManager
# BROKEN_REF:     from Monitoring/POSCO_News_250808/core/process_manager.py import ProcessManager
    try:
# BROKEN_REF:         from Monitoring/POSCO_News_250808/core/colorful_ui.py import ColorfulConsoleUI
    except ImportError:
        ColorfulConsoleUI = None
except ImportError as e:
    print(f"[ERROR] 필수 모듈을 찾을 수 없습니다: {e}")
    sys.exit(1)

class RealtimeNewsMonitor:
    """
    실시간 뉴스 모니터링 클래스
    """
    
    def __init__(self):
        """
        실시간 모니터 초기화 (워치햄스터 기능 완전 이관)
        """
        self.api_client = POSCO News 250808APIClient(API_CONFIG)
        
        # 각 뉴스 모니터 초기화 (워치햄스터와 동일)
        self.monitors = {
            'exchange-rate': {
                'monitor': ExchangeRateMonitor(),
                'name': '💱 서환마감',
                'last_title': None,
                'last_check': None
            },
            'kospi-close': {
                'monitor': KospiCloseMonitor(),
                'name': '📈 증시마감',
                'last_title': None,
                'last_check': None
            },
            'newyork-market-watch': {
                'monitor': NewYorkMarketMonitor(),
                'name': '🌆 뉴욕마켓워치',
                'last_title': None,
                'last_check': None
            }
        }
        
        # 워치햄스터에서 이관된 개별 모니터 객체들
        self.newyork_monitor = NewYorkMarketMonitor()
        self.kospi_monitor = KospiCloseMonitor()
        self.exchange_monitor = ExchangeRateMonitor()
        
        # 마스터 모니터링 시스템 초기화 (워치햄스터에서 이관)
        try:
            self.master_monitor = MasterNewsMonitor()
            self.master_monitor_enabled = True
            print("🎛️ 마스터 모니터링 시스템 연결 완료")
        except Exception as e:
            print(f"⚠️ 마스터 모니터링 시스템 초기화 실패: {e}")
            self.master_monitor_enabled = False
        
        # 스마트 상태 판단 시스템 초기화 (워치햄스터에서 이관)
        try:
            self.data_processor = NewsDataProcessor()
            self.smart_notifier = DoorayNotifier(DOORAY_WEBHOOK_URL, BOT_PROFILE_IMAGE_URL, self.api_client)
            self.smart_enabled = True
            print("🧠 스마트 상태 판단 시스템 초기화 완료")
        except Exception as e:
            print(f"⚠️ 스마트 상태 판단 시스템 초기화 실패: {e}")
            self.smart_enabled = False
        
        # 개별 모니터링 시스템 활성화 (워치햄스터 설정과 동일)
        self.individual_monitors_enabled = True
        
        # 상태 파일 경로
# BROKEN_REF:         self.state_file = os.path.join(current_dir, "realtime_monitor_state.json")
        
        # 워치햄스터에서 이관된 뉴스 관련 고정 시간 작업
        self.fixed_time_tasks = {
            "06:00": ("1", "아침 현재 상태 체크"),
            "06:10": ("2", "아침 영업일 비교 분석"), 
            "18:00": ("5", "저녁 일일 요약 리포트"),
            "18:10": ("7", "저녁 상세 일일 요약"),
            "18:20": ("8", "저녁 고급 분석")
        }
        self.executed_fixed_tasks = set()  # 오늘 실행된 고정 작업들
        
        # 이전 상태 로드
        self.load_state()
        
        print("📡 실시간 뉴스 모니터 초기화 완료")
        print(f"🔍 모니터링 대상: {len(self.monitors)}개 뉴스 타입")
        print(f"🕐 고정 시간 작업: {len(self.fixed_time_tasks)}개")
    
    def load_state(self):
        """
        이전 상태 로드
        """
        try:
            if os.path.exists(self.state_file):
with_open(self.state_file,_'r',_encoding = 'utf-8') as f:
                    state = json.load(f)
                
                for news_type, data in state.items():
                    if news_type in self.monitors:
                        self.monitors[news_type]['last_title'] = data.get('last_title')
                        self.monitors[news_type]['last_check'] = data.get('last_check')
                
                print("📋 이전 상태 로드 완료")
            else:
                print("📋 새로운 상태 파일 생성")
                
        except Exception as e:
            print(f"⚠️ 상태 로드 실패: {e}")
    
    def save_state(self):
        """
        현재 상태 저장
        """
        try:
            state = {}
            for news_type, info in self.monitors.items():
                state[news_type] = {
                    'last_title': info['last_title'],
                    'last_check': info['last_check']
                }
            
with_open(self.state_file,_'w',_encoding = 'utf-8') as f:
json.dump(state,_f,_ensure_ascii = False, indent=2)
                
        except Exception as e:
            print(f"⚠️ 상태 저장 실패: {e}")
    
    def is_quiet_hours(self):
        """
        조용한 시간대 체크 (19:01~05:59)
        
        Returns:
            bool: 조용한 시간대면 True
        """
        current_time = datetime.now()
        current_hour = current_time.hour
        current_minute = current_time.minute
        
        # 19:01~23:59 또는 00:00~05:59
return_(current_hour = = 19 and current_minute >= 1) or current_hour >= 20 or current_hour <= 5
    
    def check_fixed_time_tasks(self):
        """
        고정 시간 작업들 체크 및 실행 (워치햄스터에서 이관)
        """
        current_time = datetime.now()
        current_time_str = current_time.strftime("%H:%M")
        current_date = current_time.strftime("%Y-%m-%d")
        
        # 날짜가 바뀌면 실행된 작업 목록 초기화
        if not hasattr(self, '_last_check_date') or self._last_check_date != current_date:
            self.executed_fixed_tasks = set()
            self._last_check_date = current_date
        
        # 고정 시간 작업 체크
        for time_str, (task_type, task_name) in self.fixed_time_tasks.items():
            if current_time_str == time_str:
                task_key = f"{current_date}_{time_str}"
                if task_key not in self.executed_fixed_tasks:
                    print(f"🕐 고정 시간 작업 실행: {time_str} - {task_name}")
                    self.execute_news_task(task_type, task_name)
                    self.executed_fixed_tasks.add(task_key)
    
    def execute_news_task(self, task_type, task_name):
        """
        뉴스 관련 작업 실행 (워치햄스터에서 이관)
        """
        try:
            print(f"📅 뉴스 작업 실행: {task_name}")
            
            if task_type == "1":  # 상태 체크
                self.execute_status_check_task(task_name)
            elif task_type == "2":  # 비교 분석
                self.execute_comparison_task(task_name)
            elif task_type == "5":  # 일일 요약
                self.execute_daily_summary_task(task_name)
            elif task_type == "7":  # 상세 요약
                self.execute_detailed_summary_task(task_name)
            elif task_type == "8":  # 고급 분석
                self.execute_advanced_analysis_task(task_name)
            else:
                print(f"⚠️ 알 수 없는 작업 타입: {task_type}")
                
        except Exception as e:
            print(f"❌ {task_name} 오류: {e}")
    
    def execute_status_check_task(self, task_name):
        """
        상태 체크 작업 실행 (워치햄스터 원본 로직)
        """
        try:
            # 개별 모니터 상태 체크 (워치햄스터 원본)
            self._check_individual_monitors_status()
            
            # 마스터 모니터 상태 체크 (워치햄스터 원본)
            if self.master_monitor_enabled and hasattr(self, 'master_monitor'):
                strategy = self.master_monitor.get_current_monitoring_strategy()
                print(f"🎛️ 현재 모니터링 전략: {strategy['description']}")
            
            # 매시간 정각 상태 체크는 조용한 시간대에도 명시적 알림 전송 (워치햄스터 원본)
            if "정시 상태 체크" in task_name:
                self._send_hourly_status_notification(task_name)
            
            print(f"✅ {task_name} 완료 (최적화 방식)")
            
        except Exception as e:
            print(f"❌ 상태 체크 작업 오류: {e}")
    
    def execute_comparison_task(self, task_name):
        """
        비교 분석 작업 실행 (워치햄스터 원본 로직)
        """
        try:
            # 각 뉴스별 현재 vs 이전 데이터 비교 (워치햄스터 원본)
            comparison_results = []
            
            # 뉴욕마켓워치 비교 (워치햄스터 원본)
            if hasattr(self, 'newyork_monitor'):
                ny_current = self.newyork_monitor.get_current_news_data()
                ny_analysis = self.newyork_monitor.analyze_publish_pattern(ny_current)
                comparison_results.append(f"🌆 뉴욕마켓워치: {ny_analysis.get('analysis', '분석 불가')}")
            
            # 증시마감 비교 (워치햄스터 원본)
            if hasattr(self, 'kospi_monitor'):
                kospi_current = self.kospi_monitor.get_current_news_data()
                kospi_analysis = self.kospi_monitor.analyze_publish_pattern(kospi_current)
                comparison_results.append(f"📈 증시마감: {kospi_analysis.get('analysis', '분석 불가')}")
            
            # 서환마감 비교 (워치햄스터 원본)
            if hasattr(self, 'exchange_monitor'):
                exchange_current = self.exchange_monitor.get_current_news_data()
                exchange_analysis = self.exchange_monitor.analyze_publish_pattern(exchange_current)
                comparison_results.append(f"💱 서환마감: {exchange_analysis.get('analysis', '분석 불가')}")
            
            # 비교 결과 로그 (워치햄스터 원본)
            for result in comparison_results:
                print(f"📊 {result}")
            
            print(f"✅ {task_name} 완료 (최적화 방식)")
            
        except Exception as e:
            print(f"❌ 비교 분석 작업 오류: {e}")
    
    def execute_daily_summary_task(self, task_name):
        """
        일일 요약 작업 실행 (워치햄스터 원본 로직)
        """
        try:
            # 오늘 발행된 뉴스 요약 (워치햄스터 원본)
            summary_data = []
            published_count = 0
            
            # 각 뉴스별 오늘 발행 현황 (워치햄스터 원본)
            monitors = [
                ('🌆 뉴욕마켓워치', self.newyork_monitor if hasattr(self, 'newyork_monitor') else None),
                ('📈 증시마감', self.kospi_monitor if hasattr(self, 'kospi_monitor') else None),
                ('💱 서환마감', self.exchange_monitor if hasattr(self, 'exchange_monitor') else None)
            ]
            
            for name, monitor in monitors:
                if monitor:
                    try:
                        data = monitor.get_current_news_data()
                        analysis = monitor.analyze_publish_pattern(data)
                        is_published = analysis.get('is_published_today', False)
                        
                        if is_published:
published_count_+ =  1
                            summary_data.append(f"{name}: ✅ {analysis.get('analysis', '발행 완료')}")
                        else:
                            summary_data.append(f"{name}: ❌ {analysis.get('analysis', '미발행')}")
                    except Exception as e:
                        summary_data.append(f"{name}: ⚠️ 분석 오류")
            
            # 일일 요약 로그 (워치햄스터 원본)
            print(f"📋 일일 요약 ({published_count}/3 발행 완료):")
            for summary in summary_data:
                print(f"   {summary}")
            
            print(f"✅ {task_name} 완료 (최적화 방식)")
            
        except Exception as e:
            print(f"❌ 일일 요약 작업 오류: {e}")
    
    def execute_detailed_summary_task(self, task_name):
        """
        상세 요약 작업 실행 (워치햄스터 원본 로직)
        """
        try:
            # 향상된 상태 보고서 생성 및 전송 (워치햄스터 원본)
            if hasattr(self, 'send_enhanced_status_notification'):
                self.send_enhanced_status_notification()
                print(f"📊 향상된 상태 알림 전송 완료")
            
            print(f"✅ {task_name} 완료 (최적화 방식)")
            
        except Exception as e:
            print(f"❌ 상세 요약 작업 오류: {e}")
    
    def execute_advanced_analysis_task(self, task_name):
        """
        고급 분석 작업 실행 (워치햄스터 원본 로직)
        """
        try:
            # 마스터 모니터링 시스템의 통합 분석 사용 (워치햄스터 원본)
            if self.master_monitor_enabled and hasattr(self, 'master_monitor'):
                results = self.master_monitor.run_integrated_check()
                
                # 분석 결과 로그 (워치햄스터 원본)
                for news_type, result in results.items():
                    analysis = result.get('analysis', {})
                    published = result.get('published_today', False)
                    status = "✅ 발행 완료" if published else "⏳ 대기 중"
                    print(f"🔬 {news_type}: {status} - {analysis.get('analysis', '분석 불가')}")
            
            print(f"✅ {task_name} 완료 (최적화 방식)")
            
        except Exception as e:
            print(f"❌ 고급 분석 작업 오류: {e}")
    
    def _check_individual_monitors_status(self):
        """
        개별 모니터링 시스템 상태 체크 및 보고 (워치햄스터 원본)
        
        최적화된 개별 모니터링 시스템들의 상태를 확인하고
        필요시 추가 정보를 제공합니다.
        """
        try:
            current_time = datetime.now()
            individual_status = {}
            
            # 뉴욕마켓워치 상태 체크
            if hasattr(self, 'newyork_monitor'):
                try:
                    ny_data = self.newyork_monitor.get_current_news_data()
                    ny_analysis = self.newyork_monitor.analyze_publish_pattern(ny_data)
                    individual_status['newyork'] = {
                        'published': ny_analysis.get('is_published_today', False),
                        'status': ny_analysis.get('analysis', '상태 불명')
                    }
                except Exception as e:
                    individual_status['newyork'] = {'error': str(e)}
            
            # 증시마감 상태 체크
            if hasattr(self, 'kospi_monitor'):
                try:
                    kospi_data = self.kospi_monitor.get_current_news_data()
                    kospi_analysis = self.kospi_monitor.analyze_publish_pattern(kospi_data)
                    individual_status['kospi'] = {
                        'published': kospi_analysis.get('is_published_today', False),
                        'status': kospi_analysis.get('analysis', '상태 불명')
                    }
                except Exception as e:
                    individual_status['kospi'] = {'error': str(e)}
            
            # 서환마감 상태 체크
            if hasattr(self, 'exchange_monitor'):
                try:
                    exchange_data = self.exchange_monitor.get_current_news_data()
                    exchange_analysis = self.exchange_monitor.analyze_publish_pattern(exchange_data)
                    individual_status['exchange'] = {
                        'published': exchange_analysis.get('is_published_today', False),
                        'status': exchange_analysis.get('analysis', '상태 불명')
                    }
                except Exception as e:
                    individual_status['exchange'] = {'error': str(e)}
            
            # 상태 요약 로그
            published_count = sum(1 for status in individual_status.values()
                                if status.get('published', False))
            total_count = len(individual_status)
            
            if total_count > 0:
                print(f"📊 개별 모니터 상태: {published_count}/{total_count} 발행 완료")
                
                # 각 뉴스별 상태 로그
                news_names = {'newyork': '🌆뉴욕마켓워치', 'kospi': '📈증시마감', 'exchange': '💱서환마감'}
                for news_type, status in individual_status.items():
                    name = news_names.get(news_type, news_type)
                    if 'error' in status:
                        print(f"   {name}: ❌ 오류 - {status['error']}")
                    elif status.get('published', False):
                        print(f"   {name}: ✅ {status.get('status', '발행 완료')}")
                    else:
                        print(f"   {name}: ⏳ {status.get('status', '대기 중')}")
            
        except Exception as e:
            print(f"⚠️ 개별 모니터 상태 체크 실패: {e}")
    
    def _send_hourly_status_notification(self, task_name):
        """
        매시간 정각 상태 체크 알림 전송 (워치햄스터 원본)
        조용한 시간대에도 명시적 알림
        
        Args:
            task_name (str): 작업명
        """
        try:
            current_time = datetime.now()
            current_hour = current_time.hour
            is_quiet = self.is_quiet_hours()
            
            # 스마트 상태 판단 시스템 사용 (워치햄스터 원본)
            smart_status_info = None
            current_data = None
            
            if self.smart_enabled:
                try:
                    # 현재 뉴스 데이터 조회
                    current_data = self.api_client.get_news_data()
                    if current_data:
                        # 스마트 상태 분석
                        smart_status_info = self.data_processor.get_status_info(current_data)
                        print(f"🧠 매시간 스마트 상태 분석 완료: {smart_status_info.get('status_text', '알 수 없음')}")
                    else:
                        print("⚠️ 매시간 뉴스 데이터 조회 실패")
                except Exception as e:
                    print(f"⚠️ 매시간 스마트 상태 분석 실패: {e}")
            
            # 개별 뉴스 상태 정보 수집
            news_status_info = self._get_detailed_news_status()
            
            # 조용한 시간대에도 명시적 알림 전송 (워치햄스터 원본)
            if smart_status_info and smart_status_info.get('has_updates', False):
                # 업데이트가 있으면 상세 알림
                self.smart_notifier.send_smart_notification(smart_status_info, current_data)
            else:
                # 업데이트가 없으면 간단한 상태 알림
                self.send_notification(f"데이터 갱신 없음/n/n{news_status_info}")
                
        except Exception as e:
            print(f"❌ 매시간 상태 체크 알림 실패: {e}")
    
    def _get_detailed_news_status(self):
        """
        상세한 뉴스 상태 정보 수집 (워치햄스터 원본)
        
        Returns:
            str: 뉴스 상태 정보 텍스트
        """
        try:
            status_lines = []
            
            # 각 뉴스별 상세 상태
            monitors = [
                ('🌆 뉴욕마켓워치', self.newyork_monitor if hasattr(self, 'newyork_monitor') else None),
                ('📈 증시마감', self.kospi_monitor if hasattr(self, 'kospi_monitor') else None),
                ('💱 서환마감', self.exchange_monitor if hasattr(self, 'exchange_monitor') else None)
            ]
            
            for name, monitor in monitors:
                if monitor:
                    try:
                        data = monitor.get_current_news_data()
                        if data and data.get('title'):
                            title = data['title'][:30] + "..." if len(data['title']) > 30 else data['title']
                            publish_time = data.get('publish_time', '시간 정보 없음')
                            status_lines.append(f"{name}: {title} ({publish_time})")
                        else:
                            status_lines.append(f"{name}: 뉴스 없음")
                    except Exception as e:
                        status_lines.append(f"{name}: 확인 실패")
                else:
                    status_lines.append(f"{name}: 모니터 없음")
            
            return "/n".join(status_lines)
            
        except Exception as e:
            return f"상태 정보 수집 실패: {e}"
    
    def send_enhanced_status_notification(self):
        """
        향상된 상태 보고서 생성 및 전송 (워치햄스터 원본)
        """
        try:
            # 기본 상태 정보
            basic_status = {
                'timestamp': datetime.now().isoformat(),
                'individual_monitors': {}
            }
            
            # 개별 모니터 상태 추가
            if self.individual_monitors_enabled:
                if hasattr(self, 'newyork_monitor'):
                    ny_data = self.newyork_monitor.get_current_news_data()
                    ny_analysis = self.newyork_monitor.analyze_publish_pattern(ny_data)
                    basic_status['individual_monitors']['newyork'] = {
                        'name': '뉴욕마켓워치',
                        'published_today': ny_analysis.get('is_published_today', False),
                        'status': ny_analysis.get('status', 'unknown'),
                        'analysis': ny_analysis.get('analysis', '분석 불가')
                    }
                
                if hasattr(self, 'kospi_monitor'):
                    kospi_data = self.kospi_monitor.get_current_news_data()
                    kospi_analysis = self.kospi_monitor.analyze_publish_pattern(kospi_data)
                    basic_status['individual_monitors']['kospi'] = {
                        'name': '증시마감',
                        'published_today': kospi_analysis.get('is_published_today', False),
                        'status': kospi_analysis.get('status', 'unknown'),
                        'analysis': kospi_analysis.get('analysis', '분석 불가')
                    }
                
                if hasattr(self, 'exchange_monitor'):
                    exchange_data = self.exchange_monitor.get_current_news_data()
                    exchange_analysis = self.exchange_monitor.analyze_publish_pattern(exchange_data)
                    basic_status['individual_monitors']['exchange'] = {
                        'name': '서환마감',
                        'published_today': exchange_analysis.get('is_published_today', False),
                        'status': exchange_analysis.get('status', 'unknown'),
                        'analysis': exchange_analysis.get('analysis', '분석 불가')
                    }
            
            # 향상된 상태 알림 전송
            if self.smart_enabled and hasattr(self, 'smart_notifier'):
                self.smart_notifier.send_enhanced_status_notification(basic_status)
            
        except Exception as e:
            print(f"❌ 향상된 상태 알림 실패: {e}")
    
    def send_notification(self, message, is_error=False):
        """
        기본 알림 전송 (워치햄스터 호환)
        
        Args:
            message (str): 전송할 메시지
            is_error (bool): 오류 알림 여부
        """
        try:
            color = "#ff4444" if is_error else "#28a745"
            bot_name = "POSCO 뉴스 모니터 ❌" if is_error else "POSCO 뉴스 모니터 📰"
            
            payload = {
                "botName": bot_name,
                "botIconImage": BOT_PROFILE_IMAGE_URL,
                "text": message.split('/n')[0],
                "attachments": [{
                    "color": color,
                    "text": message
                }]
            }
            
            response = requests.post(
                DOORAY_WEBHOOK_URL,
                json=payload,
                headers={'Content-Type': 'application/json'},
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"✅ 알림 전송 성공: {message.split(chr(10))[0]}")
            else:
                print(f"❌ 알림 전송 실패: {response.status_code}")
                
        except Exception as e:
            print(f"❌ 알림 전송 오류: {e}")
    
    def check_news_updates(self):
        """
        모든 뉴스 타입의 업데이트 체크
        """
        current_time = datetime.now()
        new_news_found = False
        
        for news_type, info in self.monitors.items():
            try:
                # 현재 뉴스 데이터 가져오기
                data = info['monitor'].get_current_news_data()
                
                if data and data.get('title'):
                    current_title = data['title']
                    
                    # 새로운 뉴스인지 확인
                    if info['last_title'] != current_title:
                        print(f"🆕 새 뉴스 발견: {info['name']} - {current_title[:50]}...")
                        
                        # 알림 발송
                        self.send_news_notification(news_type, info['name'], data)
                        
                        # 상태 업데이트
                        info['last_title'] = current_title
                        info['last_check'] = current_time.isoformat()
                        
                        new_news_found = True
                    else:
                        # 동일한 뉴스 - 체크 시간만 업데이트
                        info['last_check'] = current_time.isoformat()
                else:
                    print(f"⚠️ {info['name']} 데이터 없음")
                    info['last_check'] = current_time.isoformat()
                    
            except Exception as e:
                print(f"❌ {info['name']} 체크 실패: {e}")
                info['last_check'] = current_time.isoformat()
        
        # 새 뉴스가 있으면 상태 저장
        if new_news_found:
            self.save_state()
        
        return new_news_found
    
    def send_news_notification(self, news_type, news_name, data):
        """
        뉴스 알림 발송
        
        Args:
            news_type (str): 뉴스 타입
            news_name (str): 뉴스 이름
            data (dict): 뉴스 데이터
        """
        try:
            # 조용한 시간대 체크
            if self.is_quiet_hours():
                print(f"🌙 조용한 시간대 - {news_name} 알림 발송 생략")
                return
            
            title = data.get('title', '제목 없음')
            publish_time = data.get('publish_time', '시간 정보 없음')
            
            # 메시지 구성
            message = f"📰 {news_name} 새 뉴스 발행!/n/n"
            message += f"📋 제목: {title}/n"
            message += f"🕐 발행시간: {publish_time}/n"
            message += f"📅 감지시간: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            # Dooray 페이로드
            payload = {
                "botName": "POSCO 뉴스 알리미 📰",
                "botIconImage": BOT_PROFILE_IMAGE_URL,
                "text": f"📰 {news_name} 새 뉴스 발행!",
                "attachments": [{
                    "color": "#007bff",
                    "text": message
                }]
            }
            
            # 알림 전송
            response = requests.post(
                DOORAY_WEBHOOK_URL,
                json=payload,
                headers={'Content-Type': 'application/json'},
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"✅ {news_name} 알림 전송 성공")
            else:
                print(f"❌ {news_name} 알림 전송 실패: {response.status_code}")
                
        except Exception as e:
            print(f"❌ {news_name} 알림 전송 오류: {e}")
    
    def send_status_notification(self, task_name, status_results):
        """상태 체크 결과 알림"""
        try:
            message = f"🔍 {task_name}/n/n"
            message += "/n".join(status_results)
            message += f"/n/n📅 체크 시간: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            payload = {
                "botName": "POSCO 뉴스 상태 체크 🔍",
                "botIconImage": BOT_PROFILE_IMAGE_URL,
                "text": f"🔍 {task_name}",
                "attachments": [{
                    "color": "#17a2b8",
                    "text": message
                }]
            }
            
            response = requests.post(DOORAY_WEBHOOK_URL, json=payload, timeout=10)
            if response.status_code == 200:
                print(f"✅ {task_name} 알림 전송 성공")
            
        except Exception as e:
            print(f"❌ {task_name} 알림 전송 오류: {e}")
    
    def send_comparison_notification(self, task_name, comparison_results):
        """비교 분석 결과 알림"""
        try:
            message = f"📊 {task_name}/n/n"
            message += "/n".join(comparison_results)
            message += f"/n/n📅 분석 시간: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            payload = {
                "botName": "POSCO 뉴스 비교 분석 📊",
                "botIconImage": BOT_PROFILE_IMAGE_URL,
                "text": f"📊 {task_name}",
                "attachments": [{
                    "color": "#28a745",
                    "text": message
                }]
            }
            
            response = requests.post(DOORAY_WEBHOOK_URL, json=payload, timeout=10)
            if response.status_code == 200:
                print(f"✅ {task_name} 알림 전송 성공")
            
        except Exception as e:
            print(f"❌ {task_name} 알림 전송 오류: {e}")
    
    def send_daily_summary_notification(self, task_name, summary_data, published_count):
        """일일 요약 결과 알림"""
        try:
            total_count = len(self.monitors)
            
            if published_count == total_count:
                color = "#28a745"
                status_emoji = "✅"
            elif published_count >= 2:
                color = "#ffc107"
                status_emoji = "⚠️"
            else:
                color = "#dc3545"
                status_emoji = "❌"
            
            message = f"{status_emoji} {task_name}/n/n"
            message += f"📊 발행 현황: {published_count}/{total_count}/n/n"
            message += "/n".join(summary_data)
            message += f"/n/n📅 요약 시간: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            payload = {
                "botName": "POSCO 뉴스 일일 요약 📋",
                "botIconImage": BOT_PROFILE_IMAGE_URL,
                "text": f"{status_emoji} {task_name}",
                "attachments": [{
                    "color": color,
                    "text": message
                }]
            }
            
            response = requests.post(DOORAY_WEBHOOK_URL, json=payload, timeout=10)
            if response.status_code == 200:
                print(f"✅ {task_name} 알림 전송 성공")
            
        except Exception as e:
            print(f"❌ {task_name} 알림 전송 오류: {e}")
    
    def send_detailed_summary_notification(self, task_name, detailed_info):
        """상세 요약 결과 알림"""
        try:
            message = f"📊 {task_name}/n/n"
            message += "/n/n".join(detailed_info)
            message += f"/n/n📅 상세 분석 시간: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            payload = {
                "botName": "POSCO 뉴스 상세 요약 📊",
                "botIconImage": BOT_PROFILE_IMAGE_URL,
                "text": f"📊 {task_name}",
                "attachments": [{
                    "color": "#6f42c1",
                    "text": message
                }]
            }
            
            response = requests.post(DOORAY_WEBHOOK_URL, json=payload, timeout=10)
            if response.status_code == 200:
                print(f"✅ {task_name} 알림 전송 성공")
            
        except Exception as e:
            print(f"❌ {task_name} 알림 전송 오류: {e}")
    
    def send_advanced_analysis_notification(self, task_name, analysis_results, total_news):
        """고급 분석 결과 알림"""
        try:
            message = f"🔬 {task_name}/n/n"
            message += f"📊 분석 대상: {total_news}개 뉴스/n/n"
            message += "/n/n".join(analysis_results)
            message += f"/n/n📅 고급 분석 시간: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            payload = {
                "botName": "POSCO 뉴스 고급 분석 🔬",
                "botIconImage": BOT_PROFILE_IMAGE_URL,
                "text": f"🔬 {task_name}",
                "attachments": [{
                    "color": "#e83e8c",
                    "text": message
                }]
            }
            
            response = requests.post(DOORAY_WEBHOOK_URL, json=payload, timeout=10)
            if response.status_code == 200:
                print(f"✅ {task_name} 알림 전송 성공")
            
        except Exception as e:
            print(f"❌ {task_name} 알림 전송 오류: {e}")
    
    def run_monitor(self):
        """
        실시간 모니터링 실행
        """
        print(f"/n🚀 실시간 뉴스 모니터링 시작 - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("🔍 5분마다 뉴스 업데이트 체크")
        print("⏹️ Ctrl+C로 중단")
        
        check_interval = 5 * 60  # 5분
        
        while True:
            try:
                current_time = datetime.now()
                print(f"/n⏰ {current_time.strftime('%H:%M:%S')} - 뉴스 업데이트 체크 중...")
                
                # 1. 고정 시간 작업 체크 (워치햄스터에서 이관)
                self.check_fixed_time_tasks()
                
                # 2. 뉴스 업데이트 체크
                new_news = self.check_news_updates()
                
                if new_news:
                    print("🎉 새 뉴스 발견 및 알림 완료!")
                else:
                    print("📋 새 뉴스 없음")
                
                # 다음 체크까지 대기
                print(f"⏳ {check_interval/60}분 후 다시 체크...")
                time.sleep(check_interval)
                
            except KeyboardInterrupt:
                print("/n⏹️ 실시간 모니터링 중단됨")
                break
            except Exception as e:
                print(f"❌ 모니터링 오류: {e}")
                print("🔄 1분 후 재시도...")
                time.sleep(60)
    
    def test_notifications(self):
        """
        테스트용 알림 발송
        """
        print("/n🧪 테스트 모드: 현재 뉴스 상태 확인 및 알림 테스트")
        
        for news_type, info in self.monitors.items():
            try:
                data = info['monitor'].get_current_news_data()
                
                if data and data.get('title'):
                    print(f"✅ {info['name']}: {data['title'][:50]}...")
                    
                    # 테스트 알림 발송
                    self.send_news_notification(news_type, info['name'], data)
                else:
                    print(f"⚠️ {info['name']}: 데이터 없음")
                    
            except Exception as e:
                print(f"❌ {info['name']} 테스트 실패: {e}")

def main():
    """
    메인 실행 함수
    """
    monitor = RealtimeNewsMonitor()
    
    # 명령행 인수 확인
    if len(sys.argv) > 1 and sys.argv[1] == "test":
        # 테스트 모드
        monitor.test_notifications()
    else:
        # 정상 모니터링 모드
        monitor.run_monitor()

if __name__ == "__main__":
    main()