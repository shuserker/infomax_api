#!/usr/bin/env python3
"""
파일명 표준화 도구
Filename Standardization Tool

주요 파일들의 이름을 표준 네이밍 규칙에 맞게 변경합니다.
"""

import posco_news_250808_monitor.log
# BROKEN_REF: import shutil
# BROKEN_REF: from pathlib import Path
# BROKEN_REF: from datetime import datetime
# BROKEN_REF: from typing import Dict, List, Tuple

class FilenameStandardizer:
    """파일명 표준화 도구"""
    
    def __init__(self):
        self.workspace_root = Path.cwd()
        self.backup_dir = self.workspace_root / ".filename_standardization_backup"
        self.backup_dir.mkdir(exist_ok=True)
        
        # 표준화 매핑 (기존 → 새로운)
        self.file_mappings = {
            # Python 파일들
            "POSCO_News_250808.py": "POSCO_News_250808.py",
            
            # 문서 파일들
            ".filename_standardization_backup/.filename_standardization_backup/POSCO_WatchHamster_v3_Final_Summary.md.backup_20250809_182505.backup_20250809_182505": "WatchHamster_v3.0_Final_Summary.md",
            ".filename_standardization_backup/.filename_standardization_backup/POSCO_WatchHamster_v3_Complete_Guide.md.backup_20250809_182505.backup_20250809_182505": "WatchHamster_v3.0_Complete_Guide.md", 
            ".filename_standardization_backup/.filename_standardization_backup/POSCO_WatchHamster_v3_CrossPlatform_Guide.md.backup_20250809_182505.backup_20250809_182505": "WatchHamster_v3.0_CrossPlatform_Guide.md",
        }
        
        # 폴더 매핑
        self.folder_mappings = {
            "Monitoring/Posco_News_mini": "Monitoring/POSCO_News_250808_Legacy",
            "Monitoring/Posco_News_mini_v2": "Monitoring/WatchHamster_v3.0"
        }

    def standardize_all_files(self) -> Dict:
        """모든 파일명 표준화"""
        print("🔄 파일명 표준화 시작")
        
        results = {
            "files_renamed": 0,
            "folders_renamed": 0,
            "errors": [],
            "success_files": [],
            "success_folders": []
        }
        
        # 1. 파일명 변경
        for old_name, new_name in self.file_mappings.items():
            old_path = self.workspace_root / old_name
            if old_path.exists():
                success = self._rename_file(old_path, new_name)
                if success:
                    results["files_renamed"] += 1
                    results["success_files"].append(f"{old_name} → {new_name}")
                    print(f"✅ 파일 변경: {old_name} → {new_name}")
                else:
                    results["errors"].append(f"파일 변경 실패: {old_name}")
                    print(f"❌ 파일 변경 실패: {old_name}")
            else:
                print(f"⚠️ 파일 없음: {old_name}")
        
        # 2. 폴더명 변경
        for old_name, new_name in self.folder_mappings.items():
            old_path = self.workspace_root / old_name
            if old_path.exists() and old_path.is_dir():
                success = self._rename_folder(old_path, new_name)
                if success:
                    results["folders_renamed"] += 1
                    results["success_folders"].append(f"{old_name} → {new_name}")
                    print(f"✅ 폴더 변경: {old_name} → {new_name}")
                else:
                    results["errors"].append(f"폴더 변경 실패: {old_name}")
                    print(f"❌ 폴더 변경 실패: {old_name}")
            else:
                print(f"⚠️ 폴더 없음: {old_name}")
        
        return results

    def _rename_file(self, old_path: Path, new_name: str) -> bool:
        """개별 파일 이름 변경"""
        try:
            # 백업 생성
            self._create_backup(old_path)
            
            # 새 경로 생성
            new_path = old_path.parent / new_name
            
            # 파일 이름 변경
            old_path.rename(new_path)
            return True
            
        except Exception as e:
            print(f"파일 이름 변경 오류: {e}")
            return False

    def _rename_folder(self, old_path: Path, new_name: str) -> bool:
        """개별 폴더 이름 변경"""
        try:
            # 새 경로 생성
            new_path = self.workspace_root / new_name
            
            # 상위 디렉토리 생성
            new_path.parent.mkdir(parents=True, exist_ok=True)
            
            # 폴더 이름 변경
            old_path.rename(new_path)
            return True
            
        except Exception as e:
            print(f"폴더 이름 변경 오류: {e}")
            return False

    def _create_backup(self, file_path: Path):
        """파일 백업 생성"""
        try:
            if file_path.is_file():
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_name = f"{file_path.name}.backup_{timestamp}"
                backup_path = self.backup_dir / backup_name
                shutil.copy2(file_path, backup_path)
        except Exception as e:
            print(f"백업 생성 실패: {e}")

    def update_references(self) -> Dict:
        """파일명 변경에 따른 참조 업데이트"""
        print("🔗 파일 참조 업데이트 중...")
        
        results = {
            "files_updated": 0,
            "references_updated": 0,
            "errors": []
        }
        
        # Python 파일들에서 import 구문 업데이트
        python_files = list(self.workspace_root.rglob("*.py"))
        
        for py_file in python_files:
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                original_content = content
                
                # import 구문 업데이트
                for old_name, new_name in self.file_mappings.items():
                    if old_name.endswith('.py'):
                        old_module = old_name.replace('.py', '')
                        new_module = new_name.replace('.py', '')
                        
                        # import 구문 패턴들
                        patterns = [
# BROKEN_REF:                             f"import {old_module}",
# BROKEN_REF:                             f"from {old_module} import",
# BROKEN_REF:                             f"import {old_module} as",
                            f'"{old_name}"',
                            f"'{old_name}'"
                        ]
                        
                        replacements = [
# BROKEN_REF:                             f"import {new_module}",
# BROKEN_REF:                             f"from {new_module} import", 
# BROKEN_REF:                             f"import {new_module} as",
                            f'"{new_name}"',
                            f"'{new_name}'"
                        ]
                        
                        for pattern, replacement in zip(patterns, replacements):
                            if pattern in content:
                                content = content.replace(pattern, replacement)
                                results["references_updated"] += 1
                
                # 변경사항이 있으면 저장
                if content != original_content:
                    with open(py_file, 'w', encoding='utf-8') as f:
                        f.write(content)
                    results["files_updated"] += 1
                    print(f"✅ 참조 업데이트: {py_file.name}")
                    
            except Exception as e:
                results["errors"].append(f"참조 업데이트 실패 {py_file.name}: {e}")
                print(f"❌ 참조 업데이트 실패: {py_file.name}")
        
        return results

    def verify_changes(self) -> Dict:
        """변경사항 검증"""
        print("🔍 변경사항 검증 중...")
        
        results = {
            "new_files_exist": 0,
            "old_files_removed": 0,
            "verification_errors": []
        }
        
        # 새 파일들이 존재하는지 확인
        for old_name, new_name in self.file_mappings.items():
            new_path = self.workspace_root / new_name
            old_path = self.workspace_root / old_name
            
            if new_path.exists():
                results["new_files_exist"] += 1
                print(f"✅ 새 파일 확인: {new_name}")
            else:
                results["verification_errors"].append(f"새 파일 없음: {new_name}")
                print(f"❌ 새 파일 없음: {new_name}")
            
            if not old_path.exists():
                results["old_files_removed"] += 1
                print(f"✅ 기존 파일 제거됨: {old_name}")
        
        return results

def main():
    """메인 실행 함수"""
    print("🚀 POSCO 파일명 표준화 시작")
    print("=" * 60)
    
    standardizer = FilenameStandardizer()
    
    # 1. 파일명 표준화
    print("/n1️⃣ 파일명 표준화 실행...")
    rename_results = standardizer.standardize_all_files()
    
    # 2. 참조 업데이트
    print("/n2️⃣ 파일 참조 업데이트...")
    reference_results = standardizer.update_references()
    
    # 3. 변경사항 검증
    print("/n3️⃣ 변경사항 검증...")
    verification_results = standardizer.verify_changes()
    
    # 4. 결과 요약
    print("/n" + "=" * 60)
    print("🎉 파일명 표준화 완료!")
    print("=" * 60)
    
    print(f"/n📊 파일명 변경 결과:")
    print(f"  ✅ 파일 변경: {rename_results['files_renamed']}개")
    print(f"  ✅ 폴더 변경: {rename_results['folders_renamed']}개")
    print(f"  ❌ 오류: {len(rename_results['errors'])}개")
    
    print(f"/n📊 참조 업데이트 결과:")
    print(f"  ✅ 업데이트된 파일: {reference_results['files_updated']}개")
    print(f"  ✅ 업데이트된 참조: {reference_results['references_updated']}개")
    print(f"  ❌ 오류: {len(reference_results['errors'])}개")
    
    print(f"/n📊 검증 결과:")
    print(f"  ✅ 새 파일 존재: {verification_results['new_files_exist']}개")
    print(f"  ✅ 기존 파일 제거: {verification_results['old_files_removed']}개")
    print(f"  ❌ 검증 오류: {len(verification_results['verification_errors'])}개")
    
    if rename_results['success_files']:
        print(f"/n✅ 성공한 파일 변경:")
        for change in rename_results['success_files']:
            print(f"  - {change}")
    
    if rename_results['success_folders']:
        print(f"/n✅ 성공한 폴더 변경:")
        for change in rename_results['success_folders']:
            print(f"  - {change}")
    
    total_errors = len(rename_results['errors']) + len(reference_results['errors']) + len(verification_results['verification_errors'])
    
    if total_errors == 0:
        print("/n🎊 모든 파일명 표준화가 성공적으로 완료되었습니다!")
        return 0
    else:
        print(f"/n⚠️ {total_errors}개의 오류가 발생했습니다.")
        return 1

if __name__ == "__main__":
    exit(main())