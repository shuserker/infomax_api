name: WatchHamster CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  RUST_VERSION: 'stable'

jobs:
  # 코드 품질 검사
  quality-check:
    name: 코드 품질 검사
    runs-on: ubuntu-latest
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: TypeScript 타입 체크
      run: npm run type-check
      
    - name: ESLint 검사
      run: npm run lint
      
    - name: Prettier 포맷 체크
      run: npm run format:check
      
    - name: 보안 취약점 검사
      run: npm audit --audit-level=high

  # 단위 테스트
  unit-tests:
    name: 단위 테스트
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: 단위 테스트 실행
      run: npm run test -- --coverage
      
    - name: 커버리지 업로드
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: true

  # Python 백엔드 테스트
  python-backend-tests:
    name: Python 백엔드 테스트
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Python 의존성 설치
      run: |
        cd python-backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Python 테스트 실행
      run: |
        cd python-backend
        pytest tests/ --cov=. --cov-report=xml
        
    - name: Python 커버리지 업로드
      uses: codecov/codecov-action@v3
      with:
        file: ./python-backend/coverage.xml
        flags: python

  # 크로스 플랫폼 빌드
  build:
    name: 빌드 (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    needs: [unit-tests, python-backend-tests]
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows'
            os: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'
          - platform: 'macos'
            os: 'macos-latest'
            target: 'x86_64-apple-darwin'
          - platform: 'linux'
            os: 'ubuntu-latest'
            target: 'x86_64-unknown-linux-gnu'
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Rust 설정
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: ${{ matrix.target }}
        
    - name: Rust 캐시
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: src-tauri
        
    - name: 시스템 의존성 설치 (Ubuntu)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
        
    - name: 의존성 설치
      run: npm ci
      
    - name: Python 백엔드 의존성 설치
      run: |
        cd python-backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: 프론트엔드 빌드
      run: npm run build
      env:
        NODE_ENV: production
        
    - name: Tauri 빌드
      run: npm run build:tauri
      env:
        TAURI_PLATFORM: ${{ matrix.platform }}
        TAURI_TARGET: ${{ matrix.target }}
        
    - name: 빌드 아티팩트 업로드
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.platform }}
        path: |
          src-tauri/target/release/bundle/
          dist/
        retention-days: 30

  # E2E 테스트
  e2e-tests:
    name: E2E 테스트
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: Playwright 설치
      run: npx playwright install --with-deps
      
    - name: E2E 테스트 실행
      run: npm run test:e2e
      
    - name: 테스트 결과 업로드
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  # 성능 벤치마크
  performance-benchmark:
    name: 성능 벤치마크
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: 성능 벤치마크 실행
      run: npm run benchmark:quick
      
    - name: 벤치마크 결과 업로드
      uses: actions/upload-artifact@v3
      with:
        name: performance-benchmark
        path: performance-benchmark-*.json
        retention-days: 90

  # 패키지 생성
  package:
    name: 패키지 생성 (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    needs: [build, e2e-tests]
    if: startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      matrix:
        include:
          - platform: 'windows'
            os: 'windows-latest'
          - platform: 'macos'
            os: 'macos-latest'
          - platform: 'linux'
            os: 'ubuntu-latest'
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: 빌드 아티팩트 다운로드
      uses: actions/download-artifact@v3
      with:
        name: build-${{ matrix.platform }}
        
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: 설치 패키지 생성
      run: npm run package
      
    - name: 패키지 업로드
      uses: actions/upload-artifact@v3
      with:
        name: packages-${{ matrix.platform }}
        path: dist-packages/
        retention-days: 90

  # 배포 검증
  deployment-validation:
    name: 배포 검증 (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    needs: package
    if: startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      matrix:
        include:
          - platform: 'windows'
            os: 'windows-latest'
          - platform: 'macos'
            os: 'macos-latest'
          - platform: 'linux'
            os: 'ubuntu-latest'
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: 패키지 다운로드
      uses: actions/download-artifact@v3
      with:
        name: packages-${{ matrix.platform }}
        path: dist-packages/
        
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: npm ci
      
    - name: 배포 검증 실행
      run: npm run validate:quick
      
    - name: 검증 결과 업로드
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: validation-results-${{ matrix.platform }}
        path: deployment-test-report-*.json
        retention-days: 30

  # GitHub 릴리스 생성
  release:
    name: GitHub 릴리스 생성
    runs-on: ubuntu-latest
    needs: [deployment-validation]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      
    - name: 모든 패키지 다운로드
      uses: actions/download-artifact@v3
      with:
        pattern: packages-*
        merge-multiple: true
        path: release-packages/
        
    - name: 릴리스 노트 생성
      id: release-notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        cat > release-notes.md << EOF
        # WatchHamster $VERSION
        
        ## 주요 변경사항
        - 성능 개선 및 버그 수정
        - UI/UX 개선
        - 새로운 기능 추가
        
        ## 다운로드
        각 플랫폼별 설치 패키지를 다운로드하세요.
        
        ## 설치 방법
        - **Windows**: MSI 파일을 다운로드하여 실행
        - **macOS**: DMG 파일을 다운로드하여 설치
        - **Linux**: DEB 파일을 다운로드하여 설치
        EOF
        
    - name: GitHub 릴리스 생성
      uses: softprops/action-gh-release@v1
      with:
        name: WatchHamster ${{ steps.release-notes.outputs.version }}
        body_path: release-notes.md
        files: release-packages/**/*
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Slack 알림
  notify:
    name: 배포 알림
    runs-on: ubuntu-latest
    needs: [release]
    if: always() && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Slack 알림 전송
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#releases'
        text: |
          WatchHamster ${{ github.ref_name }} 릴리스가 ${{ job.status == 'success' && '성공적으로 완료' || '실패' }}되었습니다.
          
          릴리스 페이지: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: env.SLACK_WEBHOOK_URL != ''