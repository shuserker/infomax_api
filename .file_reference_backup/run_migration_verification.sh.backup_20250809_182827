#!/bin/bash
# POSCO WatchHamster v3.0.0 마이그레이션 검증 실행 스크립트
# Migration Verification Execution Script for POSCO WatchHamster v2.0

set -e  # 오류 시 중단

echo "🚀 POSCO WatchHamster v3.0.0 마이그레이션 검증 시스템 실행"
echo "=================================================================="

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_step() {
    echo -e "${BLUE}[단계 $1]${NC} $2"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${CYAN}ℹ️ $1${NC}"
}

# 사용법 출력
show_usage() {
    echo "사용법: $0 [옵션]"
    echo ""
    echo "옵션:"
    echo "  --full              전체 검증 실행 (기본값)"
    echo "  --backup-only       백업 검증만 실행"
    echo "  --rollback-only     롤백 테스트만 실행"
    echo "  --post-only         마이그레이션 후 검증만 실행"
    echo "  --report-only       보고서 생성만 실행"
    echo "  --test-system       검증 시스템 자체 테스트"
    echo "  --cleanup           오래된 로그 정리"
    echo "  --help              이 도움말 표시"
    echo ""
    echo "예시:"
    echo "  $0                  # 전체 검증 실행"
    echo "  $0 --backup-only    # 백업 검증만 실행"
    echo "  $0 --test-system    # 검증 시스템 테스트"
}

# 환경 확인
check_environment() {
    print_step "0" "환경 확인"
    
    # Python 확인
    if ! command -v python3 &> /dev/null; then
        print_error "Python3가 설치되지 않았습니다"
        exit 1
    fi
    
    PYTHON_VERSION=$(python3 --version 2>&1 | cut -d' ' -f2)
    print_success "Python 버전: $PYTHON_VERSION"
    
    # 필수 스크립트 확인
    REQUIRED_SCRIPTS=(
        "migration_verification_system.py"
        "test_rollback_functionality.py"
        "post_migration_verification.py"
        "migration_status_reporter.py"
    )
    
    for script in "${REQUIRED_SCRIPTS[@]}"; do
        if [ -f "$script" ]; then
            print_success "$script 존재 확인"
        else
            print_error "$script 파일이 없습니다"
            exit 1
        fi
    done
    
    # 실행 권한 확인
    if [ ! -w "." ]; then
        print_error "현재 디렉토리에 쓰기 권한이 없습니다"
        exit 1
    fi
    
    print_success "환경 확인 완료"
}

# 백업 검증 실행
run_backup_verification() {
    print_step "1" "백업 안전성 검증"
    
    if python3 migration_verification_system.py backup-check; then
        print_success "백업 검증 완료"
        return 0
    else
        print_error "백업 검증 실패"
        return 1
    fi
}

# 롤백 기능 테스트
run_rollback_test() {
    print_step "2" "롤백 기능 테스트"
    
    # 롤백 통합 테스트 실행
    if python3 test_rollback_functionality.py; then
        print_success "롤백 기능 테스트 완료"
        return 0
    else
        print_error "롤백 기능 테스트 실패"
        return 1
    fi
}

# 마이그레이션 후 검증
run_post_migration_verification() {
    print_step "3" "마이그레이션 후 검증"
    
    if python3 post_migration_verification.py; then
        print_success "마이그레이션 후 검증 완료"
        return 0
    else
        print_error "마이그레이션 후 검증 실패"
        return 1
    fi
}

# 종합 보고서 생성
generate_comprehensive_report() {
    print_step "4" "종합 보고서 생성"
    
    # 마이그레이션 검증 시스템 보고서
    if python3 migration_verification_system.py report; then
        print_success "검증 시스템 보고서 생성 완료"
    else
        print_warning "검증 시스템 보고서 생성 실패"
    fi
    
    # 상태 보고 시스템 보고서
    if python3 migration_status_reporter.py report; then
        print_success "상태 보고 시스템 보고서 생성 완료"
    else
        print_warning "상태 보고 시스템 보고서 생성 실패"
    fi
    
    # 통합 보고서 생성
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    INTEGRATED_REPORT="integrated_migration_verification_report_${TIMESTAMP}.txt"
    
    {
        echo "=================================================================="
        echo "POSCO WatchHamster v3.0.0 마이그레이션 검증 통합 보고서"
        echo "=================================================================="
        echo "생성 시간: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "실행 스크립트: $0 $*"
        echo ""
        
        echo "📋 실행된 검증 항목"
        echo "------------------------------------------------------------------"
        if [ "$BACKUP_RESULT" = "0" ]; then
            echo "✅ 백업 안전성 검증: 통과"
        else
            echo "❌ 백업 안전성 검증: 실패"
        fi
        
        if [ "$ROLLBACK_RESULT" = "0" ]; then
            echo "✅ 롤백 기능 테스트: 통과"
        else
            echo "❌ 롤백 기능 테스트: 실패"
        fi
        
        if [ "$POST_MIGRATION_RESULT" = "0" ]; then
            echo "✅ 마이그레이션 후 검증: 통과"
        else
            echo "❌ 마이그레이션 후 검증: 실패"
        fi
        
        echo ""
        echo "📊 전체 결과 요약"
        echo "------------------------------------------------------------------"
        
        TOTAL_TESTS=3
        PASSED_TESTS=0
        
        [ "$BACKUP_RESULT" = "0" ] && PASSED_TESTS=$((PASSED_TESTS + 1))
        [ "$ROLLBACK_RESULT" = "0" ] && PASSED_TESTS=$((PASSED_TESTS + 1))
        [ "$POST_MIGRATION_RESULT" = "0" ] && PASSED_TESTS=$((PASSED_TESTS + 1))
        
        echo "전체 테스트: ${TOTAL_TESTS}개"
        echo "통과: ${PASSED_TESTS}개"
        echo "실패: $((TOTAL_TESTS - PASSED_TESTS))개"
        
        if [ $PASSED_TESTS -eq $TOTAL_TESTS ]; then
            echo ""
            echo "🎉 결론: 모든 검증이 성공적으로 완료되었습니다!"
            echo "   마이그레이션이 안전하게 완료되었으며 시스템이 정상 작동합니다."
        else
            echo ""
            echo "❌ 결론: 일부 검증이 실패했습니다."
            echo "   실패한 항목을 검토하고 필요시 롤백을 고려하세요."
            echo "   롤백 명령어: ./rollback_migration.sh"
        fi
        
        echo ""
        echo "📞 지원 정보"
        echo "------------------------------------------------------------------"
        echo "- 상세 로그: migration_logs/ 디렉토리"
        echo "- 개별 보고서: migration_reports/ 디렉토리"
        echo "- 검증 재실행: $0"
        echo "- 롤백 실행: ./rollback_migration.sh"
        
        echo ""
        echo "=================================================================="
        
    } > "$INTEGRATED_REPORT"
    
    print_success "통합 보고서 생성: $INTEGRATED_REPORT"
}

# 검증 시스템 자체 테스트
run_system_test() {
    print_step "TEST" "검증 시스템 자체 테스트"
    
    if python3 test_migration_verification_system.py; then
        print_success "검증 시스템 테스트 완료"
        return 0
    else
        print_error "검증 시스템 테스트 실패"
        return 1
    fi
}

# 로그 정리
cleanup_logs() {
    print_step "CLEANUP" "오래된 로그 정리"
    
    DAYS=${1:-30}
    
    # 상태 보고 시스템을 통한 정리
    if python3 migration_status_reporter.py cleanup "$DAYS"; then
        print_success "로그 정리 완료 (${DAYS}일 이전)"
    else
        print_warning "로그 정리 중 일부 오류 발생"
    fi
    
    # 추가 정리 작업
    find . -name "*.log" -type f -mtime +$DAYS -delete 2>/dev/null || true
    find . -name "*_report_*.txt" -type f -mtime +$DAYS -delete 2>/dev/null || true
    
    print_success "추가 로그 파일 정리 완료"
}

# 전체 검증 실행
run_full_verification() {
    print_info "전체 마이그레이션 검증을 시작합니다..."
    echo ""
    
    # 상태 보고 시작
    python3 -c "
from migration_status_reporter import MigrationStatusReporter
reporter = MigrationStatusReporter()
reporter.start_migration_phase('full_verification', '전체 마이그레이션 검증')
" 2>/dev/null || true
    
    OVERALL_SUCCESS=true
    
    # 1. 백업 검증
    if run_backup_verification; then
        BACKUP_RESULT=0
    else
        BACKUP_RESULT=1
        OVERALL_SUCCESS=false
    fi
    
    echo ""
    
    # 2. 롤백 테스트
    if run_rollback_test; then
        ROLLBACK_RESULT=0
    else
        ROLLBACK_RESULT=1
        OVERALL_SUCCESS=false
    fi
    
    echo ""
    
    # 3. 마이그레이션 후 검증
    if run_post_migration_verification; then
        POST_MIGRATION_RESULT=0
    else
        POST_MIGRATION_RESULT=1
        OVERALL_SUCCESS=false
    fi
    
    echo ""
    
    # 4. 보고서 생성
    generate_comprehensive_report
    
    # 상태 보고 완료
    python3 -c "
from migration_status_reporter import MigrationStatusReporter
reporter = MigrationStatusReporter()
reporter.complete_migration_phase('full_verification', '전체 마이그레이션 검증', 0, $OVERALL_SUCCESS)
reporter.finalize_session('full_verification_completed')
" 2>/dev/null || true
    
    echo ""
    echo "=================================================================="
    
    if [ "$OVERALL_SUCCESS" = true ]; then
        print_success "🎉 전체 마이그레이션 검증이 성공적으로 완료되었습니다!"
        echo ""
        print_info "다음 단계:"
        echo "  1. 생성된 보고서를 검토하세요"
        echo "  2. 워치햄스터 시스템을 정상적으로 사용할 수 있습니다"
        echo "  3. 정기적으로 시스템 상태를 모니터링하세요"
        return 0
    else
        print_error "❌ 일부 검증이 실패했습니다"
        echo ""
        print_info "권장 조치:"
        echo "  1. 실패한 항목의 상세 로그를 확인하세요"
        echo "  2. 문제를 해결하거나 롤백을 고려하세요"
        echo "  3. 롤백 명령어: ./rollback_migration.sh"
        return 1
    fi
}

# 메인 실행 로직
main() {
    # 환경 확인
    check_environment
    echo ""
    
    # 옵션 처리
    case "${1:-}" in
        --help|-h)
            show_usage
            exit 0
            ;;
        --backup-only)
            run_backup_verification
            exit $?
            ;;
        --rollback-only)
            run_rollback_test
            exit $?
            ;;
        --post-only)
            run_post_migration_verification
            exit $?
            ;;
        --report-only)
            generate_comprehensive_report
            exit 0
            ;;
        --test-system)
            run_system_test
            exit $?
            ;;
        --cleanup)
            cleanup_logs "${2:-30}"
            exit 0
            ;;
        --full|"")
            run_full_verification
            exit $?
            ;;
        *)
            print_error "알 수 없는 옵션: $1"
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

# 스크립트 실행
main "$@"