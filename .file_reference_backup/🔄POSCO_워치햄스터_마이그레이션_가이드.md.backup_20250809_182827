# 🔄 POSCO WatchHamster v3.0 마이그레이션 가이드

## 📖 목차
1. [마이그레이션 개요](#마이그레이션-개요)
2. [사전 준비](#사전-준비)
3. [자동 마이그레이션 스크립트](#자동-마이그레이션-스크립트)
4. [수동 마이그레이션 절차](#수동-마이그레이션-절차)
5. [롤백 절차](#롤백-절차)

---

## 🎯 마이그레이션 개요

### 마이그레이션 범위
- **기존 시스템**: POSCO WatchHamster v1.x
- **새로운 시스템**: POSCO WatchHamster v3.0
- **호환성**: 기존 기능 100% 보존
- **추가 기능**: 새로운 아키텍처 및 향상된 기능

### 주요 변경사항
```
🔄 마이그레이션 변경사항

기존 시스템 (v1.x)                새로운 시스템 (v2.0)
├── monitor_WatchHamster.py    →  ├── monitor_WatchHamster.py (개선)
├── 개별 모듈들                →  ├── 개별 모듈들 (그대로 유지)
└── 기본 프로세스 관리          →  ├── POSCO News_v2/
                                  │   ├── core/
                                  │   │   ├── enhanced_process_manager.py
                                  │   │   ├── module_registry.py
                                  │   │   └── notification_manager.py
                                  │   └── modules.json
                                  └── posco_control_center.sh (개선)
```

---

## 📋 사전 준비

### 1. 백업 생성
```bash
#!/bin/bash
# backup_before_migration.sh

echo "🔄 POSCO WatchHamster 마이그레이션 백업 시작"

# 백업 디렉토리 생성
BACKUP_DIR="backup_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

# 기존 시스템 백업
echo "📦 기존 시스템 백업 중..."
cp -r Monitoring/ "$BACKUP_DIR/"
cp posco_control_center.sh "$BACKUP_DIR/"
cp *.log "$BACKUP_DIR/" 2>/dev/null || true
cp *.json "$BACKUP_DIR/" 2>/dev/null || true

# 설정 파일 백업
echo "⚙️ 설정 파일 백업 중..."
if [ -f "Monitoring/POSCO News/config.py" ]; then
    cp "Monitoring/POSCO News/config.py" "$BACKUP_DIR/"
fi

# 데이터베이스 백업 (있는 경우)
echo "🗄️ 데이터베이스 백업 중..."
find . -name "*.db" -exec cp {} "$BACKUP_DIR/" \;

# 백업 완료
echo "✅ 백업 완료: $BACKUP_DIR"
echo "📋 백업 내용:"
ls -la "$BACKUP_DIR"
```

### 2. 시스템 요구사항 확인
```bash
#!/bin/bash
# check_requirements.sh

echo "🔍 시스템 요구사항 확인"

# Python 버전 확인
echo "🐍 Python 버전:"
python3 --version

# 필수 패키지 확인
echo "📦 필수 패키지 확인:"
python3 -c "
import sys
packages = ['requests', 'psutil', 'json']
missing = []

for pkg in packages:
    try:
        __import__(pkg)
        print(f'✅ {pkg}')
    except ImportError:
        print(f'❌ {pkg} - 설치 필요')
        missing.append(pkg)

if missing:
    print(f'\\n설치 명령어: pip3 install {\" \".join(missing)}')
"

# 디스크 공간 확인
echo "💾 디스크 공간:"
df -h .

# 메모리 확인
echo "🧠 메모리 상태:"
free -h 2>/dev/null || vm_stat | head -5

echo "✅ 요구사항 확인 완료"
```

---

## 🤖 자동 마이그레이션 스크립트

### 메인 마이그레이션 스크립트
```bash
#!/bin/bash
# migrate_to_v2.sh

set -e  # 오류 시 중단

echo "🚀 POSCO WatchHamster v3.0 마이그레이션 시작"

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_step() {
    echo -e "${BLUE}[단계 $1]${NC} $2"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# 단계 1: 사전 확인
print_step "1" "사전 확인 및 백업"

# 기존 WatchHamster 중지
if pgrep -f "monitor_WatchHamster.py" > /dev/null; then
    print_warning "기존 WatchHamster 중지 중..."
    pkill -f "monitor_WatchHamster.py"
    sleep 5
fi

# 백업 생성
./backup_before_migration.sh

# 단계 2: v2 아키텍처 설치
print_step "2" "v2 아키텍처 설치"

# v2 디렉토리 생성
mkdir -p Monitoring/POSCO News_v2/core

# 핵심 컴포넌트 파일들이 존재하는지 확인
if [ ! -f "Monitoring/POSCO News_v2/core/enhanced_process_manager.py" ]; then
    print_error "v2 컴포넌트 파일들이 없습니다. 먼저 v2 파일들을 배치해주세요."
    exit 1
fi

print_success "v2 아키텍처 파일 확인 완료"

# 단계 3: 설정 마이그레이션
print_step "3" "설정 파일 마이그레이션"

# 기존 설정에서 새 설정으로 변환
python3 << 'EOF'
import json
import os
from datetime import datetime

# 기존 설정 로드 (있는 경우)
config_data = {
    "metadata": {
        "version": "1.0",
        "last_updated": datetime.now().isoformat(),
        "description": "POSCO WatchHamster Module Registry Configuration - Migrated from v1.x"
    },
    "modules": {
        "posco_main_notifier": {
            "script_path": "posco_main_notifier.py",
            "description": "POSCO 메인 뉴스 알림 시스템",
            "auto_start": True,
            "restart_on_failure": True,
            "max_restart_attempts": 3,
            "health_check_interval": 300,
            "dependencies": [],
            "environment_vars": {
                "PYTHONUNBUFFERED": "1"
            },
            "working_directory": "../POSCO News",
            "timeout": 30,
            "priority": 1
        },
        "realtime_news_monitor": {
            "script_path": "realtime_news_monitor.py",
            "description": "실시간 뉴스 모니터링 시스템",
            "auto_start": True,
            "restart_on_failure": True,
            "max_restart_attempts": 3,
            "health_check_interval": 300,
            "dependencies": ["posco_main_notifier"],
            "environment_vars": {
                "PYTHONUNBUFFERED": "1"
            },
            "working_directory": "../POSCO News",
            "timeout": 30,
            "priority": 2
        },
        "integrated_report_scheduler": {
            "script_path": "integrated_report_scheduler.py",
            "description": "통합 리포트 스케줄러",
            "auto_start": True,
            "restart_on_failure": True,
            "max_restart_attempts": 3,
            "health_check_interval": 300,
            "dependencies": ["posco_main_notifier"],
            "environment_vars": {
                "PYTHONUNBUFFERED": "1"
            },
            "working_directory": "../POSCO News",
            "timeout": 30,
            "priority": 3
        }
    }
}

# modules.json 생성
with open('Monitoring/POSCO News_v2/modules.json', 'w', encoding='utf-8') as f:
    json.dump(config_data, f, indent=2, ensure_ascii=False)

print("✅ modules.json 생성 완료")
EOF

# 단계 4: WatchHamster 업데이트 확인
print_step "4" "WatchHamster 업데이트 확인"

# 새로운 아키텍처 import 테스트
python3 -c "
import sys
import os
sys.path.insert(0, 'Monitoring/POSCO News')

try:
    from monitor_WatchHamster import PoscoMonitorWatchHamster
    wh = PoscoMonitorWatchHamster()
    
    # 새로운 컴포넌트 확인
    if hasattr(wh, 'process_manager') and wh.process_manager:
        print('✅ Enhanced ProcessManager 활성화')
    else:
        print('⚠️ Enhanced ProcessManager 비활성화 (기존 방식 사용)')
        
    if hasattr(wh, 'module_registry') and wh.module_registry:
        print('✅ ModuleRegistry 활성화')
    else:
        print('⚠️ ModuleRegistry 비활성화')
        
    if hasattr(wh, 'notification_manager') and wh.notification_manager:
        print('✅ NotificationManager 활성화')
    else:
        print('⚠️ NotificationManager 비활성화')
        
    print('🎉 WatchHamster v3.0 초기화 성공')
    
except Exception as e:
    print(f'❌ WatchHamster 초기화 실패: {e}')
    exit(1)
"

# 단계 5: 제어센터 업데이트 확인
print_step "5" "제어센터 업데이트 확인"

if grep -q "WatchHamster 관리" posco_control_center.sh; then
    print_success "제어센터 v2.0 메뉴 구조 확인"
else
    print_warning "제어센터가 v2.0으로 업데이트되지 않았습니다"
fi

# 단계 6: 마이그레이션 검증
print_step "6" "마이그레이션 검증"

# 테스트 시작
print_warning "WatchHamster 테스트 시작 (10초간)..."
timeout 10s python3 Monitoring/POSCO News/monitor_WatchHamster.py &
TEST_PID=$!

sleep 5

if kill -0 $TEST_PID 2>/dev/null; then
    print_success "WatchHamster 테스트 실행 성공"
    kill $TEST_PID 2>/dev/null
else
    print_error "WatchHamster 테스트 실행 실패"
fi

# 단계 7: 마이그레이션 완료
print_step "7" "마이그레이션 완료"

echo ""
echo "🎉 POSCO WatchHamster v3.0 마이그레이션 완료!"
echo ""
echo "📋 마이그레이션 결과:"
echo "  ✅ 기존 기능 100% 보존"
echo "  ✅ 새로운 아키텍처 적용"
echo "  ✅ 향상된 프로세스 관리"
echo "  ✅ 개선된 제어센터"
echo ""
echo "🚀 다음 단계:"
echo "  1. ./posco_control_center.sh 실행"
echo "  2. 메뉴 1번으로 WatchHamster 시작"
echo "  3. 메뉴 4번으로 상태 확인"
echo ""
echo "📞 문제 발생 시:"
echo "  - 로그 확인: tail -f watchhamster.log"
echo "  - 롤백: ./rollback_migration.sh"
echo ""
```

### 설정 변환 스크립트
```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
설정 변환 스크립트

기존 v1.x 설정을 v2.0 형식으로 변환합니다.
"""

import json
import os
import sys
from datetime import datetime

def convert_config():
    """기존 설정을 v2.0 형식으로 변환"""
    
    print("🔄 설정 변환 시작")
    
    # 기존 config.py에서 설정 추출 (있는 경우)
    config_path = "Monitoring/POSCO News/config.py"
    existing_config = {}
    
    if os.path.exists(config_path):
        print(f"📋 기존 설정 파일 발견: {config_path}")
        
        # 간단한 설정 추출 (실제로는 더 정교한 파싱 필요)
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # 웹훅 URL 추출
            if 'WEBHOOK_URL' in content:
                print("✅ 웹훅 URL 설정 발견")
                existing_config['webhook_found'] = True
                
        except Exception as e:
            print(f"⚠️ 기존 설정 파일 읽기 실패: {e}")
    
    # v2.0 modules.json 생성
    modules_config = {
        "metadata": {
            "version": "1.0",
            "last_updated": datetime.now().isoformat(),
            "description": "POSCO WatchHamster Module Registry - Migrated from v1.x",
            "migration_info": {
                "migrated_from": "v1.x",
                "migration_date": datetime.now().isoformat(),
                "existing_config_found": bool(existing_config)
            }
        },
        "modules": {}
    }
    
    # 기본 모듈들 설정
    default_modules = {
        "posco_main_notifier": {
            "script_path": "posco_main_notifier.py",
            "description": "POSCO 메인 뉴스 알림 시스템 - v1.x에서 마이그레이션",
            "auto_start": True,
            "restart_on_failure": True,
            "max_restart_attempts": 3,
            "health_check_interval": 300,
            "dependencies": [],
            "environment_vars": {
                "PYTHONUNBUFFERED": "1"
            },
            "working_directory": "../POSCO News",
            "timeout": 30,
            "priority": 1
        },
        "realtime_news_monitor": {
            "script_path": "realtime_news_monitor.py", 
            "description": "실시간 뉴스 모니터링 시스템 - v1.x에서 마이그레이션",
            "auto_start": True,
            "restart_on_failure": True,
            "max_restart_attempts": 3,
            "health_check_interval": 300,
            "dependencies": ["posco_main_notifier"],
            "environment_vars": {
                "PYTHONUNBUFFERED": "1"
            },
            "working_directory": "../POSCO News",
            "timeout": 30,
            "priority": 2
        },
        "integrated_report_scheduler": {
            "script_path": "integrated_report_scheduler.py",
            "description": "통합 리포트 스케줄러 - v1.x에서 마이그레이션", 
            "auto_start": True,
            "restart_on_failure": True,
            "max_restart_attempts": 3,
            "health_check_interval": 300,
            "dependencies": ["posco_main_notifier"],
            "environment_vars": {
                "PYTHONUNBUFFERED": "1"
            },
            "working_directory": "../POSCO News",
            "timeout": 30,
            "priority": 3
        }
    }
    
    # 선택적 모듈들 확인 및 추가
    optional_modules = {
        "historical_data_collector": {
            "script_path": "historical_data_collector.py",
            "description": "히스토리 데이터 수집기 - v1.x에서 마이그레이션",
            "auto_start": False,  # 선택적 시작
            "restart_on_failure": True,
            "max_restart_attempts": 2,
            "health_check_interval": 600,
            "dependencies": [],
            "environment_vars": {
                "PYTHONUNBUFFERED": "1"
            },
            "working_directory": "../POSCO News",
            "timeout": 30,
            "priority": 4
        }
    }
    
    # 기본 모듈들 추가
    modules_config["modules"].update(default_modules)
    
    # 선택적 모듈들 존재 확인 후 추가
    for module_name, module_config in optional_modules.items():
        script_path = os.path.join("Monitoring/POSCO News", module_config["script_path"])
        if os.path.exists(script_path):
            modules_config["modules"][module_name] = module_config
            print(f"✅ 선택적 모듈 발견: {module_name}")
        else:
            print(f"⚠️ 선택적 모듈 없음: {module_name}")
    
    # modules.json 저장
    output_path = "Monitoring/POSCO News_v2/modules.json"
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(modules_config, f, indent=2, ensure_ascii=False)
    
    print(f"✅ 설정 변환 완료: {output_path}")
    print(f"📊 변환된 모듈 수: {len(modules_config['modules'])}")
    
    return True

if __name__ == "__main__":
    try:
        convert_config()
        print("🎉 설정 변환 성공!")
    except Exception as e:
        print(f"❌ 설정 변환 실패: {e}")
        sys.exit(1)
```