#!/bin/bash
# POSCO WatchHamster v3.0.0 마이그레이션 요구사항 체크 스크립트

echo "🔍 POSCO WatchHamster v3.0.0 마이그레이션 요구사항 확인"

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_check() {
    echo -e "${BLUE}[확인]${NC} $1"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

ERRORS=0
WARNINGS=0

# Python 버전 확인
print_check "Python 버전 확인"
if command -v python3 &> /dev/null; then
    PYTHON_VERSION=$(python3 --version 2>&1 | cut -d' ' -f2)
    print_success "Python 버전: $PYTHON_VERSION"
    
    # Python 3.8+ 확인
    if python3 -c "import sys; exit(0 if sys.version_info >= (3, 8) else 1)"; then
        print_success "Python 3.8+ 요구사항 충족"
    else
        print_error "Python 3.8 이상이 필요합니다"
        ERRORS=$((ERRORS + 1))
    fi
else
    print_error "Python3가 설치되지 않았습니다"
    ERRORS=$((ERRORS + 1))
fi

# 필수 패키지 확인
print_check "필수 패키지 확인"
python3 -c "
import sys
packages = ['requests', 'psutil', 'json', 'datetime', 'logging', 'subprocess', 'threading']
missing = []
available = []

for pkg in packages:
    try:
        __import__(pkg)
        available.append(pkg)
    except ImportError:
        missing.append(pkg)

for pkg in available:
    print(f'✅ {pkg}')

for pkg in missing:
    print(f'❌ {pkg} - 설치 필요')

if missing:
    print(f'\\n설치 명령어: pip3 install {\" \".join(missing)}')
    exit(len(missing))
else:
    exit(0)
"

if [ $? -eq 0 ]; then
    print_success "모든 필수 패키지 사용 가능"
else
    print_error "일부 필수 패키지가 누락되었습니다"
    ERRORS=$((ERRORS + 1))
fi

# 디스크 공간 확인
print_check "디스크 공간 확인"
AVAILABLE_SPACE=$(df . | tail -1 | awk '{print $4}')
REQUIRED_SPACE=1048576  # 1GB in KB

if [ "$AVAILABLE_SPACE" -gt "$REQUIRED_SPACE" ]; then
    SPACE_GB=$((AVAILABLE_SPACE / 1024 / 1024))
    print_success "사용 가능한 디스크 공간: ${SPACE_GB}GB"
else
    print_error "디스크 공간 부족 (최소 1GB 필요)"
    ERRORS=$((ERRORS + 1))
fi

# 메모리 확인
print_check "메모리 상태 확인"
if command -v free &> /dev/null; then
    AVAILABLE_MEM=$(free -m | awk 'NR==2{print $7}')
    if [ "$AVAILABLE_MEM" -gt 512 ]; then
        print_success "사용 가능한 메모리: ${AVAILABLE_MEM}MB"
    else
        print_warning "메모리가 부족할 수 있습니다 (권장: 512MB 이상)"
        WARNINGS=$((WARNINGS + 1))
    fi
elif command -v vm_stat &> /dev/null; then
    # macOS
    print_success "메모리 상태 확인 (macOS)"
else
    print_warning "메모리 상태를 확인할 수 없습니다"
    WARNINGS=$((WARNINGS + 1))
fi

# 기존 시스템 확인
print_check "기존 시스템 확인"

if [ -f "Monitoring/POSCO News 250808_mini/monitor_WatchHamster.py" ]; then
    print_success "기존 워치햄스터 발견"
else
    print_error "기존 워치햄스터를 찾을 수 없습니다"
    ERRORS=$((ERRORS + 1))
fi

if [ -f "watchhamster_control_center.sh" ]; then
    print_success "워치햄스터 제어센터 발견"
else
    print_warning "워치햄스터 제어센터를 찾을 수 없습니다"
    WARNINGS=$((WARNINGS + 1))
fi

# v2 컴포넌트 확인
print_check "v2 컴포넌트 확인"

V2_COMPONENTS=(
    "Monitoring/POSCO News 250808_mini_v2/core/enhanced_process_manager.py"
    "Monitoring/POSCO News 250808_mini_v2/core/module_registry.py"
    "Monitoring/POSCO News 250808_mini_v2/core/notification_manager.py"
    "Monitoring/POSCO News 250808_mini_v2/core/watchhamster_integration.py"
)

for component in "${V2_COMPONENTS[@]}"; do
    if [ -f "$component" ]; then
        print_success "$(basename "$component") 발견"
    else
        print_error "$component 누락"
        ERRORS=$((ERRORS + 1))
    fi
done

# 실행 중인 프로세스 확인
print_check "실행 중인 프로세스 확인"

if pgrep -f "monitor_WatchHamster.py" > /dev/null; then
    print_warning "워치햄스터가 실행 중입니다 (마이그레이션 시 중지됩니다)"
    WARNINGS=$((WARNINGS + 1))
else
    print_success "워치햄스터가 중지되어 있습니다"
fi

if pgrep -f "python.*posco" > /dev/null; then
    RUNNING_COUNT=$(pgrep -f "python.*posco" | wc -l)
    print_warning "POSCO 관련 프로세스 ${RUNNING_COUNT}개가 실행 중입니다"
    WARNINGS=$((WARNINGS + 1))
else
    print_success "POSCO 관련 프로세스가 실행되지 않고 있습니다"
fi

# 네트워크 연결 확인
print_check "네트워크 연결 확인"

if curl -s --max-time 5 https://www.google.com > /dev/null; then
    print_success "인터넷 연결 정상"
else
    print_warning "인터넷 연결을 확인할 수 없습니다"
    WARNINGS=$((WARNINGS + 1))
fi

# 권한 확인
print_check "파일 권한 확인"

if [ -w "." ]; then
    print_success "현재 디렉토리 쓰기 권한 있음"
else
    print_error "현재 디렉토리 쓰기 권한 없음"
    ERRORS=$((ERRORS + 1))
fi

# 결과 요약
echo ""
echo "📋 마이그레이션 요구사항 확인 결과"
echo "=================================="

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    print_success "모든 요구사항이 충족되었습니다!"
    echo ""
    echo "🚀 마이그레이션을 시작할 수 있습니다:"
    echo "   ./migrate_to_v2.sh"
    exit 0
elif [ $ERRORS -eq 0 ]; then
    print_warning "경고 ${WARNINGS}개가 있지만 마이그레이션 가능합니다"
    echo ""
    echo "🚀 마이그레이션을 시작할 수 있습니다:"
    echo "   ./migrate_to_v2.sh"
    exit 0
else
    print_error "오류 ${ERRORS}개, 경고 ${WARNINGS}개"
    echo ""
    echo "❌ 마이그레이션 전에 오류를 해결해주세요"
    echo ""
    echo "💡 도움말:"
    echo "   - Python 설치: https://www.python.org/downloads/"
    echo "   - 패키지 설치: pip3 install requests psutil"
    echo "   - 디스크 공간 확보: 불필요한 파일 삭제"
    exit 1
fi