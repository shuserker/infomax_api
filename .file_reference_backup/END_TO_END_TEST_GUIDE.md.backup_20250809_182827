# POSCO WatchHamster v3.0 엔드투엔드 통합 테스트 가이드

## 개요

이 문서는 POSCO WatchHamster v3.0 시스템의 엔드투엔드 통합 테스트 프레임워크에 대한 종합적인 가이드입니다.

## 테스트 구성

### 1. 전체 시스템 시작 및 종료 테스트 (`EndToEndSystemTest`)

**목적**: 시스템의 기본적인 생명주기 관리 기능 검증

**테스트 케이스**:
- `test_full_system_startup_shutdown`: 전체 시스템 시작/종료 시나리오
- `test_system_restart_scenario`: 시스템 재시작 시나리오

**검증 항목**:
- WatchHamster 프로세스 정상 시작
- v2 컴포넌트 초기화 확인
- 관리 대상 프로세스 시작 확인
- 상태 파일 생성 및 업데이트
- 정상 종료 프로세스

### 2. 스트레스 테스트 (`StressTest`)

**목적**: 다중 동시 프로세스 환경에서의 시스템 안정성 검증

**테스트 케이스**:
- `test_concurrent_process_management`: 동시 다중 프로세스 관리
- `test_high_load_stability`: 고부하 상황에서의 안정성

**검증 항목**:
- 다중 프로세스 동시 실행 관리
- CPU/메모리 집약적 작업 처리
- 시스템 리소스 사용률 모니터링
- 고부하 상황에서의 프로세스 생존율
- 리소스 제한 및 관리

### 3. 실패 시뮬레이션 테스트 (`FailureSimulationTest`)

**목적**: 다양한 오류 조건에서의 시스템 복구 능력 검증

**테스트 케이스**:
- `test_immediate_crash_handling`: 즉시 크래시 처리
- `test_delayed_failure_detection`: 지연된 실패 감지
- `test_resource_exhaustion_handling`: 리소스 고갈 처리

**검증 항목**:
- 프로세스 크래시 감지 및 복구
- 메모리 누수 감지 및 처리
- 무한 루프 상황 처리
- 자동 복구 메커니즘 동작
- 긴급 상황 알림 시스템

### 4. 연속 통합 테스트 (`ContinuousIntegrationTest`)

**목적**: 지속적인 검증을 위한 통합 테스트 스위트

**테스트 케이스**:
- `test_continuous_integration_suite`: 모든 테스트 카테고리 통합 실행

**검증 항목**:
- 전체 테스트 스위트 실행
- 테스트 결과 통계 및 분석
- CI/CD 파이프라인 호환성
- 자동화된 보고서 생성

## 테스트 실행 방법

### 1. 기본 실행

```bash
# 전체 엔드투엔드 테스트 실행
python test_end_to_end_integration.py

# 전용 테스트 러너 사용
python run_end_to_end_tests.py
```

### 2. 특정 시나리오 실행

```bash
# 사용 가능한 시나리오 목록 확인
python execute_test_scenario.py --list

# 특정 시나리오 실행
python execute_test_scenario.py --scenario system_test

# 여러 시나리오 실행
python execute_test_scenario.py --scenarios system_test stress_test

# 모든 시나리오 실행
python execute_test_scenario.py --all

# 타임아웃 설정
python execute_test_scenario.py --scenario stress_test --timeout 600
```

### 3. 종합 테스트 실행

```bash
# 모든 테스트 포함 종합 실행
python run_comprehensive_tests.py
```

## 테스트 설정

### 설정 파일 (`test_config.json`)

테스트 동작을 제어하는 설정 파일입니다:

```json
{
  "end_to_end_test_config": {
    "system_requirements": {
      "min_python_version": "3.7",
      "min_memory_gb": 1,
      "min_disk_gb": 1
    },
    "performance_thresholds": {
      "max_startup_time": 30,
      "max_shutdown_time": 15,
      "max_cpu_usage_percent": 80,
      "max_memory_usage_percent": 70,
      "min_success_rate_percent": 80
    },
    "stress_test_parameters": {
      "concurrent_processes": 5,
      "load_test_duration": 30,
      "stability_check_interval": 5
    }
  }
}
```

### 환경 변수

테스트 실행 시 설정되는 환경 변수:

- `TEST_MODE=1`: 테스트 모드 활성화
- `WATCHHAMSTER_WEBHOOK_URL`: 테스트용 웹훅 URL
- `BOT_PROFILE_IMAGE_URL`: 테스트용 봇 프로필 이미지 URL

## 테스트 결과 분석

### 성공 기준

1. **시스템 테스트**: 모든 기본 기능이 정상 동작
2. **스트레스 테스트**: 80% 이상의 프로세스가 안정적으로 실행
3. **실패 시뮬레이션**: 모든 복구 메커니즘이 올바르게 동작
4. **연속 통합**: 전체 성공률 80% 이상

### 결과 파일

테스트 실행 후 생성되는 결과 파일:

- `end_to_end_test_results.json`: 상세 테스트 결과 (JSON)
- `ci_test_report.md`: CI 테스트 보고서 (Markdown)
- `test_scenario_results_YYYYMMDD_HHMMSS.json`: 시나리오별 결과

### 보고서 구성

생성되는 보고서에는 다음 정보가 포함됩니다:

1. **실행 요약**: 총 소요시간, 성공률, 시스템 정보
2. **카테고리별 결과**: 각 테스트 카테고리의 상세 결과
3. **성능 메트릭**: CPU/메모리 사용률, 응답 시간
4. **권장사항**: 발견된 문제점과 개선 방안

## 문제 해결

### 일반적인 문제

1. **메모리 부족**
   ```
   해결방법: 시스템 메모리를 1GB 이상 확보하거나 테스트 매개변수 조정
   ```

2. **타임아웃 발생**
   ```
   해결방법: --timeout 옵션으로 타임아웃 시간 증가
   ```

3. **권한 오류**
   ```
   해결방법: 테스트 스크립트에 실행 권한 부여 (chmod +x)
   ```

### 디버깅 모드

상세한 디버깅 정보가 필요한 경우:

```bash
# 환경 변수로 디버깅 모드 활성화
export VERBOSE_LOGGING=1
python test_end_to_end_integration.py
```

## 성능 최적화

### 테스트 실행 시간 단축

1. **병렬 실행**: 독립적인 테스트는 병렬로 실행
2. **선택적 실행**: 필요한 테스트만 선택적으로 실행
3. **캐시 활용**: 반복되는 설정 작업 캐시 활용

### 리소스 사용량 최적화

1. **메모리 관리**: 테스트 후 리소스 정리
2. **프로세스 제한**: 동시 실행 프로세스 수 제한
3. **임시 파일 정리**: 테스트 완료 후 임시 파일 자동 삭제

## CI/CD 통합

### GitHub Actions 예시

```yaml
name: End-to-End Tests

on: [push, pull_request]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    - name: Run E2E Tests
      run: |
        python run_end_to_end_tests.py
    - name: Upload test results
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: '*_test_results.json'
```

## 확장 가능성

### 새로운 테스트 추가

1. `test_end_to_end_integration.py`에 새로운 테스트 클래스 추가
2. `test_config.json`에 새로운 시나리오 설정 추가
3. 필요시 새로운 테스트 스크립트 생성

### 커스텀 테스트 시나리오

```python
class CustomTest(unittest.TestCase):
    """커스텀 테스트 클래스"""
    
    def test_custom_scenario(self):
        """커스텀 테스트 시나리오"""
        # 테스트 로직 구현
        pass
```

## 요구사항 매핑

이 테스트 프레임워크는 다음 요구사항을 충족합니다:

- **5.1**: 정상 시작/중지/재시작 시나리오 테스트
- **5.2**: 프로세스 크래시 시뮬레이션 및 자동 복구 테스트
- **5.3**: 제어센터 명령 및 모든 메뉴 옵션 테스트
- **5.4**: 다수의 프로세스 관리 시 안정성 테스트

## 결론

이 엔드투엔드 통합 테스트 프레임워크는 POSCO WatchHamster v3.0 시스템의 모든 주요 기능과 시나리오를 포괄적으로 검증합니다. 정기적인 테스트 실행을 통해 시스템의 안정성과 신뢰성을 지속적으로 보장할 수 있습니다.