#!/usr/bin/env python3
"""
POSCO 시스템 기능 검증 스크립트
System Functionality Verification for POSCO Naming Convention Standardization

변경된 시스템의 모든 스크립트와 프로그램이 정상적으로 동작하는지 검증합니다.
"""

import posco_news_250808_monitor.log
import system_functionality_verification.py
# BROKEN_REF: import subprocess
import test_config.json
# BROKEN_REF: from pathlib import Path
# BROKEN_REF: from typing import Dict, List, Tuple
# BROKEN_REF: import logging
# BROKEN_REF: from datetime import datetime

# 로깅 설정
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SystemFunctionalityVerifier:
    """시스템 기능 검증기"""
    
    def __init__(self):
        self.workspace_root = Path.cwd()
        self.verification_results = []
        
    def verify_all_systems(self) -> Dict:
        """모든 시스템 기능 검증"""
        logger.info("🔍 POSCO 시스템 기능 검증 시작")
        
        # 1. Python 스크립트 구문 검증
        self._verify_python_scripts()
        
        # 2. Shell 스크립트 검증
        self._verify_shell_scripts()
        
        # 3. Batch 스크립트 검증
        self._verify_batch_scripts()
        
        # 4. JSON 설정 파일 검증
        self._verify_json_configs()
        
        # 5. 모듈 import Monitoring/POSCO_News_250808/📋POSCO_시스템_정리_및_검증_완료_20250806.md
        self._verify_module_imports()
        
        # 6. 파일 참조 무결성 검증
        self._verify_file_references()
        
        # 7. 실행 권한 검증
        self._verify_execution_permissions()
        
        return self._generate_verification_report()

    def _verify_python_scripts(self):
        """Python 스크립트 구문 검증"""
        logger.info("🐍 Python 스크립트 구문 검증 중...")
        
        python_files = list(self.workspace_root.rglob("*.py"))
        valid_scripts = []
        invalid_scripts = []
        
        for py_file in python_files:
            try:
with_open(py_file,_'r',_encoding = 'utf-8') as f:
                    content = f.read()
                
                # 구문 검사
                compile(content, str(py_file), 'exec')
                valid_scripts.append(str(py_file.relative_to(self.workspace_root)))
                
            except SyntaxError as e:
                invalid_scripts.append({
                    "file": str(py_file.relative_to(self.workspace_root)),
                    "error": f"구문 오류 (라인 {e.lineno}): {e.msg}"
                })
            except Exception as e:
                invalid_scripts.append({
                    "file": str(py_file.relative_to(self.workspace_root)),
                    "error": f"검증 실패: {str(e)}"
                })
        
        self.verification_results.append({
            "category": "Python Scripts Syntax",
            "total_files": len(python_files),
            "valid_files": len(valid_scripts),
            "invalid_files": len(invalid_scripts),
            "status": "PASS" if len(invalid_scripts) == 0 else "FAIL",
            "details": {
                "valid_scripts": valid_scripts[:10],  # 처음 10개만 표시
                "invalid_scripts": invalid_scripts
            }
        })

    def _verify_shell_scripts(self):
        """Shell 스크립트 검증"""
        logger.info("🐚 Shell 스크립트 검증 중...")
        
        shell_files = list(self.workspace_root.rglob("*.sh"))
        valid_scripts = []
        invalid_scripts = []
        
        for sh_file in shell_files:
            try:
                # 기본 구문 검사 (bash -n)
                result = subprocess.run(
                    ['bash', '-n', str(sh_file)],
                    capture_output=True,
                    text=True
                )
                
                if result.returncode == 0:
                    valid_scripts.append(str(sh_file.relative_to(self.workspace_root)))
                else:
                    invalid_scripts.append({
                        "file": str(sh_file.relative_to(self.workspace_root)),
                        "error": f"구문 오류: {result.stderr.strip()}"
                    })
                    
            except Exception as e:
                invalid_scripts.append({
                    "file": str(sh_file.relative_to(self.workspace_root)),
                    "error": f"검증 실패: {str(e)}"
                })
        
        self.verification_results.append({
            "category": "Shell Scripts Syntax",
            "total_files": len(shell_files),
            "valid_files": len(valid_scripts),
            "invalid_files": len(invalid_scripts),
            "status": "PASS" if len(invalid_scripts) == 0 else "FAIL",
            "details": {
                "valid_scripts": valid_scripts,
                "invalid_scripts": invalid_scripts
            }
        })

    def _verify_batch_scripts(self):
        """Batch 스크립트 검증"""
        logger.info("📝 Batch 스크립트 검증 중...")
        
        batch_files = list(self.workspace_root.rglob("*.bat"))
        valid_scripts = []
        invalid_scripts = []
        
        for bat_file in batch_files:
            try:
with_open(bat_file,_'r',_encoding = 'utf-8') as f:
                    content = f.read()
                
                # 기본적인 구문 검사 (빈 줄, 주석 제외)
                lines = [line.strip() for line in content.split('\n') if line.strip() and not line.strip().startswith('::')]
                
                # 기본 Batch 명령어 검증
                valid_commands = ['echo', 'set', 'if', 'for', 'call', 'goto', 'pause', 'exit', 'cd', 'dir', 'copy', 'move', 'del', 'python', 'start']
                
                has_valid_commands = False
                for line in lines:
                    if any(cmd in line.lower() for cmd in valid_commands):
                        has_valid_commands = True
                        break
                
                if has_valid_commands or len(lines) == 0:  # 빈 파일도 유효로 간주
                    valid_scripts.append(str(bat_file.relative_to(self.workspace_root)))
                else:
                    invalid_scripts.append({
                        "file": str(bat_file.relative_to(self.workspace_root)),
                        "error": "유효한 Batch 명령어를 찾을 수 없음"
                    })
                    
            except Exception as e:
                invalid_scripts.append({
                    "file": str(bat_file.relative_to(self.workspace_root)),
                    "error": f"검증 실패: {str(e)}"
                })
        
        self.verification_results.append({
            "category": "Batch Scripts",
            "total_files": len(batch_files),
            "valid_files": len(valid_scripts),
            "invalid_files": len(invalid_scripts),
            "status": "PASS" if len(invalid_scripts) == 0 else "FAIL",
            "details": {
                "valid_scripts": valid_scripts,
                "invalid_scripts": invalid_scripts
            }
        })

    def _verify_json_configs(self):
        """JSON 설정 파일 검증"""
        logger.info("⚙️ JSON 설정 파일 검증 중...")
        
        json_files = list(self.workspace_root.rglob("*.json"))
        valid_configs = []
        invalid_configs = []
        
        for json_file in json_files:
            try:
with_open(json_file,_'r',_encoding = 'utf-8') as f:
                    json.load(f)  # JSON 파싱 테스트
                
                valid_configs.append(str(json_file.relative_to(self.workspace_root)))
                
            except Exception:
                invalid_configs.append({
                    "file": str(json_file.relative_to(self.workspace_root)),
                    "error": f"JSON 파싱 오류: {str(e)}"
                })
            except Exception as e:
                invalid_configs.append({
                    "file": str(json_file.relative_to(self.workspace_root)),
                    "error": f"검증 실패: {str(e)}"
                })
        
        self.verification_results.append({
            "category": "JSON Configuration Files",
            "total_files": len(json_files),
            "valid_files": len(valid_configs),
            "invalid_files": len(invalid_configs),
            "status": "PASS" if len(invalid_configs) == 0 else "FAIL",
            "details": {
                "valid_configs": valid_configs[:10],
                "invalid_configs": invalid_configs
            }
        })

    def _verify_module_imports(self):
# BROKEN_REF:         """모듈 import 검증"""
        logger.info("📦 모듈 import Monitoring/POSCO_News_250808/📋POSCO_시스템_정리_및_검증_완료_20250806.md 중...")
        
        # 주요 모듈들 import .naming_backup/scripts/🧪POSCO_테스트_실행.bat
        test_modules = [
            "naming_convention_manager",
            "file_renaming_system",
            "python_naming_standardizer",
            "shell_batch_script_standardizer",
            "documentation_standardizer",
            "config_data_standardizer",
            "system_output_message_standardizer",
            "folder_structure_reorganizer",
            "naming_standardization_verification_system"
        ]
        
        successful_imports = []
        failed_imports = []
        
        # 현재 디렉토리를 Python 경로에 추가
        sys.path.insert(0, str(self.workspace_root))
        
        for module_name in test_modules:
            try:
# BROKEN_REF:                 module_file = self.workspace_root / f"{module_name}.py"
                if module_file.exists():
                    __import__(module_name)
                    successful_imports.append(module_name)
                else:
                    failed_imports.append({
                        "module": module_name,
                        "error": "모듈 파일이 존재하지 않음"
                    })
            except ImportError as e:
                failed_imports.append({
                    "module": module_name,
                    "error": f"Import 오류: {str(e)}"
                })
            except Exception as e:
                failed_imports.append({
                    "module": module_name,
                    "error": f"검증 실패: {str(e)}"
                })
        
        self.verification_results.append({
            "category": "Module Imports",
            "total_modules": len(test_modules),
            "successful_imports": len(successful_imports),
            "failed_imports": len(failed_imports),
            "status": "PASS" if len(failed_imports) == 0 else "FAIL",
            "details": {
                "successful_imports": successful_imports,
                "failed_imports": failed_imports
            }
        })

    def _verify_file_references(self):
        """파일 참조 무결성 검증"""
        logger.info("🔗 파일 참조 무결성 검증 중...")
        
        broken_references = []
        valid_references = []
        
        # Python 파일에서 다른 파일 참조 검사
        for py_file in self.workspace_root.rglob("*.py"):
            try:
with_open(py_file,_'r',_encoding = 'utf-8') as f:
                    content = f.read()
                
                # 파일 경로 참조 패턴 찾기
                import verify_folder_reorganization.py
                
                # 일반적인 파일 참조 패턴들
                patterns = [
                    r'open\s*\(\s*["\']([^"\']+)["\']',  # open() 함수
                    r'Path\s*\(\s*["\']([^"\']+)["\']',  # Path() 생성자
                    r'["\']([^"\']*\.(?:py|json|md|txt|log|bat|sh))["\']'  # 파일 확장자 패턴
                ]
                
                for pattern in patterns:
                    matches = re.findall(pattern, content)
                    for match in matches:
                        if not match.startswith('/') and not match.startswith('\\') and '/' in match:
                            # 상대 경로로 보이는 파일 참조
                            referenced_file = self.workspace_root / match
                            if referenced_file.exists():
                                valid_references.append(f"{py_file.name} -> {match}")
                            else:
                                broken_references.append({
                                    "source_file": str(py_file.relative_to(self.workspace_root)),
                                    "referenced_file": match,
                                    "error": "참조된 파일이 존재하지 않음"
                                })
                                
            except Exception as e:
                logger.warning(f"파일 참조 검사 실패 {py_file}: {e}")
        
        self.verification_results.append({
            "category": "File Reference Integrity",
            "valid_references": len(valid_references),
            "broken_references": len(broken_references),
            "status": "PASS" if len(broken_references) == 0 else "FAIL",
            "details": {
                "valid_references": valid_references[:10],
                "broken_references": broken_references
            }
        })

    def _verify_execution_permissions(self):
        """실행 권한 검증"""
        logger.info("🔐 실행 권한 검증 중...")
        
        executable_files = []
        permission_issues = []
        
        # Shell 스크립트 실행 권한 검사
        for sh_file in self.workspace_root.rglob("*.sh"):
            if os.access(sh_file, os.X_OK):
                executable_files.append(str(sh_file.relative_to(self.workspace_root)))
            else:
                permission_issues.append({
                    "file": str(sh_file.relative_to(self.workspace_root)),
                    "issue": "실행 권한 없음"
                })
        
        # Python 스크립트는 기본적으로 python 인터프리터로 실행 가능
        for py_file in self.workspace_root.rglob("*.py"):
# BROKEN_REF:             if py_file.name.startswith('test_') or py_file.name.endswith('_test.py'):
                executable_files.append(str(py_file.relative_to(self.workspace_root)))
        
        self.verification_results.append({
            "category": "Execution Permissions",
            "executable_files": len(executable_files),
            "permission_issues": len(permission_issues),
            "status": "PASS" if len(permission_issues) == 0 else "FAIL",
            "details": {
                "executable_files": executable_files[:10],
                "permission_issues": permission_issues
            }
        })

    def _generate_verification_report(self) -> Dict:
        """검증 보고서 생성"""
        logger.info("📊 시스템 기능 검증 보고서 생성 중...")
        
        # 전체 통계 계산
        total_categories = len(self.verification_results)
        passed_categories = len([r for r in self.verification_results if r['status'] == 'PASS'])
        failed_categories = total_categories - passed_categories
        
        overall_status = "PASS" if failed_categories == 0 else "FAIL"
        
        report = {
            "verification_summary": {
                "timestamp": datetime.now().isoformat(),
                "total_categories": total_categories,
                "passed_categories": passed_categories,
                "failed_categories": failed_categories,
                "overall_status": overall_status,
                "success_rate": round((passed_categories / total_categories * 100), 2) if total_categories > 0 else 0
            },
            "category_results": self.verification_results,
            "recommendations": self._generate_recommendations()
        }
        
        # JSON 보고서 저장
        report_file = self.workspace_root / "system_functionality_verification_report.json"
with_open(report_file,_'w',_encoding = 'utf-8') as f:
json.dump(report,_f,_ensure_ascii = False, indent=2)
        
        # HTML 보고서 생성
        self._generate_html_report(report)
        
        logger.info(f"📄 검증 보고서 저장: {report_file}")
        
        return report

    def _generate_recommendations(self) -> List[str]:
        """권장사항 생성"""
        recommendations = []
        
        for result in self.verification_results:
            if result['status'] == 'FAIL':
                category = result['category']
                
                if 'Python Scripts' in category:
                    recommendations.append("Python 스크립트의 구문 오류를 수정하세요.")
                elif 'Shell Scripts' in category:
                    recommendations.append("Shell 스크립트의 구문을 검토하고 수정하세요.")
                elif 'Batch Scripts' in category:
                    recommendations.append("Batch 스크립트의 명령어를 확인하고 수정하세요.")
                elif 'JSON' in category:
                    recommendations.append("JSON 설정 파일의 형식 오류를 수정하세요.")
                elif 'Module Imports' in category:
# BROKEN_REF:                     recommendations.append("모듈 import 오류를 해결하고 의존성을 확인하세요.")
                elif 'File Reference' in category:
                    recommendations.append("깨진 파일 참조를 수정하고 경로를 확인하세요.")
                elif 'Execution Permissions' in category:
                    recommendations.append("스크립트 파일의 실행 권한을 설정하세요.")
        
        if not recommendations:
            recommendations.append("모든 시스템 기능이 정상적으로 검증되었습니다.")
        
        return recommendations

    def _generate_html_report(self, report: Dict):
        """HTML 검증 보고서 생성"""
        html_content = f"""
<!DOCTYPE html>
<html_lang = "ko">
<head>
<meta_charset = "UTF-8">
<meta_name = "viewport" content="width=device-width, initial-scale=1.0">
    <title>POSCO 시스템 기능 검증 보고서</title>
    <style>
        body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 20px rgba(0,0,0,0.1); }}
        h1 {{ color: #2c3e50; text-align: center; margin-bottom: 30px; }}
        .summary {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }}
        .summary-card {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px; text-align: center; }}
        .summary-card h3 {{ margin: 0 0 10px 0; font-size: 2em; }}
        .summary-card p {{ margin: 0; opacity: 0.9; }}
        .status-pass {{ background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%); }}
        .status-fail {{ background: linear-gradient(135deg, #ff416c 0%, #ff4b2b 100%); }}
        .category-results {{ margin-bottom: 30px; }}
        .category-item {{ background-color: #f8f9fa; margin-bottom: 20px; padding: 20px; border-radius: 8px; }}
        .category-item.pass {{ border-left: 5px solid #27ae60; }}
        .category-item.fail {{ border-left: 5px solid #e74c3c; }}
        .category-header {{ display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; }}
        .category-name {{ font-weight: bold; font-size: 1.2em; }}
        .category-status {{ padding: 5px 15px; border-radius: 20px; color: white; font-weight: bold; }}
        .status-pass-small {{ background-color: #27ae60; }}
        .status-fail-small {{ background-color: #e74c3c; }}
        .category-stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; margin-bottom: 15px; }}
        .stat-item {{ background-color: white; padding: 10px; border-radius: 5px; text-align: center; }}
        .stat-number {{ font-size: 1.5em; font-weight: bold; color: #2c3e50; }}
        .stat-label {{ font-size: 0.9em; color: #666; }}
        .details {{ background-color: white; padding: 15px; border-radius: 5px; margin-top: 10px; }}
        .details h4 {{ margin: 0 0 10px 0; color: #2c3e50; }}
        .details ul {{ margin: 5px 0; padding-left: 20px; }}
        .details li {{ margin-bottom: 5px; }}
        .recommendations {{ background-color: #e8f4fd; border: 1px solid #bee5eb; border-radius: 8px; padding: 20px; }}
        .recommendations h3 {{ color: #0c5460; margin-top: 0; }}
        .recommendations ul {{ margin: 10px 0; padding-left: 20px; }}
        .recommendations li {{ margin-bottom: 8px; }}
        .footer {{ text-align: center; margin-top: 30px; color: #666; font-size: 0.9em; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>🔍 POSCO 시스템 기능 검증 보고서</h1>
        
        <div class="summary">
            <div class="summary-card">
                <h3>{report['verification_summary']['total_categories']}</h3>
                <p>총 검증 카테고리</p>
            </div>
            <div class="summary-card status-pass">
                <h3>{report['verification_summary']['passed_categories']}</h3>
                <p>통과</p>
            </div>
            <div class="summary-card status-fail">
                <h3>{report['verification_summary']['failed_categories']}</h3>
                <p>실패</p>
            </div>
            <div class="summary-card">
                <h3>{report['verification_summary']['success_rate']}%</h3>
                <p>성공률</p>
            </div>
        </div>
        
        <h2>📋 카테고리별 검증 결과</h2>
        <div class="category-results">
"""
        
        for result in report['category_results']:
            status_class = result['status'].lower()
            status_badge_class = f"status-{status_class}-small"
            
html_content_+ =  f"""
            <div class="category-item {status_class}">
                <div class="category-header">
                    <div class="category-name">{result['category']}</div>
                    <div class="category-status {status_badge_class}">{result['status']}</div>
                </div>
"""
            
            # 통계 정보 표시
            if 'total_files' in result:
html_content_+ =  f"""
                <div class="category-stats">
                    <div class="stat-item">
                        <div class="stat-number">{result['total_files']}</div>
                        <div class="stat-label">총 파일</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">{result['valid_files']}</div>
                        <div class="stat-label">유효</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">{result['invalid_files']}</div>
                        <div class="stat-label">무효</div>
                    </div>
                </div>
"""
            elif 'total_modules' in result:
html_content_+ =  f"""
                <div class="category-stats">
                    <div class="stat-item">
                        <div class="stat-number">{result['total_modules']}</div>
                        <div class="stat-label">총 모듈</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">{result['successful_imports']}</div>
                        <div class="stat-label">성공</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">{result['failed_imports']}</div>
                        <div class="stat-label">실패</div>
                    </div>
                </div>
"""
            
            # 상세 정보 표시 (실패한 항목이 있는 경우)
            if result['status'] == 'FAIL' and 'details' in result:
html_content_+ =  '<div class="details">'
                
                if 'invalid_scripts' in result['details'] and result['details']['invalid_scripts']:
html_content_+ =  '<h4>❌ 문제가 있는 파일:</h4><ul>'
                    for item in result['details']['invalid_scripts'][:5]:  # 처음 5개만 표시
                        if isinstance(item, dict):
html_content_+ =  f"<li><strong>{item['file']}</strong>: {item['error']}</li>"
                        else:
html_content_+ =  f"<li>{item}</li>"
html_content_+ =  '</ul>'
                
                if 'failed_imports' in result['details'] and result['details']['failed_imports']:
html_content_+ =  '<h4>❌ Import 실패:</h4><ul>'
                    for item in result['details']['failed_imports']:
html_content_+ =  f"<li><strong>{item['module']}</strong>: {item['error']}</li>"
html_content_+ =  '</ul>'
                
                if 'broken_references' in result['details'] and result['details']['broken_references']:
html_content_+ =  '<h4>❌ 깨진 참조:</h4><ul>'
                    for item in result['details']['broken_references'][:5]:
html_content_+ =  f"<li><strong>{item['source_file']}</strong> → {item['referenced_file']}: {item['error']}</li>"
html_content_+ =  '</ul>'
                
html_content_+ =  '</div>'
            
html_content_+ =  '</div>'
        
html_content_+ =  f"""
        </div>
        
        <div class="recommendations">
            <h3>💡 권장사항</h3>
            <ul>
"""
        
        for recommendation in report['recommendations']:
html_content_+ =  f"<li>{recommendation}</li>"
        
html_content_+ =  f"""
            </ul>
        </div>
        
        <div class="footer">
            <p>검증 완료 시간: {report['verification_summary']['timestamp']}</p>
            <p>POSCO WatchHamster v3.0 & POSCO News 250808 시스템 기능 검증</p>
        </div>
    </div>
</body>
</html>
"""
        
        html_file = self.workspace_root / "system_functionality_verification_report.html"
with_open(html_file,_'w',_encoding = 'utf-8') as f:
            f.write(html_content)
        
        logger.info(f"📄 HTML 검증 보고서 저장: {html_file}")


def main():
    """메인 실행 함수"""
    print("🔍 POSCO 시스템 기능 검증 시작")
    print("=" * 60)
    
    verifier = SystemFunctionalityVerifier()
    report = verifier.verify_all_systems()
    
print("\n"_+_" = " * 60)
    print("📊 시스템 기능 검증 결과")
    print("=" * 60)
    print(f"총 검증 카테고리: {report['verification_summary']['total_categories']}")
    print(f"통과: {report['verification_summary']['passed_categories']}")
    print(f"실패: {report['verification_summary']['failed_categories']}")
    print(f"성공률: {report['verification_summary']['success_rate']}%")
    print(f"전체 상태: {report['verification_summary']['overall_status']}")
    
    if report['verification_summary']['overall_status'] == "FAIL":
        print("\n❌ 일부 시스템 기능에 문제가 있습니다. 상세 보고서를 확인하세요.")
        return 1
    else:
        print("\n✅ 모든 시스템 기능이 정상적으로 검증되었습니다!")
        return 0


if __name__ == "__main__":
    sys.exit(main())