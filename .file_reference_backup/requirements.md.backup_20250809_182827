# POSCO 시스템 수리 및 완성 요구사항

## 개요

최종 통합 테스트에서 발견된 모든 문제점들을 해결하여 POSCO 시스템을 완전히 작동 가능한 상태로 만드는 프로젝트입니다.

## 배경

2025년 8월 9일 실시된 최종 통합 테스트 결과:
- **Python 스크립트**: 121개 중 38개 구문 오류 (68.6% 성공률)
- **모듈 Import**: 9개 중 6개 실패 (33.3% 성공률)  
- **파일 참조**: 83개 깨진 참조 발견
- **파일명 표준화**: 일부 레거시 파일명 잔존
- **전체 시스템**: 18.75% 성공률

## 🚨 절대 변경 금지 영역 (Critical Constraints)

### 1. 웹훅 및 알림 시스템
- **웹훅 URL**: 모든 웹훅 엔드포인트 주소 절대 변경 금지
- **알림 텍스트**: 사용자에게 전송되는 모든 메시지 내용 보존
- **알림 로직**: 언제, 어떤 조건에서 알림을 보내는지 로직 유지
- **메시지 포맷**: JSON 구조, 필드명, 데이터 형식 보존

### 2. 비즈니스 로직
- **모니터링 알고리즘**: 뉴스 수집, 분석, 판단 로직 보존
- **데이터 처리**: 기존 데이터 파싱 및 변환 로직 유지
- **스케줄링**: 실행 주기, 타이밍 로직 보존
- **조건부 실행**: if/else 분기 조건 및 결과 유지

### 3. 사용자 인터페이스
- **출력 메시지**: 콘솔에 표시되는 모든 텍스트 내용 보존
- **로그 메시지**: 사용자가 보는 로그 내용 및 형식 유지
- **에러 메시지**: 오류 발생 시 표시되는 메시지 보존

### 4. 데이터 호환성
- **파일 형식**: JSON, CSV 등 데이터 파일 구조 유지
- **API 응답**: 외부 API 호출 결과 처리 방식 보존
- **캐시 구조**: 기존 캐시 데이터 형식 및 키 구조 유지

## 요구사항

### 1. Python 구문 오류 완전 해결

#### 1.1 구문 오류 식별 및 수정
**요구사항**: 38개 Python 파일의 모든 구문 오류를 수정해야 한다
- 모든 Python 파일이 `python -m py_compile` 테스트를 통과해야 함
- f-string 구문 오류, 괄호 불일치, 들여쓰기 오류 등 모든 구문 문제 해결
- 수정 후 기존 기능 동작 검증 필수

#### 1.2 Import 구문 정리
**요구사항**: 모든 import 구문이 정상 작동해야 한다
- 존재하지 않는 모듈 참조 제거 또는 수정
- 상대 경로 import 문제 해결
- 순환 import 문제 식별 및 해결

#### 1.3 변수명 및 함수명 표준화
**요구사항**: 코드 내부 식별자가 Python 네이밍 규칙을 따라야 한다
- 클래스명: PascalCase (예: WatchHamsterV30Manager)
- 함수명/변수명: snake_case (예: posco_news_250808_data)
- 상수명: UPPER_SNAKE_CASE (예: WATCHHAMSTER_VERSION)

### 2. 모듈 Import 시스템 복구

#### 2.1 모듈 의존성 재정립
**요구사항**: 9개 핵심 모듈이 모두 정상 import되어야 한다
- naming_convention_manager
- file_renaming_system  
- python_naming_standardizer
- shell_batch_script_standardizer
- documentation_standardizer
- config_data_standardizer
- system_output_message_standardizer
- folder_structure_reorganizer
- naming_standardization_verification_system

#### 2.2 모듈 간 참조 관계 정리
**요구사항**: 모듈 간 순환 참조 및 누락된 의존성을 해결해야 한다
- 각 모듈의 의존성 명확히 정의
- 필요한 경우 모듈 구조 재설계
- 공통 유틸리티 모듈 분리

### 3. 파일 참조 무결성 복구

#### 3.1 깨진 파일 참조 수정
**요구사항**: 83개 깨진 파일 참조를 모두 수정해야 한다
- 존재하지 않는 파일 경로 참조 제거 또는 수정
- 상대 경로 참조 정확성 검증
- 와일드카드 패턴 오인식 문제 해결

#### 3.2 경로 참조 표준화
**요구사항**: 모든 파일 경로 참조가 일관된 방식을 사용해야 한다
- 절대 경로 vs 상대 경로 사용 기준 정립
- 플랫폼 독립적 경로 표기법 사용
- 경로 구분자 통일 (/ 사용)

### 4. 파일명 표준화 완료

#### 4.1 레거시 파일명 정리
**요구사항**: 모든 파일명이 표준 네이밍 규칙을 따라야 한다
- `Posco_News_mini.py` → `POSCO_News_250808.py`
- `POSCO_WatchHamster_v3_*` → `WatchHamster_v3.0_*`
- 기타 구버전 표기가 남은 모든 파일명 수정

#### 4.2 파일명 변경에 따른 참조 업데이트
**요구사항**: 파일명 변경 시 모든 참조를 함께 업데이트해야 한다
- import 구문 업데이트
- 설정 파일 내 파일 경로 수정
- 문서 내 파일명 참조 수정

### 5. 시스템 통합성 검증

#### 5.1 전체 시스템 기능 테스트
**요구사항**: 모든 핵심 기능이 정상 작동해야 한다
- 워치햄스터 제어센터 실행 가능
- 포스코 뉴스 모니터링 시스템 실행 가능
- 모든 배치/셸 스크립트 실행 가능

#### 5.2 최종 통합 테스트 통과
**요구사항**: 최종 통합 테스트 성공률이 95% 이상이어야 한다
- Python 스크립트 구문 검증: 100% 통과
- 모듈 Import 테스트: 100% 통과
- 파일 참조 무결성: 95% 이상 통과
- 파일명 표준화: 100% 통과

### 6. 문서화 및 가이드 업데이트

#### 6.1 수정 내역 문서화
**요구사항**: 모든 수정 사항이 명확히 문서화되어야 한다
- 수정된 파일 목록 및 변경 내용
- 해결된 문제점 및 해결 방법
- 새로운 파일 구조 및 네이밍 규칙

#### 6.2 사용자 가이드 업데이트
**요구사항**: 변경된 시스템에 맞춰 사용자 가이드를 업데이트해야 한다
- 새로운 파일명 및 경로 반영
- 실행 방법 및 명령어 업데이트
- 트러블슈팅 가이드 보완

## 성공 기준

### 최소 성공 기준 (Must Have)
- [ ] Python 구문 오류 0개
- [ ] 핵심 모듈 9개 모두 import 성공
- [ ] 주요 시스템 (워치햄스터, 포스코 뉴스) 실행 가능
- [ ] 최종 통합 테스트 80% 이상 통과

### 완전 성공 기준 (Should Have)
- [ ] 최종 통합 테스트 95% 이상 통과
- [ ] 파일 참조 무결성 100% 달성
- [ ] 모든 파일명 표준화 완료
- [ ] 종합 문서화 완료

### 추가 목표 (Nice to Have)
- [ ] 성능 최적화 및 코드 품질 개선
- [ ] 자동화된 테스트 커버리지 확장
- [ ] CI/CD 파이프라인 구축

## 제약사항 및 고려사항

### 기술적 제약사항
- Python 3.8+ 호환성 유지
- 기존 데이터 파일 형식 호환성 보장
- 크로스 플랫폼 (Windows/macOS/Linux) 지원

### 운영 제약사항
- 기존 사용자 워크플로우 최대한 보존
- 다운타임 최소화
- 롤백 가능한 변경 사항만 적용

### 보안 고려사항
- 웹훅 URL 및 API 키 보안 유지
- 로그 파일 내 민감 정보 보호
- 파일 권한 및 접근 제어 유지

## 우선순위

### High Priority (즉시 수행)
1. Python 구문 오류 수정
2. 핵심 모듈 Import 문제 해결
3. 주요 파일명 표준화

### Medium Priority (1주일 내)
4. 파일 참조 무결성 복구
5. 시스템 통합성 검증
6. 기본 문서화

### Low Priority (2주일 내)
7. 성능 최적화
8. 고급 테스트 케이스 추가
9. 종합 가이드 완성

## 검증 방법

### 자동화된 검증
- `python -m py_compile` 모든 Python 파일 검증
- `python3 final_integration_test_system.py` 실행
- `python3 system_functionality_verification.py` 실행

### 수동 검증
- 워치햄스터 제어센터 실행 테스트
- 포스코 뉴스 모니터링 실행 테스트
- 주요 기능 시나리오 테스트

### 성능 검증
- 시스템 리소스 사용량 모니터링
- 응답 시간 측정
- 메모리 누수 검사