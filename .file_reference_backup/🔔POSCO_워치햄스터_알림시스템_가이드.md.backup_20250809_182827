# 🔔 POSCO WatchHamster v3.0 알림 시스템 가이드

## 📖 목차
1. [알림 시스템 개요](#알림-시스템-개요)
2. [기존 알림 시스템 (완전 보존)](#기존-알림-시스템-완전-보존)
3. [새로운 알림 시스템](#새로운-알림-시스템)
4. [알림 설정 및 커스터마이징](#알림-설정-및-커스터마이징)
5. [알림 문제 해결](#알림-문제-해결)

---

## 🎯 알림 시스템 개요

POSCO WatchHamster v3.0은 **기존 알림 시스템을 완전히 보존**하면서 새로운 알림 기능을 추가했습니다.

### 🔄 이중 알림 시스템
```
🔔 POSCO WatchHamster v3.0 알림 시스템
├── 🐹 기존 알림 시스템 (완전 보존)
│   ├── 정기 상태 보고 (2시간 간격)
│   ├── 매시간 상태 체크
│   ├── 스마트 상태 판단 시스템
│   ├── 조용한 시간대 모드
│   └── Git 업데이트 알림
└── 🆕 새로운 알림 시스템 (추가)
    ├── 시스템 시작/종료 알림
    ├── 프로세스 오류/복구 알림
    ├── 긴급 상황 알림
    └── 알림 통계 추적
```

### 📱 알림 전송 채널
- **Dooray 메신저**: 모든 알림의 기본 채널
- **로그 파일**: 모든 알림 내용 기록
- **제어센터**: 실시간 상태 표시

---

## 🐹 기존 알림 시스템 (완전 보존)

### 1. 🕐 정기 상태 보고 (2시간 간격)

#### 발송 시간
- **일반 시간대**: 7시, 9시, 11시, 13시, 15시, 17시
- **조용한 시간대**: 19시, 21시, 23시 (문제 발생 시만)

#### 정상 상태 알림
```
🐹 POSCO WatchHamster 정기 상태 보고

📅 시간: 2025-08-07 14:00:00
🔍 모니터링 프로세스: 🟢 정상 작동
📊 💻 CPU: 15.2% | 🧠 메모리: 45.8% | 💾 디스크: 23.1%
⏰ 다음 보고: 16:00
🚀 자동 복구 기능: 활성화
```

#### 문제 발생 시 알림
```
🚨 POSCO WatchHamster 정기 보고 - 중요 문제 감지

📅 시간: 2025-08-07 14:00:00
🚨 감지된 문제:
   • ❌ 모니터링 프로세스 중단
   • ❌ 시스템 리소스 임계값 초과

🔍 상세 상태:
   • 모니터링: 🔴 중단됨
   • 💻 CPU: 85.2% | 🧠 메모리: 92.8% | 💾 디스크: 95.1%

⏰ 다음 보고: 16:00
🔧 자동 복구 시도 중...
```

### 2. 🕐 매시간 상태 체크

#### 발송 시간
- **매시간 정각** (00분)
- **24시간 연중무휴**

#### 일반 시간대 알림
```
🕐 POSCO WatchHamster 매시간 상태 체크

📅 시간: 2025-08-07 14:00:00
🔍 모니터링: 🟢 정상 작동
📊 시스템 리소스: 정상
🧠 스마트 상태: 활성화
📈 뉴스 수집: 정상 (최근 30분간 15건)
```

#### 조용한 시간대 알림 (간소화)
```
🌙 POSCO WatchHamster 정시 체크 (22시)

🔍 모니터링: 🟢 정상 작동
📊 시스템: 정상
```

### 3. 🧠 스마트 상태 판단 시스템

#### 특징
- **실시간 데이터 분석**: API 응답 시간, 데이터 품질 분석
- **트렌드 기반 예측**: 과거 패턴을 기반으로 이상 징후 감지
- **상황별 맞춤 알림**: 문제 유형에 따른 구체적인 해결 방안 제시

#### 스마트 알림 예시
```
🧠 POSCO WatchHamster 스마트 상태 분석

📅 시간: 2025-08-07 14:00:00
🎯 분석 결과: 주의 필요

📊 상세 분석:
   • API 응답 시간: 평균 2.3초 (정상: 1.5초 이하)
   • 데이터 수집률: 85% (정상: 95% 이상)
   • 시스템 부하: 증가 추세 감지

💡 권장 조치:
   • API 연결 상태 점검 필요
   • 데이터 수집 로직 최적화 검토
   • 시스템 리소스 모니터링 강화

🔍 다음 분석: 15:00
```

### 4. 🌙 조용한 시간대 모드 (18:00~05:59)

#### 특징
- **알림 빈도 감소**: 중요한 문제만 알림
- **간소화된 메시지**: 핵심 정보만 포함
- **긴급 상황 예외**: 시스템 중단 등은 즉시 알림

#### 조용한 시간대 알림
```
🌙 POSCO WatchHamster 정기 보고 (조용한 시간)

📅 시간: 2025-08-07 22:00:00
🔍 모니터링: 🟢 정상 작동
📊 💻 CPU: 12.1% | 🧠 메모리: 38.5% | 💾 디스크: 23.1%
⏰ 다음 보고: 00:00
```

### 5. 🔄 Git 업데이트 알림

#### 업데이트 감지 시
```
🔄 POSCO 모니터 Git 업데이트 완료

📅 시간: 2025-08-07 14:00:00
📝 변경사항: 
   • monitor_WatchHamster.py 업데이트
   • 새로운 알림 기능 추가
   • 버그 수정 3건
🚀 모니터링 재시작 중...
```

#### 업데이트 후 재시작 완료
```
✅ POSCO 모니터 업데이트 후 재시작 완료

📅 시간: 2025-08-07 14:03:00
🔄 최신 코드로 모니터링 재개됨
📊 모든 모듈 정상 작동 확인
```

---

## 🆕 새로운 알림 시스템

### 1. 🚀 시스템 시작 알림

#### WatchHamster 시작 시
```
🐹 POSCO WatchHamster 시스템 시작

📅 시작 시간: 2025-08-07 14:00:00
🛡️ 관리 대상 프로세스: 4개

📊 관리 중인 모듈:
  ✅ posco_main_notifier (메인 뉴스 알림)
  ✅ realtime_news_monitor (실시간 모니터링)
  ✅ integrated_report_scheduler (리포트 스케줄러)
  ✅ historical_data_collector (데이터 수집기)

🔄 모니터링 설정:
  • 헬스체크: 5분 간격
  • 상태 보고: 2시간 간격
  • 자동 복구: 활성화
  • Git 업데이트: 4시간 간격

🚀 전체 시스템이 정상적으로 초기화되었습니다.
```

### 2. 🛑 시스템 종료 알림

```
🛑 POSCO WatchHamster 시스템 종료

📅 종료 시간: 2025-08-07 18:00:00
⏱️ 총 가동 시간: 4시간 30분

⏹️ 종료된 프로세스 (4개):
  ✅ posco_main_notifier
  ✅ realtime_news_monitor
  ✅ integrated_report_scheduler
  ✅ historical_data_collector

📊 운영 통계:
  • 총 재시작 횟수: 2회
  • 알림 전송: 24회

🔒 모든 프로세스가 안전하게 종료되었습니다.
```

### 3. ❌ 프로세스 오류 알림

#### 개별 프로세스 오류
```
❌ POSCO WatchHamster 프로세스 오류

📅 시간: 2025-08-07 14:00:00
🔧 문제 프로세스: posco_main_notifier

❌ 오류 내용: Connection refused (API 서버 연결 실패)
🔄 재시작 시도: 2/3회

🔧 자동 복구 시도 중...
```

#### 최대 재시작 횟수 초과
```
🚨 POSCO WatchHamster 긴급 알림

📅 시간: 2025-08-07 14:15:00
🚨 긴급 상황: posco_main_notifier 복구 실패 - 수동 개입 필요

📋 추가 정보:
  • process_name: posco_main_notifier
  • failure_time: 2025-08-07 14:15:00
  • recovery_attempts: 3

🔧 즉시 수동 확인이 필요합니다.
```

### 4. ✅ 복구 성공 알림

```
✅ POSCO WatchHamster 프로세스 복구 완료

📅 시간: 2025-08-07 14:05:00
🔧 복구된 프로세스: posco_main_notifier

🔄 복구 단계: 2단계 복구
⏱️ 복구 소요 시간: 300초
🆔 새 프로세스 ID: 12350

🚀 프로세스가 정상적으로 복구되어 모니터링을 재개합니다.
```

### 5. 📊 정기 상태 보고 (새로운 형식)

```
📊 POSCO WatchHamster 정기 상태 보고

📅 보고 시간: 2025-08-07 14:00:00
⏱️ 가동 시간: 4시간 30분

🟢 정상 프로세스 (3/4):
  ✅ posco_main_notifier - 정상 (PID: 12345)
  ✅ realtime_news_monitor - 정상 (PID: 12346)
  ✅ integrated_report_scheduler - 정상 (PID: 12347)

🟡 문제 프로세스 (1/4):
  ⚠️ historical_data_collector - 재시작 중 (시도: 1/3)

📈 시스템 성능:
  • CPU 사용률: 25%
  • 메모리 사용률: 45%
  • 디스크 사용률: 23%

🔄 다음 상태 보고: 16:00
```

---

## ⚙️ 알림 설정 및 커스터마이징

### 1. 기본 설정 파일 위치

```
📁 설정 파일 구조:
├── Monitoring/POSCO News/config.py          # 기본 설정
├── Monitoring/POSCO News_v2/modules.json    # 모듈 설정
└── Monitoring/POSCO News/monitor_WatchHamster.py  # 알림 로직
```

### 2. 알림 간격 설정

#### config.py 수정
```python
# 정기 상태 알림 설정
STATUS_NOTIFICATION_START_HOUR = 7      # 시작 시간 (7시)
STATUS_NOTIFICATION_INTERVAL_HOURS = 2  # 간격 (2시간)

# 프로세스 체크 간격
PROCESS_CHECK_INTERVAL = 5 * 60         # 5분 (초 단위)

# Git 체크 간격  
GIT_CHECK_INTERVAL = 60 * 60 * 4        # 4시간 (초 단위)

# 헬스체크 간격
HEALTH_CHECK_INTERVAL = 300             # 5분 (초 단위)
```

#### modules.json 수정
```json
{
  "modules": {
    "posco_main_notifier": {
      "health_check_interval": 300,
      "max_restart_attempts": 3,
      "restart_on_failure": true
    }
  }
}
```

### 3. 웹훅 URL 설정

#### Dooray 웹훅 설정
```python
# config.py
WATCHHAMSTER_WEBHOOK_URL = "https://dooray.com/services/YOUR_WEBHOOK_URL"
BOT_PROFILE_IMAGE_URL = "https://your-domain.com/posco_logo.jpg"
```

#### 웹훅 URL 테스트
```bash
# 테스트 메시지 전송
curl -X POST "YOUR_WEBHOOK_URL" \
     -H "Content-Type: application/json" \
     -d '{
       "botName": "테스트 봇",
       "text": "웹훅 연결 테스트",
       "attachments": [{
         "color": "#28a745",
         "text": "이 메시지가 보이면 웹훅이 정상 작동합니다."
       }]
     }'
```

### 4. 조용한 시간대 설정

#### 시간대 변경
```python
# monitor_WatchHamster.py의 is_quiet_hours 메서드 수정
def is_quiet_hours(self):
    """조용한 시간대 여부 체크"""
    current_hour = datetime.now().hour
    # 기본: 18:00~05:59
    # 변경 예시: 20:00~07:59
    return current_hour >= 20 or current_hour < 8
```

### 5. 알림 메시지 커스터마이징

#### 봇 이름 및 이모지 변경
```python
# 기본 봇 설정
bot_name = "POSCO WatchHamster 🐹🛡️"
bot_name_error = "POSCO WatchHamster ❌"

# 커스터마이징 예시
bot_name = "POSCO 모니터링 🏭"
bot_name_error = "POSCO 알림 🚨"
```

#### 메시지 템플릿 수정
```python
# 정기 보고 메시지 템플릿
status_message = f"""🐹 POSCO WatchHamster 정기 상태 보고

📅 시간: {current_time.strftime('%Y-%m-%d %H:%M:%S')}
🔍 모니터링 프로세스: {monitor_status}
📊 {resource_info}
⏰ 다음 보고: {next_hour:02d}:00
🚀 자동 복구 기능: 활성화"""
```

---

## 🔧 알림 문제 해결

### 1. 알림이 전송되지 않는 경우

#### 문제 진단
```bash
# 1. 웹훅 URL 확인
grep -n "WEBHOOK_URL" Monitoring/POSCO News/config.py

# 2. 네트워크 연결 확인
curl -I https://dooray.com

# 3. WatchHamster 로그 확인
grep -i "notification\|알림" watchhamster.log | tail -10

# 4. 테스트 알림 전송
cd Monitoring/POSCO News
python3 test_watchhamster_notification.py
```

#### 해결 방법
1. **웹훅 URL 재설정**
2. **방화벽 설정 확인**
3. **Dooray 서비스 상태 확인**
4. **WatchHamster 재시작**

### 2. 알림이 너무 많이 오는 경우

#### 알림 빈도 조절
```python
# 정기 알림 간격 증가 (2시간 → 4시간)
STATUS_NOTIFICATION_INTERVAL_HOURS = 4

# 헬스체크 간격 증가 (5분 → 10분)
HEALTH_CHECK_INTERVAL = 600
```

#### 조용한 시간대 확장
```python
# 조용한 시간대 확장 (18:00~05:59 → 17:00~08:59)
def is_quiet_hours(self):
    current_hour = datetime.now().hour
    return current_hour >= 17 or current_hour < 9
```

### 3. 특정 알림만 비활성화

#### 매시간 체크 비활성화
```python
# monitor_WatchHamster.py에서 해당 부분 주석 처리
# if self.should_send_hourly_check():
#     self.execute_scheduled_task("1", f"정시 상태 체크 ({current_time.hour}시)")
#     self.last_hourly_check_hour = current_time.hour
```

#### 특정 모듈 알림 비활성화
```json
// modules.json에서 해당 모듈의 알림 설정 변경
{
  "historical_data_collector": {
    "restart_on_failure": false,
    "health_check_interval": 0
  }
}
```

### 4. 알림 메시지 인코딩 문제

#### 한글 깨짐 현상
```python
# config.py에 인코딩 설정 추가
import sys
import os

# UTF-8 인코딩 강제 설정
os.environ['PYTHONIOENCODING'] = 'utf-8'
sys.stdout.reconfigure(encoding='utf-8')
```

### 5. 알림 통계 및 모니터링

#### 알림 전송 통계 확인
```python
# 새로운 NotificationManager 사용 시
if hasattr(watchhamster, 'notification_manager'):
    stats = watchhamster.notification_manager.get_notification_stats()
    print(f"총 알림 전송: {stats['total_notifications']}회")
    print(f"실패한 알림: {stats['failed_notifications']}회")
    print(f"성공률: {stats['success_rate']}%")
```

#### 알림 로그 분석
```bash
# 알림 전송 성공/실패 통계
grep -c "✅ 알림 전송 성공" watchhamster.log
grep -c "❌ 알림 전송 실패" watchhamster.log

# 시간대별 알림 빈도
grep "알림 전송" watchhamster.log | cut -d' ' -f2 | cut -d':' -f1 | sort | uniq -c
```

---

## 📊 알림 시스템 모니터링

### 1. 알림 상태 대시보드

#### 실시간 상태 확인
```bash
# 제어센터에서 확인
./posco_control_center.sh → 메뉴 4번 (WatchHamster 상태)
```

#### 명령줄에서 확인
```bash
# 최근 알림 전송 현황
tail -20 watchhamster.log | grep -E "(알림|notification)"

# 오늘 전송된 알림 수
grep "$(date +%Y-%m-%d)" watchhamster.log | grep -c "알림 전송"
```

### 2. 알림 품질 관리

#### 알림 응답 시간 모니터링
```bash
# Dooray 응답 시간 확인
grep "알림 전송" watchhamster.log | grep -o "[0-9]*ms"
```

#### 알림 내용 품질 검사
```bash
# 빈 알림 또는 오류 메시지 확인
grep -E "(빈 메시지|empty message)" watchhamster.log
```

### 3. 알림 시스템 성능 최적화

#### 배치 알림 처리
- 여러 알림을 묶어서 전송
- 중복 알림 제거
- 우선순위 기반 알림 큐

#### 알림 캐싱
- 동일한 알림 반복 전송 방지
- 최근 전송 이력 관리
- 스팸 방지 로직

---

## 🎯 알림 시스템 활용 팁

### 1. 효과적인 알림 관리
- **중요도별 분류**: 긴급/일반/정보성 알림 구분
- **시간대별 조절**: 업무 시간과 조용한 시간 구분
- **빈도 최적화**: 너무 많거나 적지 않은 적절한 빈도

### 2. 알림 내용 최적화
- **핵심 정보 우선**: 가장 중요한 정보를 먼저 표시
- **액션 가능한 정보**: 구체적인 해결 방안 제시
- **시각적 구분**: 이모지와 색상을 활용한 직관적 표현

### 3. 알림 히스토리 관리
- **로그 보관**: 모든 알림 내용을 로그로 보관
- **통계 분석**: 알림 패턴 분석을 통한 시스템 개선
- **트렌드 파악**: 문제 발생 패턴 및 해결 효과 측정

---

*🔔 이 알림 시스템 가이드는 POSCO WatchHamster v3.0 (2025-08-07) 기준으로 작성되었습니다.*