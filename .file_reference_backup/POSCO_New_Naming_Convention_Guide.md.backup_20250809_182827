# 📝 POSCO 새로운 네이밍 컨벤션 사용 가이드

## 📋 개요

이 문서는 POSCO 프로젝트의 새로운 표준화된 네이밍 컨벤션 사용법을 설명합니다. 모든 새로운 파일, 폴더, 코드 작성 시 이 가이드를 따라주세요.

## 🎯 네이밍 컨벤션 원칙

### 핵심 원칙
1. **일관성**: 모든 관련 요소에 동일한 버전 표기 사용
2. **명확성**: 파일명만으로 용도와 버전을 알 수 있도록 작성
3. **표준화**: 정해진 패턴을 엄격히 준수
4. **확장성**: 향후 버전 업그레이드를 고려한 구조

### 버전 체계
- **WatchHamster**: `v3.0` (메이저.마이너 형식)
- **POSCO News**: `250808` (YYMMDD 날짜 형식)

## 📁 파일명 네이밍 규칙

### WatchHamster 관련 파일

#### Python 스크립트
```bash
# 패턴: [기능]_watchhamster_v3.0_[세부기능].py
demo_watchhamster_v3.0_integration.py
test_watchhamster_v3.0_integration.py
monitor_WatchHamster_v3.0.py
config_watchhamster_v3.0_settings.py
```

#### 배치/셸 스크립트
```bash
# 패턴: [이모지]WatchHamster_v3.0_[기능].[확장자]
🐹WatchHamster_v3.0_Control_Center.bat
🎛️WatchHamster_v3.0_Control_Panel.bat
🎛️WatchHamster_v3.0_Control_Panel.command
watchhamster_v3.0_control_center.sh
watchhamster_v3.0_master_control.sh
```

#### 설정 및 데이터 파일
```bash
# 패턴: watchhamster_v3.0_[용도].[확장자]
watchhamster_v3.0_config.json
watchhamster_v3.0_modules.json
watchhamster_v3.0_status.json
WatchHamster_v3.0.log
```

#### 문서 파일
```bash
# 패턴: [이모지]WatchHamster_v3.0_[문서타입].md
📋WatchHamster_v3.0_User_Guide.md
🔧WatchHamster_v3.0_Developer_Guide.md
🔍WatchHamster_v3.0_System_Report.md
📊WatchHamster_v3.0_Performance_Report.md
```

### POSCO News 관련 파일

#### Python 스크립트
```bash
# 패턴: posco_news_250808_[기능].py
posco_news_250808_notifier.py
posco_news_250808_monitor.py
posco_news_250808_collector.py
POSCO_News_250808.py  # 메인 스크립트
```

#### 데이터 파일
```bash
# 패턴: posco_news_250808_[데이터타입].[확장자]
posco_news_250808_data.json
posco_news_250808_cache.json
posco_news_250808_historical.json
posco_news_250808_config.json
```

#### 배치/셸 스크립트
```bash
# 패턴: [이모지]POSCO_News_250808_[기능].[확장자]
🚀🚀POSCO_News_250808_Start.bat
🛑🛑POSCO_News_250808_Stop.bat
posco_news_250808_control_center.sh
```

#### 문서 파일
```bash
# 패턴: [이모지]POSCO_News_250808_[문서타입].md
📋POSCO_News_250808_User_Guide.md
📊POSCO_News_250808_System_Report.md
🔧POSCO_News_250808_Technical_Guide.md
```

## 📂 폴더명 네이밍 규칙

### WatchHamster 관련 폴더
```bash
# 패턴: WatchHamster_v3.0_[용도]
Monitoring/WatchHamster_v3.0/
.kiro/specs/watchhamster-v3.0-integration/
docs/WatchHamster_v3.0_Documentation/
backup/WatchHamster_v3.0_Backup/
```

### POSCO News 관련 폴더
```bash
# 패턴: POSCO_News_250808_[용도]
Monitoring/POSCO_News_250808/
reports/POSCO_News_250808_Reports/
data/POSCO_News_250808_Data/
logs/POSCO_News_250808_Logs/
```

## 💻 코드 내부 네이밍 규칙

### Python 클래스명

#### WatchHamster 관련 클래스
```python
# 패턴: WatchHamsterV30[기능명]
class WatchHamsterV30Monitor:
    """WatchHamster v3.0 모니터링 클래스"""
    pass

class WatchHamsterV30ProcessManager:
    """WatchHamster v3.0 프로세스 관리 클래스"""
    pass

class WatchHamsterV30NotificationManager:
    """WatchHamster v3.0 알림 관리 클래스"""
    pass

class WatchHamsterV30ConfigManager:
    """WatchHamster v3.0 설정 관리 클래스"""
    pass
```

#### POSCO News 관련 클래스
```python
# 패턴: PoscoNews250808[기능명]
class PoscoNews250808Monitor:
    """POSCO News 250808 모니터링 클래스"""
    pass

class PoscoNews250808Notifier:
    """POSCO News 250808 알림 클래스"""
    pass

class PoscoNews250808DataCollector:
    """POSCO News 250808 데이터 수집 클래스"""
    pass

class PoscoNews250808ReportGenerator:
    """POSCO News 250808 보고서 생성 클래스"""
    pass
```

### 변수명 및 상수

#### WatchHamster 관련 변수
```python
# 상수 (대문자 + 언더스코어)
WATCHHAMSTER_V3_0_VERSION = "v3.0"
WATCHHAMSTER_V3_0_CONFIG_PATH = "./watchhamster_v3.0_config.json"
WATCHHAMSTER_V3_0_LOG_FILE = "WatchHamster_v3.0.log"
WATCHHAMSTER_V3_0_DEFAULT_TIMEOUT = 30

# 변수 (소문자 + 언더스코어)
watchhamster_v3_0_instance = None
watchhamster_v3_0_config = {}
watchhamster_v3_0_status = "stopped"
watchhamster_v3_0_last_update = None
```

#### POSCO News 관련 변수
```python
# 상수
POSCO_NEWS_250808_VERSION = "250808"
POSCO_NEWS_250808_DATA_PATH = "./posco_news_250808_data.json"
POSCO_NEWS_250808_CACHE_SIZE = 1000
POSCO_NEWS_250808_UPDATE_INTERVAL = 300

# 변수
posco_news_250808_data = {}
posco_news_250808_cache = {}
posco_news_250808_last_fetch = None
posco_news_250808_error_count = 0
```

### 함수명

#### WatchHamster 관련 함수
```python
# 패턴: [동작]_watchhamster_v3_0_[대상]
def initialize_watchhamster_v3_0():
    """WatchHamster v3.0 초기화"""
    pass

def start_watchhamster_v3_0_monitor():
    """WatchHamster v3.0 모니터링 시작"""
    pass

def stop_watchhamster_v3_0_processes():
    """WatchHamster v3.0 프로세스 중지"""
    pass

def get_watchhamster_v3_0_status():
    """WatchHamster v3.0 상태 조회"""
    pass

def update_watchhamster_v3_0_config(config):
    """WatchHamster v3.0 설정 업데이트"""
    pass
```

#### POSCO News 관련 함수
```python
# 패턴: [동작]_posco_news_250808_[대상]
def fetch_posco_news_250808_data():
    """POSCO News 250808 데이터 수집"""
    pass

def process_posco_news_250808_notifications():
    """POSCO News 250808 알림 처리"""
    pass

def save_posco_news_250808_cache():
    """POSCO News 250808 캐시 저장"""
    pass

def generate_posco_news_250808_report():
    """POSCO News 250808 보고서 생성"""
    pass
```

## 📝 주석 및 문서 네이밍 규칙

### 파일 헤더 주석

#### WatchHamster 관련 파일
```python
"""
POSCO WatchHamster v3.0 Integration System
워치햄스터 v3.0 통합 시스템

Description: WatchHamster v3.0 메인 모니터링 시스템
Version: v3.0
Author: POSCO Development Team
Created: 2025-08-08
Last Modified: 2025-08-08

Dependencies:
- Python 3.8+
- requests
- psutil

Usage:
    python3 monitor_WatchHamster_v3.0.py
"""
```

#### POSCO News 관련 파일
```python
"""
POSCO News 250808 Notification System
포스코 뉴스 250808 알림 시스템

Description: POSCO News 250808 실시간 뉴스 모니터링 및 알림
Version: 250808
Author: POSCO Development Team
Created: 2025-08-08
Last Modified: 2025-08-08

Features:
- 실시간 뉴스 모니터링
- 자동 알림 발송
- 데이터 캐싱
- 보고서 생성

Usage:
    python3 posco_news_250808_notifier.py
"""
```

### 마크다운 문서 제목

#### WatchHamster 관련 문서
```markdown
# POSCO WatchHamster v3.0 사용자 가이드

## WatchHamster v3.0 시스템 개요

### WatchHamster v3.0 주요 기능

#### WatchHamster v3.0 설치 방법
```

#### POSCO News 관련 문서
```markdown
# POSCO News 250808 시스템 가이드

## POSCO News 250808 개요

### POSCO News 250808 설정 방법

#### POSCO News 250808 문제 해결
```

## 🔧 설정 파일 네이밍 규칙

### JSON 설정 파일 구조

#### WatchHamster v3.0 설정
```json
{
  "system_info": {
    "name": "WatchHamster v3.0",
    "version": "v3.0",
    "description": "POSCO WatchHamster v3.0 Integration System"
  },
  "watchhamster_v3_0_config": {
    "monitor_interval": 30,
    "max_retries": 3,
    "log_level": "INFO"
  },
  "watchhamster_v3_0_modules": [
    {
      "name": "ProcessManager",
      "class": "WatchHamsterV30ProcessManager",
      "enabled": true
    }
  ]
}
```

#### POSCO News 250808 설정
```json
{
  "system_info": {
    "name": "POSCO News 250808",
    "version": "250808",
    "description": "POSCO News 250808 Notification System"
  },
  "posco_news_250808_config": {
    "fetch_interval": 300,
    "cache_size": 1000,
    "notification_enabled": true
  },
  "posco_news_250808_sources": [
    {
      "name": "MainNews",
      "url": "https://example.com/api/news",
      "enabled": true
    }
  ]
}
```

## 🚀 실제 사용 예시

### 새로운 WatchHamster 기능 추가

#### 1. 파일 생성
```bash
# Python 스크립트
touch feature_watchhamster_v3.0_analytics.py

# 설정 파일
touch watchhamster_v3.0_analytics_config.json

# 문서
touch 📊WatchHamster_v3.0_Analytics_Guide.md
```

#### 2. 클래스 정의
```python
# feature_watchhamster_v3.0_analytics.py
class WatchHamsterV30Analytics:
    """WatchHamster v3.0 분석 기능 클래스"""
    
    def __init__(self):
        self.watchhamster_v3_0_data = {}
        self.WATCHHAMSTER_V3_0_ANALYTICS_VERSION = "v3.0"
    
    def analyze_watchhamster_v3_0_performance(self):
        """WatchHamster v3.0 성능 분석"""
        pass
    
    def generate_watchhamster_v3_0_report(self):
        """WatchHamster v3.0 분석 보고서 생성"""
        pass
```

### 새로운 POSCO News 기능 추가

#### 1. 파일 생성
```bash
# Python 스크립트
touch posco_news_250808_sentiment_analyzer.py

# 데이터 파일
touch posco_news_250808_sentiment_data.json

# 문서
touch 📈POSCO_News_250808_Sentiment_Guide.md
```

#### 2. 클래스 정의
```python
# posco_news_250808_sentiment_analyzer.py
class PoscoNews250808SentimentAnalyzer:
    """POSCO News 250808 감정 분석 클래스"""
    
    def __init__(self):
        self.posco_news_250808_sentiment_data = {}
        self.POSCO_NEWS_250808_SENTIMENT_VERSION = "250808"
    
    def analyze_posco_news_250808_sentiment(self, text):
        """POSCO News 250808 감정 분석"""
        pass
    
    def save_posco_news_250808_sentiment_result(self, result):
        """POSCO News 250808 감정 분석 결과 저장"""
        pass
```

## 📋 네이밍 체크리스트

### 파일 생성 시 체크리스트
- [ ] 파일명에 올바른 버전 정보 포함 (v3.0 또는 250808)
- [ ] 컴포넌트 타입에 맞는 패턴 사용
- [ ] 파일 용도가 명확히 드러나는 이름
- [ ] 특수 문자 사용 시 일관성 유지
- [ ] 확장자 적절히 사용

### 코드 작성 시 체크리스트
- [ ] 클래스명에 버전 정보 포함
- [ ] 변수명과 상수명 패턴 준수
- [ ] 함수명에 컴포넌트 정보 포함
- [ ] 주석에 정확한 버전 정보 기재
- [ ] 문서 제목 표준 형식 사용

### 설정 파일 작성 시 체크리스트
- [ ] JSON 구조에 system_info 섹션 포함
- [ ] 버전 정보 정확히 기재
- [ ] 설정 키 이름에 컴포넌트 정보 포함
- [ ] 설명 필드에 명확한 정보 제공

## 🔄 기존 코드 업데이트 가이드

### 기존 파일 업데이트 시
```bash
# 1. 파일명 변경
mv old_file.py new_watchhamster_v3.0_file.py

# 2. 내부 코드 업데이트
sed -i 's/OldClassName/WatchHamsterV30NewClassName/g' new_watchhamster_v3.0_file.py

# 3. 주석 업데이트
# 파일 헤더 주석을 새로운 형식으로 변경

# 4. 설정 파일 업데이트
# JSON 파일의 버전 정보 업데이트
```

### Import 구문 업데이트
```python
# 기존
from old_module import OldClass

# 새로운
from feature_watchhamster_v3.0_module import WatchHamsterV30NewClass
```

## 📞 지원 및 문의

### 네이밍 검증 도구
```bash
# 파일명 검증
python3 naming_convention_manager.py --validate-filename "your_file.py"

# 클래스명 검증
python3 naming_convention_manager.py --validate-classname "YourClassName"

# 전체 프로젝트 네이밍 검증
python3 naming_standardization_verification_system.py
```

### 자동 네이밍 제안
```bash
# 파일명 제안
python3 naming_convention_manager.py --suggest-filename "my_feature.py" --component watchhamster

# 클래스명 제안
python3 naming_convention_manager.py --suggest-classname "MyClass" --component posco_news
```

---

## 📚 참고 자료

- [POSCO 네이밍 컨벤션 마이그레이션 가이드](POSCO_Naming_Convention_Migration_Guide.md)
- [POSCO 네이밍 컨벤션 시스템 가이드](NAMING_CONVENTION_SYSTEM_GUIDE.md)
- [POSCO 파일 리네이밍 시스템 가이드](FILE_RENAMING_SYSTEM_GUIDE.md)

---

**📝 이 가이드를 따라 일관된 네이밍 컨벤션을 유지하면, 프로젝트의 가독성과 유지보수성이 크게 향상됩니다. 새로운 파일이나 코드 작성 시 반드시 이 가이드를 참조해 주세요.**