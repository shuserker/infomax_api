#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Posco Continuous Monitor
POSCO 모니터링 시스템

WatchHamster v3.0 및 POSCO News 250808 호환
Created: 2025-08-08
"""

import posco_news_250808_monitor.log
import system_functionality_verification.py
import .comprehensive_repair_backup/realtime_news_monitor.py.backup_20250809_181657
# BROKEN_REF: import subprocess
# BROKEN_REF: from datetime import datetime
# BROKEN_REF: import signal

class POSCO News 250808ContinuousMonitor:
    def __init__(self):
        self.running = True
        self.interval = 30 * 60  # 30분 (초 단위)
        self.script_path = "Monitoring/POSCO_News_250808/reports/integrated_report_generator.py"
        
        # 신호 핸들러 등록 (Ctrl+C로 종료)
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
    
    def signal_handler(self, signum, frame):
        """종료 신호 처리"""
        print(f"\n🛑 종료 신호 수신 (신호: {signum})")
        print("📋 POSCO 지속적 모니터링을 종료합니다...")
        self.running = False
    
    def log_message(self, message):
        """로그 메시지 출력"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"[{timestamp}] {message}")
    
    def run_report_generator(self):
        """리포트 생성기 실행"""
        try:
            self.log_message("🚀 POSCO 리포트 생성기 실행 중...")
            
            # 스크립트 실행
            result = subprocess.run([
                sys.executable, self.script_path
],_capture_output = True, text=True, cwd=".")
            
            if result.returncode == 0:
                self.log_message("✅ 리포트 생성 완료")
                if result.stdout:
                    # 마지막 몇 줄만 출력
                    lines = result.stdout.strip().split('\n')
                    for line in lines[-3:]:
                        if line.strip():
                            self.log_message(f"   {line}")
            else:
                self.log_message("❌ 리포트 생성 실패")
                if result.stderr:
                    self.log_message(f"   오류: {result.stderr[:200]}...")
                    
        except Exception as e:
            self.log_message(f"❌ 실행 오류: {str(e)}")
    
    def run(self):
        """메인 모니터링 루프"""
        self.log_message("🏭 POSCO 지속적 모니터링 시작")
        self.log_message(f"⏰ 실행 주기: {self.interval // 60}분")
        self.log_message("🛑 종료하려면 Ctrl+C를 누르세요")
        print("=" * 60)
        
        # 첫 번째 실행
        self.run_report_generator()
        
        # 주기적 실행
        while self.running:
            try:
                self.log_message(f"⏳ {self.interval // 60}분 대기 중... (Ctrl+C로 종료)")
                
                # 인터럽트 가능한 대기
                for i in range(self.interval):
                    if not self.running:
                        break
                    time.sleep(1)
                
                if self.running:
                    self.run_report_generator()
                    
            except KeyboardInterrupt:
                self.signal_handler(signal.SIGINT, None)
                break
        
        self.log_message("📋 POSCO 지속적 모니터링이 종료되었습니다.")

def main():
    """메인 함수"""
    print("🏭 POSCO 지속적 모니터링 시스템")
    print("=" * 60)
    
    # 필수 파일 확인
    script_path = "Monitoring/POSCO_News_250808/reports/integrated_report_generator.py"
    if not os.path.exists(script_path):
        print(f"❌ 오류: {script_path} 파일을 찾을 수 없습니다.")
        print("📍 현재 경로에서 실행해주세요.")
        return 1
    
    # 모니터 시작
    monitor = PoscoContinuousMonitor()
    monitor.run()
    
    return 0

if __name__ == "__main__":
    sys.exit(main())