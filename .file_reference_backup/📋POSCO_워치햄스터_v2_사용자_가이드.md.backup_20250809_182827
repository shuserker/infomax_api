# 🐹 POSCO WatchHamster v3.0 사용자 가이드

## 📖 목차
1. [개요](#개요)
2. [새로운 제어센터 사용법](#새로운-제어센터-사용법)
3. [WatchHamster 상태 확인](#WatchHamster-상태-확인)
4. [문제 해결 가이드](#문제-해결-가이드)
5. [알림 시스템 이해](#알림-시스템-이해)

---

## 🎯 개요

POSCO WatchHamster v3.0은 기존의 모든 기능을 보존하면서 새로운 아키텍처를 도입하여 더욱 안정적이고 지능적인 모니터링 시스템으로 발전했습니다.

### 🆕 주요 개선사항
- **🛡️ 3단계 지능적 자동 복구**: 즉시 재시작 → 5분 후 재시도 → 최종 재시도 → 비활성화
- **📊 향상된 프로세스 관리**: 개별 모듈 상태 추적 및 제어
- **🎛️ WatchHamster 중심 제어센터**: 직관적인 관리 인터페이스
- **🔔 기존 알림 시스템 완전 보존**: 모든 기존 알림 기능 유지
- **🔄 폴백 메커니즘**: 새로운 기능 실패 시 기존 방식으로 안전하게 동작

### 🏗️ 시스템 구조
```
🐹 WatchHamster v3.0
├── 🛡️ 메인 WatchHamster (monitor_WatchHamster.py)
│   ├── 📊 Enhanced ProcessManager (새로운 프로세스 관리)
│   ├── 📋 ModuleRegistry (모듈 설정 관리)
│   ├── 🔔 NotificationManager (향상된 알림)
│   └── 🔄 기존 알림 시스템 (완전 보존)
├── 📱 관리 대상 모듈들
│   ├── posco_main_notifier.py
│   ├── realtime_news_monitor.py
│   ├── integrated_report_scheduler.py
│   └── historical_data_collector.py
└── 🎛️ WatchHamster 제어센터 (watchhamster_control_center.sh)
```

---

## 🎛️ 새로운 제어센터 사용법

### 1. 제어센터 실행
```bash
# Mac/Linux
./watchhamster_control_center.sh

# Windows (Git Bash 또는 WSL)
bash watchhamster_control_center.sh
```

### 2. 메뉴 구조

#### 🐹 WatchHamster 관리 (최상위)
```
1. 🚀 WatchHamster 시작     - 전체 모니터링 시스템 시작
2. 🛑 WatchHamster 중지     - 전체 모니터링 시스템 중지  
3. 🔄 WatchHamster 재시작   - 전체 모니터링 시스템 재시작
4. 📊 WatchHamster 상태     - 전체 시스템 상태 확인
5. 🔧 모듈 관리          - 개별 모듈 상태 및 제어
```

#### 📰 뉴스 관리
```
A. 📋 뉴스 로그 확인     - 최신 뉴스 로그 확인
B. 📈 뉴스 통계 보기    - 뉴스 수집 통계 확인
C. 🔍 뉴스 검색         - 특정 키워드 뉴스 검색
```

#### ⚙️ 고급 옵션
```
D. 🔧 시스템 진단       - POSCO 시스템 상태 진단
E. 🧪 시스템 테스트     - 모니터링 시스템 테스트
F. 📦 데이터 백업       - 뉴스 데이터 백업
```

### 3. WatchHamster 시작 과정

#### 단계별 진행
1. **환경 체크**: Python3 설치 및 스크립트 파일 확인
2. **프로세스 정리**: 기존 실행 중인 프로세스 안전 종료
3. **WatchHamster 시작**: 백그라운드에서 WatchHamster 실행
4. **시스템 초기화**: 10초 대기 후 하위 모듈들 자동 시작
5. **상태 확인**: 전체 시스템 상태 점검 및 보고

#### 시작 성공 시 표시되는 정보
```
🎉 POSCO WatchHamster가 성공적으로 시작되었습니다! (PID: 12345)

🛡️ WatchHamster 기능:
  • 📊 모든 하위 모듈 자동 관리
  • 🔄 프로세스 자동 복구 (3단계 지능적 복구)
  • 📱 실시간 상태 알림 (2시간 간격)
  • 🔍 헬스체크 모니터링 (5분 간격)
  • 🔄 Git 자동 업데이트 (4시간 간격)

🎯 2/3 모듈이 활성화되었습니다.
  ✅ posco_main_notifier.py - 실행 중
  ✅ realtime_news_monitor.py - 실행 중
  ⏳ integrated_report_scheduler.py - 시작 중...
```

---

## 📊 WatchHamster 상태 확인

### 1. 전체 상태 보기 (메뉴 4번)

#### WatchHamster 프로세스 정보
```
🐹 WatchHamster가 실행 중입니다.
  • PID: 12345
  • 실행시간: 2:30:45
  • CPU 사용률: 1.2%
  • 메모리 사용률: 0.8%
```

#### 관리 중인 모듈 상태
```
📊 관리 중인 모듈 상태

  ✅ 메인 알림 시스템
     PID: 12346, 실행시간: 2:30:40

  ✅ 실시간 뉴스 모니터  
     PID: 12347, 실행시간: 2:30:35

  ✅ 통합 리포트 스케줄러
     PID: 12348, 실행시간: 2:30:30

  ❌ 히스토리 데이터 수집기 (중지됨)

🎯 모든 모듈이 정상 작동 중입니다. (3/4)
```

#### 시스템 리소스 정보
```
📊 시스템 리소스
💻 CPU: 15.2% | 🧠 메모리: 45.8% | 💾 디스크: 23.1%
```

### 2. 개별 모듈 관리 (메뉴 5번)

#### 모듈 제어 옵션
```
🔧 모듈 제어 옵션:
1. 메인 알림 시스템 재시작
2. 실시간 뉴스 모니터 재시작  
3. 통합 리포트 스케줄러 재시작
4. 히스토리 데이터 수집기 재시작
R. 🔄 모든 모듈 재시작
S. 📊 상세 상태 보기
L. 📋 로그 보기
```

#### 개별 모듈 재시작 과정
```
🔄 메인 알림 시스템 재시작 중...

⏹️ 기존 프로세스 종료 중... (PID: 12346)
⏳ WatchHamster의 자동 복구 대기 중... (10초)
✅ 메인 알림 시스템이 성공적으로 재시작되었습니다. (PID: 12350)
```

---

## 🔧 문제 해결 가이드

### 1. 일반적인 문제들

#### ❌ Python3가 설치되지 않았습니다
**해결방법:**
```bash
# Mac (Homebrew)
brew install python3

# Ubuntu/Debian
sudo apt update && sudo apt install python3

# CentOS/RHEL
sudo yum install python3
```

#### ❌ WatchHamster 스크립트를 찾을 수 없습니다
**해결방법:**
1. 올바른 디렉토리에서 제어센터를 실행했는지 확인
2. `Monitoring/POSCO News/monitor_WatchHamster.py` 파일 존재 확인
3. 파일 권한 확인: `chmod +x Monitoring/POSCO News/monitor_WatchHamster.py`

#### ❌ WatchHamster 시작 실패
**해결방법:**
1. **로그 확인**: `tail -f watchhamster.log`
2. **포트 충돌 확인**: 다른 프로세스가 같은 포트 사용 중인지 확인
3. **의존성 확인**: 필요한 Python 패키지 설치 확인
4. **수동 재시작**: 제어센터에서 재시작 시도

### 2. 모듈별 문제 해결

#### 🔄 모듈이 자동으로 재시작되지 않음
**원인 분석:**
- 최대 재시작 횟수(3회) 초과
- 스크립트 파일 오류
- 의존성 문제

**해결방법:**
1. **로그 확인**: 제어센터 → 모듈 관리 → 로그 보기
2. **수동 재시작**: 개별 모듈 재시작 시도
3. **전체 재시작**: WatchHamster 전체 재시작

#### 📱 알림이 오지 않음
**확인사항:**
1. **웹훅 URL**: Dooray 웹훅 URL이 올바른지 확인
2. **네트워크**: 인터넷 연결 상태 확인
3. **WatchHamster 상태**: WatchHamster가 정상 실행 중인지 확인

### 3. 3단계 자동 복구 과정

#### 복구 단계별 진행
```
🔧 프로세스 자동 복구 시작

1단계: 즉시 재시작 시도
  ⏳ 재시작 중... 
  ✅ 성공 / ❌ 실패 → 2단계 진행

2단계: 5분 후 재시도  
  ⏳ 5분 대기 중...
  ⏳ 재시작 중...
  ✅ 성공 / ❌ 실패 → 3단계 진행

3단계: 최종 재시도
  ⏳ 5분 대기 중...
  ⏳ 최종 재시작 시도...
  ✅ 성공 / ❌ 실패 → 프로세스 비활성화

🚨 모든 복구 시도 실패 시:
  - 프로세스 비활성화
  - 긴급 알림 전송
  - 수동 개입 필요 안내
```

### 4. 로그 파일 위치

#### 주요 로그 파일들
```
📁 로그 파일 위치:
├── watchhamster.log          # WatchHamster 메인 로그
├── WatchHamster.log          # 기존 WatchHamster 로그  
├── posco_monitor.log         # 메인 알림 시스템 로그
├── realtime_monitor.log      # 실시간 모니터 로그
└── integrated_report.log     # 통합 리포트 로그
```

#### 로그 확인 명령어
```bash
# 실시간 로그 확인
tail -f watchhamster.log

# 최근 로그 확인 (50줄)
tail -50 watchhamster.log

# 오류 로그만 확인
grep -i error watchhamster.log

# 특정 시간대 로그 확인
grep "2025-08-07 14:" watchhamster.log
```

---

## 🔔 알림 시스템 이해

### 1. 기존 알림 시스템 (완전 보존)

#### 🐹 정기 상태 보고 (2시간 간격)
```
🐹 POSCO WatchHamster 정기 상태 보고

📅 시간: 2025-08-07 14:00:00
🔍 모니터링 프로세스: 🟢 정상 작동
📊 💻 CPU: 15.2% | 🧠 메모리: 45.8% | 💾 디스크: 23.1%
⏰ 다음 보고: 16:00
🚀 자동 복구 기능: 활성화
```

#### 🕐 매시간 상태 체크
```
🕐 POSCO WatchHamster 매시간 상태 체크

📅 시간: 2025-08-07 14:00:00
🔍 모니터링: 🟢 정상 작동
📊 시스템 리소스: 정상
🧠 스마트 상태: 활성화
```

#### 🚨 중요 문제 감지 알림
```
🚨 POSCO WatchHamster 정기 보고 - 중요 문제 감지

📅 시간: 2025-08-07 14:00:00
🚨 감지된 문제:
   • ❌ 모니터링 프로세스 중단
   • ❌ 시스템 리소스 임계값 초과

🔍 상세 상태:
   • 모니터링: 🔴 중단됨
   • 💻 CPU: 85.2% | 🧠 메모리: 92.8% | 💾 디스크: 95.1%

⏰ 다음 보고: 16:00
🔧 자동 복구 시도 중...
```

### 2. 새로운 알림 시스템

#### 🚀 시스템 시작 알림
```
🐹 POSCO WatchHamster 시스템 시작

📅 시작 시간: 2025-08-07 14:00:00
🛡️ 관리 대상 프로세스: 4개

📊 관리 중인 모듈:
  ✅ posco_main_notifier (메인 뉴스 알림)
  ✅ realtime_news_monitor (실시간 모니터링)
  ✅ integrated_report_scheduler (리포트 스케줄러)
  ✅ historical_data_collector (데이터 수집기)

🔄 모니터링 설정:
  • 헬스체크: 5분 간격
  • 상태 보고: 2시간 간격
  • 자동 복구: 활성화
  • Git 업데이트: 60분 간격

🚀 전체 시스템이 정상적으로 초기화되었습니다.
```

#### ❌ 프로세스 오류 알림
```
❌ POSCO WatchHamster 프로세스 오류

📅 시간: 2025-08-07 14:00:00
🔧 문제 프로세스: posco_main_notifier

❌ 오류 내용: Connection refused
🔄 재시작 시도: 2/3회

🔧 자동 복구 시도 중...
```

#### ✅ 복구 성공 알림
```
✅ POSCO WatchHamster 프로세스 복구 완료

📅 시간: 2025-08-07 14:05:00
🔧 복구된 프로세스: posco_main_notifier

🔄 복구 단계: 2단계 복구
⏱️ 복구 소요 시간: 300초
🆔 새 프로세스 ID: 12350

🚀 프로세스가 정상적으로 복구되어 모니터링을 재개합니다.
```

### 3. 🌙 조용한 시간대 모드 (18:00~05:59)

조용한 시간대에는 중요한 문제가 있을 때만 알림을 전송합니다:

```
🌙 POSCO WatchHamster 정기 보고 (조용한 시간)

📅 시간: 2025-08-07 22:00:00
🔍 모니터링: 🟢 정상 작동
📊 💻 CPU: 12.1% | 🧠 메모리: 38.5% | 💾 디스크: 23.1%
⏰ 다음 보고: 00:00
```

### 4. 🧠 스마트 상태 판단 시스템

스마트 시스템이 활성화된 경우 더 지능적인 알림을 제공합니다:
- 📊 실시간 데이터 분석
- 🎯 상황별 맞춤 알림
- 📈 트렌드 기반 예측
- 🔍 이상 패턴 감지

---

## 🎯 마무리

POSCO WatchHamster v3.0은 기존의 모든 기능을 보존하면서 더욱 강력하고 지능적인 모니터링 시스템으로 발전했습니다. 

### 📞 지원 및 문의
- 문제 발생 시 로그 파일을 확인하여 원인을 파악하세요
- 자동 복구가 실패한 경우 제어센터를 통해 수동 재시작을 시도하세요
- 지속적인 문제가 발생하면 시스템 관리자에게 문의하세요

### 🔄 정기 점검 권장사항
- **일일**: WatchHamster 상태 확인 (제어센터 메뉴 4번)
- **주간**: 로그 파일 크기 및 시스템 리소스 확인
- **월간**: 전체 시스템 재시작 및 업데이트 확인

---

*📝 이 가이드는 POSCO WatchHamster v3.0 (2025-08-07) 기준으로 작성되었습니다.*