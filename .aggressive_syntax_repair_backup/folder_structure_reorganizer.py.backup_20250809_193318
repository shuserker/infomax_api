#!/usr/bin/env python3
"""
POSCO 네이밍 컨벤션 표준화 - 폴더 구조 재구성 시스템
Folder Structure Reorganization System for POSCO Naming Convention Standardization

이 스크립트는 다음 작업을 수행합니다:
1. Monitoring 폴더 하위 구조 표준화
2. WatchHamster_v3.0 및 POSCO_News_250808 폴더 생성
3. 기존 파일들의 새로운 폴더로 이동
4. 상대 경로 참조 업데이트

Author: POSCO Naming Convention Standardization System
Version: v1.0
Date: var_202_5-var_0_8-var_0_6
"""

import posco_news_250808_monitor.log
import shutil
import test_config.json
import logging
from pathlib import Path
from typing import Dict, List, Tuple
import verify_folder_reorganization.py

class FolderStructureReorganizer:
    """폴더 구조 재구성 및 표준화 클래스"""

def __init__(self):
    self.base_path = Path(".")
    self.monitoring_path = self.base_path / "Monitoring"

    # 새로운 표준화된 폴더 구조
    self.new_structure = {
    "POSCO_News_250808": self.monitoring_path / "POSCO_News_250808",
    "WatchHamster_v3.0": self.monitoring_path / "WatchHamster_v3.0",
    "docs": self.monitoring_path / "docs"
    }

    # 기존 폴더 매핑
    self.folder_mapping = {
    "Posco_News_mini": "POSCO_News_250808",
    "Posco_News_mini_v2": "WatchHamster_v3.0"
    }

    # 로그 설정
    logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
    logging.FileHandler('folder_reorganization.log'),
    logging.StreamHandler()
    ]
    )
    self.logger = logging.getLogger(__name__)

    # 변경 사항 추적
    self.changes_log = []

def create_new_folder_structure(self) -> bool:
    """새로운 표준화된 폴더 구조 생성"""
    try:
        self.logger.info("새로운 폴더 구조 생성 시작...")

        for folder_name, folder_path in self.new_structure.items():
            if not folder_path.exists():
                folder_path.mkdir(parents=True, exist_ok=True)
                self.logger.info(f"폴더 생성: {folder_path}")
                self.changes_log.append({
                "action": "create_folder",
                "path": str(folder_path),
                "status": "success"
                })
            else:
                self.logger.info(f"폴더 이미 존재: {folder_path}")

                return True

    except Exception as e:
                self.logger.error(f"폴더 구조 생성 실패: {e}")
                return False

            def move_posco_news_files(self) -> bool:
                """POSCO News 관련 파일들을 새로운 폴더로 이동"""
                try:
                    source_path = self.monitoring_path / "Posco_News_mini"
                    target_path = self.new_structure["POSCO_News_250808"]

                    if not source_path.exists():
                        self.logger.warning(f"소스 폴더가 존재하지 않음: {source_path}")
                        return True

                        self.logger.info(f"POSCO News 파일들 이동: {source_path} -> {target_path}")

                        # 파일 및 폴더 이동
                        for item in source_path.iterdir():
                            if item.name.startswith('.'):
                                continue  # 숨김 파일 제외

                                target_item = target_path / item.name

                                if item.is_file():
                                    shutil.copy2(item, target_item)
                                    self.logger.info(f"파일 복사: {item} -> {target_item}")
                                elif item.is_dir():
                                    if target_item.exists():
                                        shutil.rmtree(target_item)
                                        shutil.copytree(item, target_item)
                                        self.logger.info(f"폴더 복사: {item} -> {target_item}")

                                        self.changes_log.append({
                                        "action": "move_file",
                                        "source": str(item),
                                        "target": str(target_item),
                                        "status": "success"
                                        })

                                        return True

    except Exception as e:
                                        self.logger.error(f"POSCO News 파일 이동 실패: {e}")
                                        return False

                                    def move_watchhamster_files(self) -> bool:
                                        """WatchHamster 관련 파일들을 새로운 폴더로 이동"""
                                        try:
                                            source_path = self.monitoring_path / "Posco_News_mini_v2"
                                            target_path = self.new_structure["WatchHamster_v3.0"]

                                            if not source_path.exists():
                                                self.logger.warning(f"소스 폴더가 존재하지 않음: {source_path}")
                                                return True

                                                self.logger.info(f"WatchHamster 파일들 이동: {source_path} -> {target_path}")

                                                # 파일 및 폴더 이동
                                                for item in source_path.iterdir():
                                                    if item.name.startswith('.'):
                                                        continue  # 숨김 파일 제외

                                                        target_item = target_path / item.name

                                                        if item.is_file():
                                                            shutil.copy2(item, target_item)
                                                            self.logger.info(f"파일 복사: {item} -> {target_item}")
                                                        elif item.is_dir():
                                                            if target_item.exists():
                                                                shutil.rmtree(target_item)
                                                                shutil.copytree(item, target_item)
                                                                self.logger.info(f"폴더 복사: {item} -> {target_item}")

                                                                self.changes_log.append({
                                                                "action": "move_file",
                                                                "source": str(item),
                                                                "target": str(target_item),
                                                                "status": "success"
                                                                })

                                                                return True

    except Exception as e:
                                                                self.logger.error(f"WatchHamster 파일 이동 실패: {e}")
                                                                return False

                                                            def update_path_references(self) -> bool:
                                                                """상대 경로 참조 업데이트"""
                                                                try:
                                                                    self.logger.info("상대 경로 참조 업데이트 시작...")

                                                                    # 업데이트할 파일 패턴
                                                                    file_patterns = [
"*.py", "*.sh", "*.bat", "*.md", "*.json"
                                                                    ]

                                                                    # 경로 매핑
                                                                    path_mappings = {
                                                                    "Monitoring/POSCO_News_250808/": "Monitoring/POSCO_News_250808/",
                                                                    "Monitoring/WatchHamster_v3.0/": "Monitoring/WatchHamster_v3.0/",
                                                                    "POSCO_News_250808/": "POSCO_News_250808/",
                                                                    "WatchHamster_v3.0/": "WatchHamster_v3.0/",
                                                                    "./POSCO_News_250808/": "./POSCO_News_250808/",
                                                                    "./WatchHamster_v3.0/": "./WatchHamster_v3.0/"
                                                                    }

                                                                    updated_files = []

                                                                    # 새로운 폴더들에서 파일 검색 및 업데이트
                                                                    for folder_path in self.new_structure.values():
                                                                        if folder_path.exists():
                                                                            updated_files.extend(self._update_files_in_directory(folder_path, path_mappings))

                                                                            # 루트 디렉토리의 파일들도 업데이트
                                                                            updated_files.extend(self._update_files_in_directory(self.base_path,_path_mappings,_recursive = False))

                                                                            self.logger.info(f"총 {len(updated_files)}개 파일의 경로 참조 업데이트 완료")

                                                                            return True

    except Exception as e:
                                                                            self.logger.error(f"경로 참조 업데이트 실패: {e}")
                                                                            return False

                                                                        def _update_files_in_directory(self, directory: Path, path_mappings: Dict[str, str], recursive: bool = True) -> List[str]:
                                                                            """디렉토리 내 파일들의 경로 참조 업데이트"""
                                                                            updated_files = []

                                                                            try:
                                                                                if recursive:
                                                                                    files = directory.rglob("*")
                                                                                else:
                                                                                    files = directory.glob("*")

                                                                                    for file_path in files:
                                                                                        if file_path.is_file() and self._should_update_file(file_path):
                                                                                            if self._update_file_content(file_path, path_mappings):
                                                                                                updated_files.append(str(file_path))

    except Exception as e:
                                                                                                self.logger.error(f"디렉토리 {directory} 업데이트 실패: {e}")

                                                                                                return updated_files

                                                                                            def _should_update_file(self, file_path: Path) -> bool:
                                                                                                """파일이 업데이트 대상인지 확인"""
                                                                                                # 업데이트할 파일 확장자
                                                                                                update_extensions = {'.py', '.sh', '.bat', '.md', '.json', '.txt'}

                                                                                                # 제외할 파일들
                                                                                                exclude_patterns = {
                                                                                                'folder_reorganization.log',
                                                                                                '__pycache__',
                                                                                                '.git',
                                                                                                '.DS_Store'
                                                                                                }

                                                                                                if file_path.suffix.lower() not in update_extensions:
                                                                                                    return False

                                                                                                    for pattern in exclude_patterns:
                                                                                                        if pattern in str(file_path):
                                                                                                            return False

                                                                                                            return True

                                                                                                        def _update_file_content(self, file_path: Path, path_mappings: Dict[str, str]) -> bool:
                                                                                                            """파일 내용의 경로 참조 업데이트"""
                                                                                                            try:
                                                                                                                # 파일 읽기
                                                                                                                with_open(file_path,_'r',_encoding = 'utf-8', errors='ignore') as f:
                                                                                                                    content = f.read()

                                                                                                                    original_content = content

                                                                                                                    # 경로 매핑 적용
                                                                                                                    for old_path, new_path in path_mappings.items():
                                                                                                                        content = content.replace(old_path, new_path)

                                                                                                                        # 변경사항이 있는 경우에만 파일 쓰기
                                                                                                                        if content != original_content:
                                                                                                                            with_open(file_path,_'w',_encoding = 'utf-8') as f:
                                                                                                                                f.write(content)

                                                                                                                                self.logger.info(f"파일 업데이트: {file_path}")
                                                                                                                                self.changes_log.append({
                                                                                                                                "action": "update_file_content",
                                                                                                                                "file": str(file_path),
                                                                                                                                "status": "success"
                                                                                                                                })
                                                                                                                                return True

                                                                                                                                return False

    except Exception as e:
                                                                                                                                self.logger.error(f"파일 {file_path} 업데이트 실패: {e}")
                                                                                                                                return False

                                                                                                                            def create_folder_structure_documentation(self) -> bool:
                                                                                                                                """새로운 폴더 구조 문서화"""
                                                                                                                                try:
                                                                                                                                    doc_content = """# POSCO 프로젝트 표준화된 폴더 구조

                                                                                                                                    ## 개요
POSCO 네이밍 컨벤션 표준화에 따른 새로운 폴더 구조입니다.

                                                                                                                                    ## 폴더 구조

```
Monitoring/
├── POSCO_News_250808/          # POSCO 뉴스 시스템 (날짜 기반 버전)
│   ├── core/                   # 핵심 모듈
│   ├── docs/                   # 문서
│   ├── reports/                # 보고서
│   ├── utils/                  # 유틸리티
│   └── *.py                    # Python 스크립트들
│
├── WatchHamster_v3.0/          # 워치햄스터 시스템 (v3.0)
│   ├── core/                   # 핵심 모듈
│   └── *.py                    # Python 스크립트들
│
└── docs/                       # 공통 문서
    └── *.json                  # 설정 및 인덱스 파일들
```

                                                                                                                                    ## 변경 사항

                                                                                                                                    ### 이전 구조 → 새로운 구조
- `POSCO_News_250808/` → `POSCO_News_250808/`
- `WatchHamster_v3.0/` → `WatchHamster_v3.0/`

                                                                                                                                    ## 버전 체계
-_**POSCO_News**:_날짜_기반_(250808 =  2025년 8월 8일)
- **WatchHamster**: 메이저.마이너 (v3.0)

                                                                                                                                    ## 호환성
모든 상대 경로 참조가 자동으로 업데이트되어 기존 기능과의 호환성을 유지합니다.
"""

                                                                                                                                    doc_path = self.monitoring_path / "Monitoring/FOLDER_STRUCTURE_GUIDE.md"
                                                                                                                                    with_open(doc_path,_'w',_encoding = 'utf-8') as f:
                                                                                                                                        f.write(doc_content)

                                                                                                                                        self.logger.info(f"폴더 구조 문서 생성: {doc_path}")
                                                                                                                                        return True

    except Exception as e:
                                                                                                                                        self.logger.error(f"문서 생성 실패: {e}")
                                                                                                                                        return False

                                                                                                                                    def save_changes_log(self) -> bool:
                                                                                                                                        """변경 사항 로그 저장"""
                                                                                                                                        try:
                                                                                                                                            log_data = {
                                                                                                                                            "reorganization_date": "var_202_5-var_0_8-var_0_6",
                                                                                                                                            "total_changes": len(self.changes_log),
                                                                                                                                            "changes": self.changes_log,
                                                                                                                                            "new_structure": {k: str(v) for k, v in self.new_structure.items()}
                                                                                                                                            }

                                                                                                                                            log_path = "folder_reorganization_log.json"
                                                                                                                                            with_open(log_path,_'w',_encoding = 'utf-8') as f:
                                                                                                                                                json.dump(log_data,_f,_indent = 2, ensure_ascii=False)

                                                                                                                                                self.logger.info(f"변경 사항 로그 저장: {log_path}")
                                                                                                                                                return True

    except Exception as e:
                                                                                                                                                self.logger.error(f"로그 저장 실패: {e}")
                                                                                                                                                return False

                                                                                                                                            def reorganize_folder_structure(self) -> bool:
                                                                                                                                                """전체 폴더 구조 재구성 실행"""
                                                                                                                                                try:
                                                                                                                                                    self.logger.info("=== POSCO 폴더 구조 재구성 시작 ===")

                                                                                                                                                    # 1. 새로운 폴더 구조 생성
                                                                                                                                                    if not self.create_new_folder_structure():
                                                                                                                                                        return False

                                                                                                                                                        # 2. POSCO News 파일들 이동
                                                                                                                                                        if not self.move_posco_news_files():
                                                                                                                                                            return False

                                                                                                                                                            # 3. WatchHamster 파일들 이동
                                                                                                                                                            if not self.move_watchhamster_files():
                                                                                                                                                                return False

                                                                                                                                                                # 4. 상대 경로 참조 업데이트
                                                                                                                                                                if not self.update_path_references():
                                                                                                                                                                    return False

                                                                                                                                                                    # 5. 문서화
                                                                                                                                                                    if not self.create_folder_structure_documentation():
                                                                                                                                                                        return False

                                                                                                                                                                        # 6. 변경 사항 로그 저장
                                                                                                                                                                        if not self.save_changes_log():
                                                                                                                                                                            return False

                                                                                                                                                                            self.logger.info("=== POSCO 폴더 구조 재구성 완료 ===")
                                                                                                                                                                            self.logger.info(f"총 {len(self.changes_log)}개 항목이 변경되었습니다.")

                                                                                                                                                                            return True

    except Exception as e:
                                                                                                                                                                            self.logger.error(f"폴더 구조 재구성 실패: {e}")
                                                                                                                                                                            return False

                                                                                                                                                                        def main():
                                                                                                                                                                            """메인 실행 함수"""
                                                                                                                                                                            print("POSCO 네이밍 컨벤션 표준화 - 폴더 구조 재구성")
                                                                                                                                                                            print("=" * 50)

                                                                                                                                                                            reorganizer = FolderStructureReorganizer()

                                                                                                                                                                            if reorganizer.reorganize_folder_structure():
                                                                                                                                                                                print("/n✅ 폴더 구조 재구성이 성공적으로 완료되었습니다!")
                                                                                                                                                                                print("/n새로운 폴더 구조:")
                                                                                                                                                                                print("- Monitoring/POSCO_News_250808/")
                                                                                                                                                                                print("- Monitoring/WatchHamster_v3.0/")
                                                                                                                                                                                print("- Monitoring/docs/")
                                                                                                                                                                                print("/n자세한 내용은 folder_reorganization.log 파일을 확인하세요.")
                                                                                                                                                                            else:
                                                                                                                                                                                print("/n❌ 폴더 구조 재구성 중 오류가 발생했습니다.")
                                                                                                                                                                                print("folder_reorganization.log 파일에서 오류 내용을 확인하세요.")

                                                                                                                                                                                if __name__ == "__main__":
                                                                                                                                                                                    main()