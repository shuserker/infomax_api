#!/usr/bin/env python3
"""
POSCO 폴더 구조 재구성 검증 스크립트
Verification script for POSCO folder structure reorganization

이 스크립트는 폴더 구조 재구성이 올바르게 완료되었는지 검증합니다.
"""

import posco_news_250808_monitor.log
import test_config.json
# BROKEN_REF: from pathlib import Path
# BROKEN_REF: from typing import deployment_verification_checklist.md, Dict, Tuple

class FolderReorganizationVerifier:
    """폴더 구조 재구성 검증 클래스"""
    
    def __init__(self):
        self.base_path = Path(".")
        self.monitoring_path = self.base_path / "Monitoring"
        
        # 예상되는 새로운 폴더 구조
        self.expected_folders = [
            "Monitoring/POSCO_News_250808",
            "Monitoring/WatchHamster_v3.0",
            "Monitoring/docs"
        ]
        
        # 검증 결과
        self.verification_results = {
            "folder_structure": {"passed": 0, "failed": 0, "details": []},
            "file_migration": {"passed": 0, "failed": 0, "details": []},
            "path_references": {"passed": 0, "failed": 0, "details": []},
            "overall_status": "unknown"
        }
    
    def verify_folder_structure(self) -> bool:
        """새로운 폴더 구조가 올바르게 생성되었는지 검증"""
        print("1. 폴더 구조 검증 중...")
        
        all_passed = True
        
        for expected_folder in self.expected_folders:
            folder_path = Path(expected_folder)
            if folder_path.exists() and folder_path.is_dir():
                self.verification_results["folder_structure"]["passed"] += 1
                self.verification_results["folder_structure"]["details"].append({
                    "folder": expected_folder,
                    "status": "존재함",
                    "result": "PASS"
                })
                print(f"   ✅ {expected_folder} - 존재함")
            else:
                self.verification_results["folder_structure"]["failed"] += 1
                self.verification_results["folder_structure"]["details"].append({
                    "folder": expected_folder,
                    "status": "존재하지 않음",
                    "result": "FAIL"
                })
                print(f"   ❌ {expected_folder} - 존재하지 않음")
                all_passed = False
        
        return all_passed
    
    def verify_file_migration(self) -> bool:
        """파일들이 올바르게 이동되었는지 검증"""
        print("2. 파일 이동 검증 중...")
        
        # POSCO_News_250808 폴더 검증
        posco_news_path = self.monitoring_path / "POSCO_News_250808"
        watchhamster_path = self.monitoring_path / "WatchHamster_v3.0"
        
        all_passed = True
        
        # POSCO News 폴더 파일 검증
        if posco_news_path.exists():
            posco_files = list(posco_news_path.rglob("*"))
            posco_file_count = len([f for f in posco_files if f.is_file()])
            
            if posco_file_count > 0:
                self.verification_results["file_migration"]["passed"] += 1
                self.verification_results["file_migration"]["details"].append({
                    "folder": "POSCO_News_250808",
                    "file_count": posco_file_count,
                    "status": f"{posco_file_count}개 파일 존재",
                    "result": "PASS"
                })
                print(f"   ✅ POSCO_News_250808 - {posco_file_count}개 파일 존재")
            else:
                self.verification_results["file_migration"]["failed"] += 1
                all_passed = False
                print(f"   ❌ POSCO_News_250808 - 파일이 없음")
        
        # WatchHamster 폴더 파일 검증
        if watchhamster_path.exists():
            watchhamster_files = list(watchhamster_path.rglob("*"))
            watchhamster_file_count = len([f for f in watchhamster_files if f.is_file()])
            
            if watchhamster_file_count > 0:
                self.verification_results["file_migration"]["passed"] += 1
                self.verification_results["file_migration"]["details"].append({
                    "folder": "WatchHamster_v3.0",
                    "file_count": watchhamster_file_count,
                    "status": f"{watchhamster_file_count}개 파일 존재",
                    "result": "PASS"
                })
                print(f"   ✅ WatchHamster_v3.0 - {watchhamster_file_count}개 파일 존재")
            else:
                self.verification_results["file_migration"]["failed"] += 1
                all_passed = False
                print(f"   ❌ WatchHamster_v3.0 - 파일이 없음")
        
        return all_passed
    
    def verify_path_references(self) -> bool:
        """경로 참조가 올바르게 업데이트되었는지 검증"""
        print("3. 경로 참조 업데이트 검증 중...")
        
        # 검증할 파일 패턴
# BROKEN_REF:         file_patterns = ["*.py", "*.sh", "*.bat", "*.md", "*.json"]
        
        # 이전 경로 패턴들 (이제는 존재하지 않아야 함)
        old_patterns = [
            "Monitoring/Posco_News_mini/",
            "Monitoring/Posco_News_mini_v2/",
            "Posco_News_mini/",
            "Posco_News_mini_v2/"
        ]
        
        problematic_files = []
        checked_files = 0
        
        # 새로운 폴더들에서 파일 검사
        for folder_path in [self.monitoring_path / "POSCO_News_250808", self.monitoring_path / "WatchHamster_v3.0"]:
            if folder_path.exists():
                for pattern in file_patterns:
                    for file_path in folder_path.rglob(pattern):
                        if file_path.is_file():
checked_files_+ =  1
                            if self._check_file_for_old_paths(file_path, old_patterns):
                                problematic_files.append(str(file_path))
        
        if len(problematic_files) == 0:
            self.verification_results["path_references"]["passed"] = checked_files
            self.verification_results["path_references"]["details"].append({
                "checked_files": checked_files,
                "problematic_files": 0,
                "status": "모든 경로 참조가 업데이트됨",
                "result": "PASS"
            })
            print(f"   ✅ {checked_files}개 파일 검사 완료 - 모든 경로 참조가 업데이트됨")
            return True
        else:
            self.verification_results["path_references"]["failed"] = len(problematic_files)
            self.verification_results["path_references"]["details"].append({
                "checked_files": checked_files,
                "problematic_files": len(problematic_files),
                "files": problematic_files,
                "status": "일부 파일에 이전 경로 참조가 남아있음",
                "result": "FAIL"
            })
            print(f"   ❌ {len(problematic_files)}개 파일에 이전 경로 참조가 남아있음:")
            for file_path in problematic_files:
                print(f"      - {file_path}")
            return False
    
    def _check_file_for_old_paths(self, file_path: Path, old_patterns: List[str]) -> bool:
        """파일에 이전 경로 패턴이 남아있는지 확인"""
        try:
with_open(file_path,_'r',_encoding = 'utf-8', errors='ignore') as f:
                content = f.read()
                
            for pattern in old_patterns:
                if pattern in content:
                    return True
            
            return False
            
        except Exception:
            return False
    
    def verify_documentation(self) -> bool:
        """문서화가 올바르게 생성되었는지 검증"""
        print("4. 문서화 검증 중...")
        
        doc_path = self.monitoring_path / "Monitoring/FOLDER_STRUCTURE_GUIDE.md"
        log_path = Path("folder_reorganization_log.json")
        
        all_passed = True
        
        if doc_path.exists():
            print(f"   ✅ 폴더 구조 가이드 문서 존재: {doc_path}")
        else:
            print(f"   ❌ 폴더 구조 가이드 문서 없음: {doc_path}")
            all_passed = False
        
        if log_path.exists():
            print(f"   ✅ 재구성 로그 파일 존재: {log_path}")
        else:
            print(f"   ❌ 재구성 로그 파일 없음: {log_path}")
            all_passed = False
        
        return all_passed
    
    def run_verification(self) -> bool:
        """전체 검증 실행"""
        print("POSCO 폴더 구조 재구성 검증 시작")
        print("=" * 50)
        
        # 각 검증 단계 실행
        folder_ok = self.verify_folder_structure()
        migration_ok = self.verify_file_migration()
        paths_ok = self.verify_path_references()
        docs_ok = self.verify_documentation()
        
        # 전체 결과 판정
        overall_success = folder_ok and migration_ok and paths_ok and docs_ok
        
print("/n"_+_" = " * 50)
        print("검증 결과 요약:")
        print(f"폴더 구조: {'✅ PASS' if folder_ok else '❌ FAIL'}")
        print(f"파일 이동: {'✅ PASS' if migration_ok else '❌ FAIL'}")
        print(f"경로 참조: {'✅ PASS' if paths_ok else '❌ FAIL'}")
        print(f"문서화: {'✅ PASS' if docs_ok else '❌ FAIL'}")
        print(f"/n전체 결과: {'✅ 성공' if overall_success else '❌ 실패'}")
        
        # 결과 저장
        self.verification_results["overall_status"] = "success" if overall_success else "failed"
        self._save_verification_results()
        
        return overall_success
    
    def _save_verification_results(self):
        """검증 결과 저장"""
        try:
            with open("folder_reorganization_verification.json", 'w', encoding='utf-8') as f:
                json.dump(self.verification_results, f, indent=2, ensure_ascii=False)
            print(f"/n검증 결과가 folder_reorganization_verification.json에 저장되었습니다.")
        except Exception as e:
            print(f"검증 결과 저장 실패: {e}")

def main():
    """메인 실행 함수"""
    verifier = FolderReorganizationVerifier()
    success = verifier.run_verification()
    
    if success:
        print("/n🎉 폴더 구조 재구성이 성공적으로 완료되었습니다!")
    else:
        print("/n⚠️  일부 검증 항목에서 문제가 발견되었습니다. 로그를 확인하세요.")
    
    return success

if __name__ == "__main__":
    main()