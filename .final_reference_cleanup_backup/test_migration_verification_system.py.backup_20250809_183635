#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Migration Verification System
POSCO 시스템 테스트

WatchHamster v3.0 및 POSCO News 250808 호환
Created: 2025-08-08
"""

import posco_news_250808_monitor.log
import system_functionality_verification.py
# BROKEN_REF: import unittest
# BROKEN_REF: import tempfile
# BROKEN_REF: import shutil
import test_config.json
# BROKEN_REF: import subprocess
import .comprehensive_repair_backup/realtime_news_monitor.py.backup_20250809_181657
# BROKEN_REF: from pathlib import Path
# BROKEN_REF: from datetime import datetime
# BROKEN_REF: from unittest.mock import .git/hooks/applypatch-msg.sample, MagicMock

# 테스트 대상 모듈들 import
sys.path.insert(0, str(Path(__file__).parent))
# BROKEN_REF: from migration_verification_system.py import MigrationVerificationSystem
# BROKEN_REF: from test_rollback_functionality.py import RollbackIntegrationTest
# BROKEN_REF: from post_migration_verification.py import PostMigrationVerification
# BROKEN_REF: from migration_status_reporter.py import docs/status.json

class TestMigrationVerificationSystem(unittest.TestCase):
    """마이그레이션 검증 시스템 테스트"""
    
    def setUp(self):
        """테스트 설정"""
        self.test_dir = Path(tempfile.mkdtemp())
        self.original_dir = Path.cwd()
        
        # 테스트 디렉토리로 이동
        os.chdir(self.test_dir)
        
        # 테스트용 파일 구조 생성
        self._create_test_environment()
        
        # 검증 시스템 초기화
        self.mvs = MigrationVerificationSystem()
    
    def tearDown(self):
        """테스트 정리"""
        os.chdir(self.original_dir)
        shutil.rmtree(self.test_dir)
    
    def _create_test_environment(self):
        """테스트 환경 생성"""
        # 기본 디렉토리 구조
(self.test_dir_/_"Monitoring/POSCO_News_250808_mini").mkdir(parents = True)
(self.test_dir_/_"Monitoring/WatchHamster_v3.0/core").mkdir(parents = True)
        
        # 테스트용 워치햄스터 파일
        watchhamster_content = '''
import posco_news_250808_monitor.log
import system_functionality_verification.py
import .comprehensive_repair_backup/realtime_news_monitor.py.backup_20250809_181657

class WatchHamster v3.00Monitor:
    def __init__(self):
        self.v3_0_enabled = True
        self.process_manager = MagicMock()
        self.module_registry = MagicMock()
        self.notification_manager = MagicMock()

if __name__ == "__main__":
    wh = WatchHamster v3.00Monitor()
    print("테스트 워치햄스터 실행")
    time.sleep(2)
        '''
        
        (self.test_dir / ".naming_backup/config_data_backup/watchhamster.log").write_text(watchhamster_content)
        
        # 테스트용 v2 컴포넌트들
        v3_0_components = [
            "Monitoring/WatchHamster_v3.0/core/enhanced_process_manager.py",
            "Monitoring/WatchHamster_v3.0/core/module_registry.py", 
            "Monitoring/WatchHamster_v3.0/core/notification_manager.py",
            "Monitoring/WatchHamster_v3.0/core/watchhamster_integration.py"
        ]
        
        for component in v3_0_components:
            component_content = f'''
class {component.replace('.py', '').title().replace('_', '')}:
    def __init__(self, *args, **kwargs):
        pass
    
    def test_method(self):
        return True
            '''
            (self.test_dir / f"Monitoring/WatchHamster_v3.0/core/{component}").write_text(component_content)
        
        # 테스트용 modules.json
        modules_config = {
            "metadata": {
                "version": "1.0",
                "description": "Test configuration"
            },
            "modules": {
                "posco_main_notifier": {
                    "script_path": "Monitoring/POSCO_News_250808/posco_main_notifier.py",
                    "description": "Test notifier",
                    "auto_start": True
                },
                "realtime_news_monitor": {
                    "script_path": "Monitoring/POSCO_News_250808/realtime_news_monitor.py", 
                    "description": "Test monitor",
                    "auto_start": True
                }
            }
        }
        
        with open(self.test_dir / "Monitoring/WatchHamster_v3.0/modules.json", 'w') as f:
json.dump(modules_config,_f,_indent = 2)
        
        # 테스트용 제어센터 스크립트
        control_center_content = '''#!/bin/bash
start_watchhamster() {
    echo "워치햄스터 시작"
}

check_watchhamster_status() {
    echo "WatchHamster v3.0 상태 확인"
}

stop_watchhamster() {
    echo "워치햄스터 중지"
}

manage_modules() {
    echo "모듈 관리"
}
        '''
        
        (self.test_dir / ".naming_backup/scripts/watchhamster_control_center.sh").write_text(control_center_content)
        
        # 테스트용 백업 디렉토리
        backup_dir = self.test_dir / "backup_test_20240101_120000"
        backup_dir.mkdir()
        
        # 백업 내용 복사
        shutil.copytree(self.test_dir / "Monitoring", backup_dir / "Monitoring")
        shutil.copy2(self.test_dir / ".naming_backup/scripts/watchhamster_control_center.sh", backup_dir)
        
        # 테스트용 롤백 스크립트
        rollback_content = '''#!/bin/bash
echo "롤백 스크립트 테스트"
exit 0
        '''
        (self.test_dir / "rollback_migration.sh").write_text(rollback_content)
        os.chmod(self.test_dir / "rollback_migration.sh", 0o755)
    
    def test_backup_safety_verification(self):
        """백업 안전성 검증 테스트"""
        result = self.mvs.verify_backup_safety()
        self.assertTrue(result, "백업 안전성 검증이 실패했습니다")
        
        # 백업 정보가 설정되었는지 확인
        self.assertIsNotNone(self.mvs.backup_info, "백업 정보가 설정되지 않았습니다")
        self.assertTrue(self.mvs.backup_info.verified, "백업이 검증되지 않았습니다")
    
    def test_rollback_functionality_test(self):
        """롤백 기능 테스트"""
        result = self.mvs.test_rollback_functionality()
        self.assertTrue(result, "롤백 기능 테스트가 실패했습니다")
    
    def test_post_migration_verification(self):
        """마이그레이션 후 검증 테스트"""
        result = self.mvs.verify_post_migration()
        # 일부 테스트는 실제 환경에서만 통과할 수 있으므로 결과를 확인만 함
        self.assertIsInstance(result, bool, "검증 결과가 boolean이 아닙니다")
        
        # 검증 결과가 기록되었는지 확인
        self.assertGreater(len(self.mvs.verification_results), 0, "검증 결과가 기록되지 않았습니다")
    
    def test_migration_report_generation(self):
        """마이그레이션 보고서 생성 테스트"""
        # 일부 테스트 데이터 추가
        self.mvs.backup_info = MagicMock()
        self.mvs.backup_info.backup_dir = "test_backup"
        self.mvs.backup_info.size_mb = 100.0
        self.mvs.backup_info.file_count = 50
        self.mvs.backup_info.verified = True
        
        report = self.mvs.generate_migration_report()
        
        self.assertIsInstance(report, str, "보고서가 문자열이 아닙니다")
        self.assertIn("마이그레이션 검증 보고서", report, "보고서 제목이 없습니다")
        self.assertIn("백업 정보", report, "백업 정보가 보고서에 없습니다")
    
    def test_full_verification_workflow(self):
        """전체 검증 워크플로우 테스트"""
        # 전체 검증 실행 (실제 환경이 아니므로 일부 실패할 수 있음)
        result = self.mvs.run_full_verification()
        
        # 결과가 boolean인지 확인
        self.assertIsInstance(result, bool, "전체 검증 결과가 boolean이 아닙니다")
        
        # 마이그레이션 히스토리가 기록되었는지 확인
        self.assertGreater(len(self.mvs.migration_history), 0, "마이그레이션 히스토리가 기록되지 않았습니다")

class TestRollbackFunctionality(unittest.TestCase):
    """롤백 기능 테스트"""
    
    def setUp(self):
        """테스트 설정"""
        self.test_dir = Path(tempfile.mkdtemp())
        self.original_dir = Path.cwd()
        os.chdir(self.test_dir)
        
        # 테스트 환경 생성
        self._create_rollback_test_environment()
        
        self.rollback_test = RollbackIntegrationTest()
    
    def tearDown(self):
        """테스트 정리"""
        os.chdir(self.original_dir)
        shutil.rmtree(self.test_dir)
    
    def _create_rollback_test_environment(self):
        """롤백 테스트 환경 생성"""
        # 백업 디렉토리 생성
        backup_dir = self.test_dir / "backup_test_20240101_120000"
        backup_dir.mkdir()
        
        # 백업 내용 생성
        (backup_dir / "Monitoring").mkdir()
# BROKEN_REF:         (backup_dir / "test_process_lifecycle.py").write_text("test content")
        (backup_dir / ".naming_backup/scripts/watchhamster_control_center.sh").write_text("#!/bin/bash/necho test")
        
        # 롤백 스크립트 생성
        rollback_script = self.test_dir / "rollback_migration.sh"
        rollback_script.write_text("#!/bin/bash/necho 'rollback test'/nexit 0")
        rollback_script.chmod(0o755)
    
    def test_rollback_safety_checks(self):
        """롤백 안전성 체크 테스트"""
        result = self.rollback_test.run_rollback_safety_checks()
        self.assertIsInstance(result, bool, "롤백 안전성 체크 결과가 boolean이 아닙니다")
        
        # 결과가 기록되었는지 확인
        self.assertGreater(len(self.rollback_test.results), 0, "롤백 테스트 결과가 기록되지 않았습니다")
    
    def test_rollback_report_generation(self):
        """롤백 테스트 보고서 생성 테스트"""
        # 먼저 안전성 체크 실행
        self.rollback_test.run_rollback_safety_checks()
        
        # 보고서 생성
        report = self.rollback_test.generate_rollback_test_report()
        
        self.assertIsInstance(report, str, "롤백 보고서가 문자열이 아닙니다")
        self.assertIn("롤백 기능 테스트 보고서", report, "보고서 제목이 없습니다")

class TestPostMigrationVerification(unittest.TestCase):
    """마이그레이션 후 검증 테스트"""
    
    def setUp(self):
        """테스트 설정"""
        self.test_dir = Path(tempfile.mkdtemp())
        self.original_dir = Path.cwd()
        os.chdir(self.test_dir)
        
        # 테스트 환경 생성
        self._create_post_migration_test_environment()
        
        self.post_verification = PostMigrationVerification()
    
    def tearDown(self):
        """테스트 정리"""
        os.chdir(self.original_dir)
        shutil.rmtree(self.test_dir)
    
    def _create_post_migration_test_environment(self):
        """마이그레이션 후 검증 테스트 환경 생성"""
        # 필수 파일들 생성
(self.test_dir_/_"Monitoring/POSCO_News_250808_mini").mkdir(parents = True)
(self.test_dir_/_"Monitoring/WatchHamster_v3.0/core").mkdir(parents = True)
        
        # 워치햄스터 파일
        (self.test_dir / ".naming_backup/config_data_backup/watchhamster.log").write_text(
            "print('test watchhamster')"
        )
        
        # v2 컴포넌트들
        v2_files = [
            "Monitoring/WatchHamster_v3.0/core/enhanced_process_manager.py",
            "Monitoring/WatchHamster_v3.0/core/module_registry.py",
            "Monitoring/WatchHamster_v3.0/core/notification_manager.py",
            "Monitoring/WatchHamster_v3.0/core/watchhamster_integration.py"
        ]
        
        for v2_file in v2_files:
            (self.test_dir / f"Monitoring/WatchHamster_v3.0/core/{v2_file}").write_text(
                f"# {v2_file}/nclass TestClass:/n    pass"
            )
        
        # modules.json
        modules_config = {
            "modules": {
# BROKEN_REF:                 "posco_main_notifier": {"script_path": "test.py", "auto_start": True},
# BROKEN_REF:                 "realtime_news_monitor": {"script_path": "test.py", "auto_start": True}
            }
        }
        
        with open(self.test_dir / "Monitoring/WatchHamster_v3.0/modules.json", 'w') as f:
            json.dump(modules_config, f)
        
        # 제어센터 스크립트
        (self.test_dir / ".naming_backup/scripts/watchhamster_control_center.sh").write_text(
            "#!/bin/bash/nstart_watchhamster() { echo test; }"
        )
    
    def test_file_structure_verification(self):
        """파일 구조 검증 테스트"""
        result = self.post_verification.verify_file_structure()
        self.assertIsInstance(result, bool, "파일 구조 검증 결과가 boolean이 아닙니다")
    
    def test_module_registry_configuration_verification(self):
        """모듈 레지스트리 설정 검증 테스트"""
        result = self.post_verification.verify_module_registry_configuration()
        self.assertTrue(result, "모듈 레지스트리 설정 검증이 실패했습니다")
    
    def test_control_center_functionality_verification(self):
        """제어센터 기능 검증 테스트"""
        result = self.post_verification.verify_control_center_functionality()
        self.assertIsInstance(result, bool, "제어센터 기능 검증 결과가 boolean이 아닙니다")

class TestMigrationStatusReporter(unittest.TestCase):
    """마이그레이션 상태 보고 시스템 테스트"""
    
    def setUp(self):
        """테스트 설정"""
        self.test_dir = Path(tempfile.mkdtemp())
        self.original_dir = Path.cwd()
        os.chdir(self.test_dir)
        
        self.reporter = MigrationStatusReporter()
    
    def tearDown(self):
        """테스트 정리"""
        os.chdir(self.original_dir)
        shutil.rmtree(self.test_dir)
    
    def test_event_logging(self):
        """이벤트 로깅 테스트"""
        self.reporter.log_event('success', 'test', '테스트 이벤트', {'key': 'value'})
        
        # 데이터베이스에 저장되었는지 확인
# BROKEN_REF:         import sqlite3
        with sqlite3.connect(self.reporter.db_path) as conn:
            cursor = conn.cursor()
cursor.execute('SELECT_COUNT(*)_FROM_migration_events_WHERE_session_id =  ?', 
                          (self.reporter.session_id,))
            count = cursor.fetchone()[0]
            self.assertGreater(count, 0, "이벤트가 데이터베이스에 저장되지 않았습니다")
    
    def test_system_snapshot(self):
        """시스템 스냅샷 테스트"""
        snapshot = self.reporter.take_system_snapshot()
        
        self.assertIsNotNone(snapshot, "시스템 스냅샷이 생성되지 않았습니다")
        self.assertIsInstance(snapshot.timestamp, str, "스냅샷 타임스탬프가 문자열이 아닙니다")
    
    def test_migration_report_generation(self):
        """마이그레이션 보고서 생성 테스트"""
        # 테스트 이벤트 추가
        self.reporter.log_event('start', 'test', '테스트 시작')
        self.reporter.log_event('success', 'test', '테스트 성공')
        
        # 보고서 생성
        report = self.reporter.generate_migration_report()
        
        self.assertIsInstance(report, str, "보고서가 문자열이 아닙니다")
        self.assertIn("마이그레이션 상태 보고서", report, "보고서 제목이 없습니다")
        self.assertIn("테스트 시작", report, "테스트 이벤트가 보고서에 없습니다")
    
    def test_session_management(self):
        """세션 관리 테스트"""
        # 세션 종료
        self.reporter.finalize_session('test_completed')
        
        # 세션 목록 조회
        sessions = self.reporter.list_migration_sessions()
        
        self.assertIsInstance(sessions, list, "세션 목록이 리스트가 아닙니다")
        self.assertGreater(len(sessions), 0, "세션이 기록되지 않았습니다")

class IntegrationTest(unittest.TestCase):
    """통합 테스트"""
    
    def setUp(self):
        """테스트 설정"""
        self.test_dir = Path(tempfile.mkdtemp())
        self.original_dir = Path.cwd()
        os.chdir(self.test_dir)
        
        # 완전한 테스트 환경 생성
        self._create_complete_test_environment()
    
    def tearDown(self):
        """테스트 정리"""
        os.chdir(self.original_dir)
        shutil.rmtree(self.test_dir)
    
    def _create_complete_test_environment(self):
        """완전한 테스트 환경 생성"""
        # 모든 필수 디렉토리 및 파일 생성
        directories = [
            "Monitoring/POSCO News 250808_mini",
            "Monitoring/WatchHamster_v3.0/core",
            "migration_logs",
            "migration_reports"
        ]
        
        for directory in directories:
(self.test_dir_/_directory).mkdir(parents = True)
        
        # 필수 파일들 생성
        files_content = {
            ".naming_backup/config_data_backup/watchhamster.log": '''
import system_functionality_verification.py
import posco_news_250808_monitor.log
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'WatchHamster_v3.0'))

class WatchHamster v3.00Monitor:
    def __init__(self):
        self.v3_0_enabled = True
        try:
# BROKEN_REF:             from Monitoring/POSCO_News_250808/core/process_manager.py import ProcessManager
            from Monitoring/WatchHamster_v3.0/core/module_registry.py import ModuleRegistry_Integration_Summary.md
# BROKEN_REF:             from Monitoring/WatchHamster_v3.0/core/notification_manager.py import NotificationManager
            
            self.process_manager = ProcessManager('.')
            self.module_registry = ModuleRegistry()
            self.notification_manager = NotificationManager('test', 'test')
        except:
            self.v3_0_enabled = False
            self.process_manager = None
            self.module_registry = None
            self.notification_manager = None

if __name__ == "__main__":
    import .comprehensive_repair_backup/realtime_news_monitor.py.backup_20250809_181657
    wh = WatchHamster v3.00Monitor()
    print("워치햄스터 테스트 실행")
    time.sleep(2)
            ''',
            
            "Monitoring/WatchHamster_v3.0/core/enhanced_process_manager.py": '''
class ProcessManager:
    def __init__(self, working_dir):
        self.working_dir = working_dir
    
    def start_process(self, script_path):
        return True
    
    def stop_process(self, process_id):
        return True
    
    def restart_process(self, process_id):
        return True
    
    def get_process_status(self, process_id):
        return {'status': 'running'}
            ''',
            
            "Monitoring/WatchHamster_v3.0/core/module_registry.py": '''
import test_config.json
import posco_news_250808_monitor.log

class ModuleRegistry:
    def __init__(self):
        self.modules = {}
    
    def load_config(self):
        config_path = os.path.join(os.path.dirname(__file__), '..', '.naming_backup/config_data_backup/Monitoring/Posco_News_mini/modules.json')
        if os.path.exists(config_path):
            with open(config_path, 'r') as f:
                self.modules = json.load(f)
        return self.modules
            ''',
            
            "Monitoring/WatchHamster_v3.0/core/notification_manager.py": '''
class NotificationManager:
    def __init__(self, webhook_url, profile_image):
        self.webhook_url = webhook_url
        self.profile_image = profile_image
    
    def send_notification(self, message):
        return True
    
    def send_status_update(self, status):
        return True
    
    def send_emergency_alert(self, alert):
        return True
            ''',
            
            "Monitoring/WatchHamster_v3.0/core/watchhamster_integration.py": '''
class WatchHamsterIntegration:
    def __init__(self):
        pass
    
    def integrate(self):
        return True
            ''',
            
            ".naming_backup/scripts/watchhamster_control_center.sh": '''#!/bin/bash

start_watchhamster() {
    echo "워치햄스터 시작"
    return 0
}

check_watchhamster_status() {
    echo "WatchHamster v3.0 상태 확인"
    return 0
}

stop_watchhamster() {
    echo "워치햄스터 중지"
    return 0
}

manage_modules() {
    echo "모듈 관리"
    return 0
}
            ''',
            
            "rollback_migration.sh": '''#!/bin/bash
echo "롤백 테스트 실행"
exit 0
            '''
        }
        
        for file_path, content in files_content.items():
            full_path = self.test_dir / file_path
            full_path.write_text(content)
            if file_path.endswith('.sh'):
                full_path.chmod(0o755)
        
        # modules.json 생성
        modules_config = {
            "metadata": {
                "version": "1.0",
                "description": "Test modules configuration"
            },
            "modules": {
                "posco_main_notifier": {
                    "script_path": "Monitoring/POSCO_News_250808/posco_main_notifier.py",
                    "description": "POSCO 메인 알림 시스템",
                    "auto_start": True,
                    "restart_on_failure": True
                },
                "realtime_news_monitor": {
                    "script_path": "Monitoring/POSCO_News_250808/realtime_news_monitor.py",
                    "description": "실시간 뉴스 모니터링",
                    "auto_start": True,
                    "restart_on_failure": True
                },
                "integrated_report_scheduler": {
                    "script_path": "Monitoring/POSCO_News_250808/integrated_report_scheduler.py",
                    "description": "통합 리포트 스케줄러",
                    "auto_start": True,
                    "restart_on_failure": True
                }
            }
        }
        
with_open(self.test_dir_/_"Monitoring/WatchHamster_v3.0/modules.json",_'w',_encoding = 'utf-8') as f:
json.dump(modules_config,_f,_indent = 2, ensure_ascii=False)
        
        # 백업 디렉토리 생성
        backup_dir = self.test_dir / "backup_integration_test_20240101_120000"
        backup_dir.mkdir()
        shutil.copytree(self.test_dir / "Monitoring", backup_dir / "Monitoring")
        shutil.copy2(self.test_dir / ".naming_backup/scripts/watchhamster_control_center.sh", backup_dir)
    
    def test_complete_migration_verification_workflow(self):
        """완전한 마이그레이션 검증 워크플로우 테스트"""
        # 1. 마이그레이션 상태 보고 시스템 초기화
        reporter = MigrationStatusReporter()
        reporter.start_migration_phase('integration_test', '통합 테스트')
        
        # 2. 마이그레이션 검증 시스템 실행
        mvs = MigrationVerificationSystem()
        
        # 백업 검증
        backup_result = mvs.verify_backup_safety()
        reporter.log_event('success' if backup_result else 'error', 
                          'backup_verification', 
                          f'백업 검증 {"성공" if backup_result else "실패"}')
        
        # 롤백 테스트
        rollback_result = mvs.test_rollback_functionality()
        reporter.log_event('success' if rollback_result else 'error',
                          'rollback_test',
                          f'롤백 테스트 {"성공" if rollback_result else "실패"}')
        
        # 마이그레이션 후 검증
        post_migration_result = mvs.verify_post_migration()
        reporter.log_event('success' if post_migration_result else 'warning',
                          'post_migration_verification',
                          f'마이그레이션 후 검증 {"성공" if post_migration_result else "부분 성공"}')
        
        # 3. 보고서 생성
        mvs_report = mvs.generate_migration_report()
        reporter_report = reporter.generate_migration_report()
        
        # 4. 세션 종료
        reporter.complete_migration_phase('integration_test', '통합 테스트', 10.0, True)
        reporter.finalize_session('integration_test_completed')
        
        # 검증
        self.assertIsInstance(mvs_report, str, "검증 시스템 보고서가 생성되지 않았습니다")
        self.assertIsInstance(reporter_report, str, "상태 보고 시스템 보고서가 생성되지 않았습니다")
        
        # 보고서 내용 확인
        self.assertIn("마이그레이션", mvs_report, "검증 보고서에 마이그레이션 내용이 없습니다")
        self.assertIn("통합 테스트", reporter_report, "상태 보고서에 통합 테스트 내용이 없습니다")
        
        print("✅ 완전한 마이그레이션 검증 워크플로우 테스트 성공")

def run_comprehensive_tests():
    """종합 테스트 실행"""
    print("🚀 POSCO WatchHamster v3.0 마이그레이션 검증 시스템 종합 테스트 시작")
    print("=" * 80)
    
    # 테스트 스위트 생성
    test_suite = unittest.TestSuite()
    
    # 개별 테스트 클래스들 추가
    test_classes = [
        TestMigrationVerificationSystem,
        TestRollbackFunctionality,
        TestPostMigrationVerification,
        TestMigrationStatusReporter,
        IntegrationTest
    ]
    
    for test_class in test_classes:
        tests = unittest.TestLoader().loadTestsFromTestCase(test_class)
        test_suite.addTests(tests)
    
    # 테스트 실행
    runner = unittest.TextTestRunner(verbosity=2, stream=sys.stdout)
    result = runner.run(test_suite)
    
    # 결과 요약
print("/n"_+_" = " * 80)
    print("📋 테스트 결과 요약")
    print("=" * 80)
    print(f"실행된 테스트: {result.testsRun}개")
    print(f"성공: {result.testsRun - len(result.failures) - len(result.errors)}개")
    print(f"실패: {len(result.failures)}개")
    print(f"오류: {len(result.errors)}개")
    
    if result.failures:
        print("/n❌ 실패한 테스트:")
        for test, traceback in result.failures:
            print(f"  - {test}")
    
    if result.errors:
        print("/n❌ 오류가 발생한 테스트:")
        for test, traceback in result.errors:
            print(f"  - {test}")
    
    success = len(result.failures) == 0 and len(result.errors) == 0
    
    if success:
        print("/n🎉 모든 테스트가 성공적으로 완료되었습니다!")
    else:
        print("/n❌ 일부 테스트가 실패했습니다. 위의 오류를 확인해주세요.")
    
    return success

def main():
    """메인 함수"""
    if len(sys.argv) > 1 and sys.argv[1] == "single":
        # 단일 테스트 클래스 실행
        if len(sys.argv) > 2:
            test_class_name = sys.argv[2]
            test_classes = {
                'verification': TestMigrationVerificationSystem,
                'rollback': TestRollbackFunctionality,
                'post': TestPostMigrationVerification,
                'reporter': TestMigrationStatusReporter,
                'integration': IntegrationTest
            }
            
            if test_class_name in test_classes:
                suite = unittest.TestLoader().loadTestsFromTestCase(test_classes[test_class_name])
                runner = unittest.TextTestRunner(verbosity=2)
                result = runner.run(suite)
                sys.exit(0 if result.wasSuccessful() else 1)
            else:
                print(f"알 수 없는 테스트 클래스: {test_class_name}")
                print("사용 가능한 클래스: verification, rollback, post, reporter, integration")
                sys.exit(1)
        else:
            print("테스트 클래스 이름을 지정해주세요.")
            sys.exit(1)
    else:
        # 전체 테스트 실행
        success = run_comprehensive_tests()
        sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()