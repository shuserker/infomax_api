{
  "file_path": "test_runner.sh",
  "file_type": ".sh",
  "content": "#!/bin/bash\n# ============================================================================\n# POSCO WatchHamster v2 Test Runner\n# 종합적인 테스트 프레임워크 실행 스크립트\n# ============================================================================\n\n# 스크립트 경로 설정\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\ncd \"$SCRIPT_DIR\"\n\n# 색상 정의\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nMAGENTA='\\033[0;35m'\nCYAN='\\033[0;36m'\nWHITE='\\033[1;37m'\nGRAY='\\033[0;37m'\nRESET='\\033[0m'\n\n# 함수 정의\nprint_header() {\n    echo -e \"${CYAN}============================================================================${RESET}\"\n    echo -e \"${CYAN}$1${RESET}\"\n    echo -e \"${CYAN}============================================================================${RESET}\"\n}\n\nprint_info() {\n    echo -e \"${BLUE}[INFO]${RESET} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${RESET} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${RESET} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${RESET} $1\"\n}\n\n# 환경 확인\ncheck_environment() {\n    print_info \"환경 확인 중...\"\n    \n    # Python3 확인\n    if ! command -v python3 &> /dev/null; then\n        print_error \"Python3가 설치되지 않았습니다.\"\n        return 1\n    fi\n    print_success \"Python3 발견: $(python3 --version)\"\n    \n    # 필요한 Python 모듈 확인\n    local required_modules=(\"psutil\" \"requests\")\n    for module in \"${required_modules[@]}\"; do\n        if python3 -c \"import $module\" 2>/dev/null; then\n            print_success \"Python 모듈 확인: $module\"\n        else\n            print_warning \"Python 모듈 누락: $module (일부 테스트가 제한될 수 있습니다)\"\n        fi\n    done\n    \n    # 테스트 스크립트 확인\n    local test_scripts=(\"test_v2_integration.py\" \"test_process_lifecycle.py\" \"test_control_center_integration.py\" \"run_comprehensive_tests.py\")\n    for script in \"${test_scripts[@]}\"; do\n        if [[ -f \"$script\" ]]; then\n            print_success \"테스트 스크립트 확인: $script\"\n        else\n            print_error \"테스트 스크립트 누락: $script\"\n            return 1\n        fi\n    done\n    \n    return 0\n}\n\n# 개별 테스트 실행\nrun_individual_test() {\n    local test_name=\"$1\"\n    local test_script=\"$2\"\n    \n    print_header \"🧪 $test_name\"\n    \n    if [[ ! -f \"$test_script\" ]]; then\n        print_error \"테스트 스크립트를 찾을 수 없습니다: $test_script\"\n        return 1\n    fi\n    \n    print_info \"테스트 실행 중: $test_script\"\n    \n    # 테스트 실행\n    if python3 \"$test_script\"; then\n        print_success \"$test_name 완료\"\n        return 0\n    else\n        print_error \"$test_name 실패\"\n        return 1\n    fi\n}\n\n# 종합 테스트 실행\nrun_comprehensive_tests() {\n    print_header \"🚀 POSCO WatchHamster v2 종합 테스트 실행\"\n    \n    if [[ -f \"run_comprehensive_tests.py\" ]]; then\n        python3 run_comprehensive_tests.py\n        return $?\n    else\n        print_error \"종합 테스트 스크립트를 찾을 수 없습니다: run_comprehensive_tests.py\"\n        return 1\n    fi\n}\n\n# 테스트 결과 확인\ncheck_test_results() {\n    print_header \"📊 테스트 결과 확인\"\n    \n    if [[ -f \"test_results.json\" ]]; then\n        print_success \"상세 테스트 결과 파일 발견: test_results.json\"\n        \n        # JSON 파일 크기 확인\n        local file_size=$(stat -f%z \"test_results.json\" 2>/dev/null || stat -c%s \"test_results.json\" 2>/dev/null)\n        print_info \"결과 파일 크기: $file_size bytes\"\n        \n        # 간단한 결과 요약 추출\n        if command -v jq &> /dev/null; then\n            print_info \"테스트 세션 정보:\"\n            jq -r '.session_start, .session_end, .total_duration' test_results.json 2>/dev/null || true\n        else\n            print_info \"jq가 설치되지 않아 JSON 파싱을 건너뜁니다.\"\n        fi\n    else\n        print_warning \"테스트 결과 파일이 없습니다. 테스트를 먼저 실행하세요.\"\n    fi\n}\n\n# 로그 정리\ncleanup_logs() {\n    print_header \"🧹 로그 정리\"\n    \n    local log_files=(\"test_results.json\" \"*.log\" \"*.status\")\n    local cleaned_count=0\n    \n    for pattern in \"${log_files[@]}\"; do\n        for file in $pattern; do\n            if [[ -f \"$file\" ]]; then\n                rm -f \"$file\"\n                print_info \"삭제됨: $file\"\n                ((cleaned_count++))\n            fi\n        done\n    done\n    \n    if [[ $cleaned_count -gt 0 ]]; then\n        print_success \"$cleaned_count개 파일이 정리되었습니다.\"\n    else\n        print_info \"정리할 파일이 없습니다.\"\n    fi\n}\n\n# 도움말 표시\nshow_help() {\n    print_header \"📖 POSCO WatchHamster v2 테스트 러너 도움말\"\n    \n    echo -e \"${WHITE}사용법:${RESET}\"\n    echo -e \"  $0 [옵션]\"\n    echo\n    echo -e \"${WHITE}옵션:${RESET}\"\n    echo -e \"  ${GREEN}all${RESET}           모든 테스트 실행 (기본값)\"\n    echo -e \"  ${GREEN}v2${RESET}            v2 통합 테스트만 실행\"\n    echo -e \"  ${GREEN}lifecycle${RESET}     프로세스 생명주기 테스트만 실행\"\n    echo -e \"  ${GREEN}control${RESET}       제어센터 통합 테스트만 실행\"\n    echo -e \"  ${GREEN}check${RESET}         환경 확인만 실행\"\n    echo -e \"  ${GREEN}results${RESET}       테스트 결과 확인\"\n    echo -e \"  ${GREEN}cleanup${RESET}       로그 파일 정리\"\n    echo -e \"  ${GREEN}help${RESET}          이 도움말 표시\"\n    echo\n    echo -e \"${WHITE}예시:${RESET}\"\n    echo -e \"  $0                # 모든 테스트 실행\"\n    echo -e \"  $0 v2             # v2 통합 테스트만 실행\"\n    echo -e \"  $0 check          # 환경 확인\"\n    echo -e \"  $0 cleanup        # 로그 정리\"\n}\n\n# 메인 로직\nmain() {\n    local command=\"${1:-all}\"\n    \n    case \"$command\" in\n        \"all\")\n            if check_environment; then\n                run_comprehensive_tests\n            else\n                print_error \"환경 확인 실패. 테스트를 실행할 수 없습니다.\"\n                exit 1\n            fi\n            ;;\n        \"v2\")\n            if check_environment; then\n                run_individual_test \"v2 통합 테스트\" \"test_v2_integration.py\"\n            else\n                exit 1\n            fi\n            ;;\n        \"lifecycle\")\n            if check_environment; then\n                run_individual_test \"프로세스 생명주기 테스트\" \"test_process_lifecycle.py\"\n            else\n                exit 1\n            fi\n            ;;\n        \"control\")\n            if check_environment; then\n                run_individual_test \"제어센터 통합 테스트\" \"test_control_center_integration.py\"\n            else\n                exit 1\n            fi\n            ;;\n        \"check\")\n            check_environment\n            ;;\n        \"results\")\n            check_test_results\n            ;;\n        \"cleanup\")\n            cleanup_logs\n            ;;\n        \"help\"|\"-h\"|\"--help\")\n            show_help\n            ;;\n        *)\n            print_error \"알 수 없는 명령: $command\"\n            echo\n            show_help\n            exit 1\n            ;;\n    esac\n}\n\n# 스크립트 실행\nmain \"$@\"",
  "commands": [
    "SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"",
    "cd \"$SCRIPT_DIR\"",
    "RESET='\\033[0m'",
    "echo -e \"${CYAN}============================================================================${RESET}\"",
    "echo -e \"${CYAN}$1${RESET}\"",
    "echo -e \"${CYAN}============================================================================${RESET}\"",
    "echo -e \"${BLUE}[INFO]${RESET} $1\"",
    "echo -e \"${GREEN}[SUCCESS]${RESET} $1\"",
    "echo -e \"${YELLOW}[WARNING]${RESET} $1\"",
    "echo -e \"${RED}[ERROR]${RESET} $1\"",
    "if ! command -v python3 &> /dev/null; then",
    "print_error \"Python3가 설치되지 않았습니다.\"",
    "print_success \"Python3 발견: $(python3 --version)\"",
    "if python3 -c \"import $module\" 2>/dev/null; then",
    "print_success \"Python 모듈 확인: $module\"",
    "print_warning \"Python 모듈 누락: $module (일부 테스트가 제한될 수 있습니다)\"",
    "if python3 \"$test_script\"; then",
    "python3 run_comprehensive_tests.py",
    "echo -e \"${WHITE}사용법:${RESET}\"",
    "echo -e \"  $0 [옵션]\"",
    "echo",
    "echo -e \"${WHITE}옵션:${RESET}\"",
    "echo -e \"  ${GREEN}all${RESET}           모든 테스트 실행 (기본값)\"",
    "echo -e \"  ${GREEN}v2${RESET}            v2 통합 테스트만 실행\"",
    "echo -e \"  ${GREEN}lifecycle${RESET}     프로세스 생명주기 테스트만 실행\"",
    "echo -e \"  ${GREEN}control${RESET}       제어센터 통합 테스트만 실행\"",
    "echo -e \"  ${GREEN}check${RESET}         환경 확인만 실행\"",
    "echo -e \"  ${GREEN}results${RESET}       테스트 결과 확인\"",
    "echo -e \"  ${GREEN}cleanup${RESET}       로그 파일 정리\"",
    "echo -e \"  ${GREEN}help${RESET}          이 도움말 표시\"",
    "echo",
    "echo -e \"${WHITE}예시:${RESET}\"",
    "echo -e \"  $0                # 모든 테스트 실행\"",
    "echo -e \"  $0 v2             # v2 통합 테스트만 실행\"",
    "echo -e \"  $0 check          # 환경 확인\"",
    "echo -e \"  $0 cleanup        # 로그 정리\"",
    "echo"
  ],
  "variables": {
    "SCRIPT_DIR": "\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"",
    "RED": "'\\033[0;31m'",
    "GREEN": "'\\033[0;32m'",
    "YELLOW": "'\\033[1;33m'",
    "BLUE": "'\\033[0;34m'",
    "MAGENTA": "'\\033[0;35m'",
    "CYAN": "'\\033[0;36m'",
    "WHITE": "'\\033[1;37m'",
    "GRAY": "'\\033[0;37m'",
    "RESET": "'\\033[0m'"
  }
}