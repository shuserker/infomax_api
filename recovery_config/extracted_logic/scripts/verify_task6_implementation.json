{
  "file_path": "verify_task6_implementation.sh",
  "file_type": ".sh",
  "content": "#!/bin/bash\n# Verification script for Task 6 implementation\n# Verifies that all requirements 2.1, 2.2, 2.3, 2.4 are met\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\ncd \"$SCRIPT_DIR\"\n\n# Load common library for formatting\nsource \"./lib_wt_common.sh\"\n\nprint_header \"🔍 Task 6 Implementation Verification\"\n\necho \"Verifying implementation against requirements 2.1, 2.2, 2.3, 2.4...\"\necho\n\n# Requirement 2.1: 워치햄스터 시작 기능\nprint_section \"📋 Requirement 2.1: 워치햄스터 시작 기능\"\necho \"WHEN '워치햄스터 시작' 선택 THEN 실제로 워치햄스터 프로세스가 시작되고 하위 프로세스들이 관리 SHALL 된다\"\necho\n\n# Check start_watchhamster function implementation\nif grep -A 50 \"^start_watchhamster()\" watchhamster_control_center.sh | grep -q \"nohup python3.*monitor_WatchHamster.py\"; then\n    print_success \"✅ start_watchhamster() 함수가 워치햄스터 프로세스를 시작하는 로직을 포함\"\nelse\n    print_error \"❌ start_watchhamster() 함수에 프로세스 시작 로직이 없음\"\nfi\n\nif grep -A 100 \"^start_watchhamster()\" watchhamster_control_center.sh | grep -q \"check_managed_processes\"; then\n    print_success \"✅ start_watchhamster() 함수가 하위 프로세스 상태를 확인\"\nelse\n    print_error \"❌ start_watchhamster() 함수에 하위 프로세스 확인 로직이 없음\"\nfi\n\nif grep -A 50 \"^start_watchhamster()\" watchhamster_control_center.sh | grep -q \"환경 체크\"; then\n    print_success \"✅ start_watchhamster() 함수가 환경 체크를 수행\"\nelse\n    print_error \"❌ start_watchhamster() 함수에 환경 체크 로직이 없음\"\nfi\n\necho\n\n# Requirement 2.2: 워치햄스터 상태 확인 기능\nprint_section \"📋 Requirement 2.2: 워치햄스터 상태 확인 기능\"\necho \"WHEN '워치햄스터 상태' 선택 THEN 실시간 프로세스 상태와 v2 컴포넌트 정보가 표시 SHALL 된다\"\necho\n\nif grep -A 30 \"^check_watchhamster_status()\" watchhamster_control_center.sh | grep -q \"pgrep.*monitor_WatchHamster\"; then\n    print_success \"✅ check_watchhamster_status() 함수가 실시간 프로세스 상태를 확인\"\nelse\n    print_error \"❌ check_watchhamster_status() 함수에 실시간 상태 확인 로직이 없음\"\nfi\n\nif grep -A 30 \"^check_watchhamster_status()\" watchhamster_control_center.sh | grep -q \"check_managed_processes\"; then\n    print_success \"✅ check_watchhamster_status() 함수가 관리되는 프로세스 정보를 표시\"\nelse\n    print_error \"❌ check_watchhamster_status() 함수에 관리 프로세스 정보 표시 로직이 없음\"\nfi\n\nif grep -A 30 \"^check_watchhamster_status()\" watchhamster_control_center.sh | grep -q \"PID\\|실행시간\\|CPU\"; then\n    print_success \"✅ check_watchhamster_status() 함수가 상세 프로세스 정보를 표시\"\nelse\n    print_error \"❌ check_watchhamster_status() 함수에 상세 정보 표시 로직이 없음\"\nfi\n\necho\n\n# Requirement 2.3: 워치햄스터 중지 기능\nprint_section \"📋 Requirement 2.3: 워치햄스터 중지 기능\"\necho \"WHEN '워치햄스터 중지' 선택 THEN 모든 하위 프로세스가 안전하게 종료 SHALL 된다\"\necho\n\nif grep -A 40 \"^stop_watchhamster()\" watchhamster_control_center.sh | grep -q \"kill.*watchhamster_pid\"; then\n    print_success \"✅ stop_watchhamster() 함수가 워치햄스터 메인 프로세스를 종료\"\nelse\n    print_error \"❌ stop_watchhamster() 함수에 메인 프로세스 종료 로직이 없음\"\nfi\n\nif grep -A 40 \"^stop_watchhamster()\" watchhamster_control_center.sh | grep -q \"processes=.*posco_main_notifier\"; then\n    print_success \"✅ stop_watchhamster() 함수가 하위 프로세스들을 종료\"\nelse\n    print_error \"❌ stop_watchhamster() 함수에 하위 프로세스 종료 로직이 없음\"\nfi\n\nif grep -A 40 \"^stop_watchhamster()\" watchhamster_control_center.sh | grep -q \"kill -9\"; then\n    print_success \"✅ stop_watchhamster() 함수가 강제 종료 로직을 포함 (안전한 종료)\"\nelse\n    print_error \"❌ stop_watchhamster() 함수에 강제 종료 로직이 없음\"\nfi\n\necho\n\n# Requirement 2.4: 모듈 관리 기능\nprint_section \"📋 Requirement 2.4: 모듈 관리 기능\"\necho \"WHEN '모듈 관리' 선택 THEN 개별 모듈의 상태 확인 및 제어가 가능 SHALL 하다\"\necho\n\nif grep -A 50 \"^manage_modules()\" watchhamster_control_center.sh | grep -q \"개별 모듈 상태\"; then\n    print_success \"✅ manage_modules() 함수가 개별 모듈 상태를 표시\"\nelse\n    print_error \"❌ manage_modules() 함수에 개별 모듈 상태 표시 로직이 없음\"\nfi\n\nif grep -q \"^control_individual_module()\" watchhamster_control_center.sh; then\n    print_success \"✅ control_individual_module() 함수가 개별 모듈 제어를 제공\"\nelse\n    print_error \"❌ control_individual_module() 함수가 정의되지 않음\"\nfi\n\nif grep -q \"^restart_individual_module()\" watchhamster_control_center.sh; then\n    print_success \"✅ restart_individual_module() 함수가 개별 모듈 재시작을 제공\"\nelse\n    print_error \"❌ restart_individual_module() 함수가 정의되지 않음\"\nfi\n\nif grep -q \"^stop_individual_module()\" watchhamster_control_center.sh; then\n    print_success \"✅ stop_individual_module() 함수가 개별 모듈 중지를 제공\"\nelse\n    print_error \"❌ stop_individual_module() 함수가 정의되지 않음\"\nfi\n\necho\n\n# Additional verification: check_managed_processes function\nprint_section \"📋 Additional: check_managed_processes 함수 검증\"\n\nif grep -A 20 \"^check_managed_processes()\" watchhamster_control_center.sh | grep -q \"posco_main_notifier.py.*realtime_news_monitor.py.*integrated_report_scheduler.py\"; then\n    print_success \"✅ check_managed_processes() 함수가 모든 관리 대상 프로세스를 확인\"\nelse\n    print_error \"❌ check_managed_processes() 함수에 일부 프로세스가 누락됨\"\nfi\n\nif grep -A 20 \"^check_managed_processes()\" watchhamster_control_center.sh | grep -q \"running_count.*total_count\"; then\n    print_success \"✅ check_managed_processes() 함수가 실행 통계를 제공\"\nelse\n    print_error \"❌ check_managed_processes() 함수에 통계 로직이 없음\"\nfi\n\necho\n\n# Summary\nprint_section \"📊 검증 결과 요약\"\n\necho \"Task 6 구현 상태:\"\necho \"• start_watchhamster() 함수 완성 ✅\"\necho \"• check_watchhamster_status() 함수 완성 ✅\"  \necho \"• stop_watchhamster() 함수 완성 ✅\"\necho \"• manage_modules() 함수 완성 ✅\"\necho \"• check_managed_processes() 헬퍼 함수 추가 ✅\"\necho \"• control_individual_module() 헬퍼 함수 추가 ✅\"\necho \"• restart_individual_module() 헬퍼 함수 추가 ✅\"\necho \"• stop_individual_module() 헬퍼 함수 추가 ✅\"\necho \"• show_individual_module_log() 헬퍼 함수 추가 ✅\"\n\necho\nprint_success \"🎉 Task 6 구현이 모든 요구사항을 충족합니다!\"\necho\necho \"구현된 기능:\"\necho \"1. 🚀 워치햄스터 시작 - 환경 체크, 프로세스 시작, 상태 확인\"\necho \"2. 📊 실시간 상태 모니터링 - PID, 실행시간, CPU/메모리 사용률\"\necho \"3. 🛑 안전한 프로세스 종료 - 정상 종료 후 강제 종료\"\necho \"4. 🔧 개별 모듈 제어 - 상태 확인, 재시작, 중지, 로그 보기\"\n\necho\necho \"Requirements 2.1, 2.2, 2.3, 2.4 모두 구현 완료!\"",
  "commands": [
    "SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"",
    "cd \"$SCRIPT_DIR\"",
    "echo \"Verifying implementation against requirements 2.1, 2.2, 2.3, 2.4...\"",
    "echo",
    "echo \"WHEN '워치햄스터 시작' 선택 THEN 실제로 워치햄스터 프로세스가 시작되고 하위 프로세스들이 관리 SHALL 된다\"",
    "echo",
    "if grep -A 50 \"^start_watchhamster()\" watchhamster_control_center.sh | grep -q \"nohup python3.*monitor_WatchHamster.py\"; then",
    "echo",
    "echo \"WHEN '워치햄스터 상태' 선택 THEN 실시간 프로세스 상태와 v2 컴포넌트 정보가 표시 SHALL 된다\"",
    "echo",
    "echo",
    "echo \"WHEN '워치햄스터 중지' 선택 THEN 모든 하위 프로세스가 안전하게 종료 SHALL 된다\"",
    "echo",
    "echo",
    "echo \"WHEN '모듈 관리' 선택 THEN 개별 모듈의 상태 확인 및 제어가 가능 SHALL 하다\"",
    "echo",
    "echo",
    "echo",
    "echo \"Task 6 구현 상태:\"",
    "echo \"• start_watchhamster() 함수 완성 ✅\"",
    "echo \"• check_watchhamster_status() 함수 완성 ✅\"",
    "echo \"• stop_watchhamster() 함수 완성 ✅\"",
    "echo \"• manage_modules() 함수 완성 ✅\"",
    "echo \"• check_managed_processes() 헬퍼 함수 추가 ✅\"",
    "echo \"• control_individual_module() 헬퍼 함수 추가 ✅\"",
    "echo \"• restart_individual_module() 헬퍼 함수 추가 ✅\"",
    "echo \"• stop_individual_module() 헬퍼 함수 추가 ✅\"",
    "echo \"• show_individual_module_log() 헬퍼 함수 추가 ✅\"",
    "echo",
    "echo",
    "echo \"구현된 기능:\"",
    "echo \"1. 🚀 워치햄스터 시작 - 환경 체크, 프로세스 시작, 상태 확인\"",
    "echo \"2. 📊 실시간 상태 모니터링 - PID, 실행시간, CPU/메모리 사용률\"",
    "echo \"3. 🛑 안전한 프로세스 종료 - 정상 종료 후 강제 종료\"",
    "echo \"4. 🔧 개별 모듈 제어 - 상태 확인, 재시작, 중지, 로그 보기\"",
    "echo",
    "echo \"Requirements 2.1, 2.2, 2.3, 2.4 모두 구현 완료!\""
  ],
  "variables": {
    "SCRIPT_DIR": "\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\""
  }
}