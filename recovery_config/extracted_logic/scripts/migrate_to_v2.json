{
  "file_path": "migrate_to_v2.sh",
  "file_type": ".sh",
  "content": "#!/bin/bash\n# POSCO 워치햄스터 v2.0 마이그레이션 스크립트\n\nset -e  # 오류 시 중단\n\necho \"🚀 POSCO 워치햄스터 v2.0 마이그레이션 시작\"\n\n# 색상 정의\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\nprint_step() {\n    echo -e \"${BLUE}[단계 $1]${NC} $2\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}✅ $1${NC}\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}⚠️ $1${NC}\"\n}\n\nprint_error() {\n    echo -e \"${RED}❌ $1${NC}\"\n}\n\n# 단계 1: 사전 확인\nprint_step \"1\" \"사전 확인 및 백업\"\n\n# 기존 워치햄스터 중지\nif pgrep -f \"monitor_WatchHamster.py\" > /dev/null; then\n    print_warning \"기존 워치햄스터 중지 중...\"\n    pkill -f \"monitor_WatchHamster.py\"\n    sleep 5\nfi\n\n# 백업 생성\nBACKUP_DIR=\"backup_$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\necho \"📦 기존 시스템 백업 중...\"\ncp -r Monitoring/ \"$BACKUP_DIR/\" 2>/dev/null || true\ncp watchhamster_control_center.sh \"$BACKUP_DIR/\" 2>/dev/null || true\ncp *.log \"$BACKUP_DIR/\" 2>/dev/null || true\ncp *.json \"$BACKUP_DIR/\" 2>/dev/null || true\n\nprint_success \"백업 완료: $BACKUP_DIR\"\n\n# 단계 2: v2 아키텍처 설치\nprint_step \"2\" \"v2 아키텍처 설치\"\n\n# v2 디렉토리 생성\nmkdir -p Monitoring/Posco_News_mini_v2/core\n\n# 핵심 컴포넌트 파일들이 존재하는지 확인\nif [ ! -f \"Monitoring/Posco_News_mini_v2/core/enhanced_process_manager.py\" ]; then\n    print_error \"v2 컴포넌트 파일들이 없습니다. 먼저 v2 파일들을 배치해주세요.\"\n    exit 1\nfi\n\nprint_success \"v2 아키텍처 파일 확인 완료\"# 단계 \n3: 설정 파일 마이그레이션\nprint_step \"3\" \"설정 파일 마이그레이션\"\n\n# 설정 변환 스크립트 실행\npython3 << 'EOF'\nimport json\nimport os\nfrom datetime import datetime\n\n# 기존 설정 로드 (있는 경우)\nconfig_data = {\n    \"metadata\": {\n        \"version\": \"1.0\",\n        \"last_updated\": datetime.now().isoformat(),\n        \"description\": \"POSCO WatchHamster Module Registry Configuration - Migrated from v1.x\"\n    },\n    \"modules\": {\n        \"posco_main_notifier\": {\n            \"script_path\": \"posco_main_notifier.py\",\n            \"description\": \"POSCO 메인 뉴스 알림 시스템\",\n            \"auto_start\": True,\n            \"restart_on_failure\": True,\n            \"max_restart_attempts\": 3,\n            \"health_check_interval\": 300,\n            \"dependencies\": [],\n            \"environment_vars\": {\n                \"PYTHONUNBUFFERED\": \"1\"\n            },\n            \"working_directory\": \"../Posco_News_mini\",\n            \"timeout\": 30,\n            \"priority\": 1\n        },\n        \"realtime_news_monitor\": {\n            \"script_path\": \"realtime_news_monitor.py\",\n            \"description\": \"실시간 뉴스 모니터링 시스템\",\n            \"auto_start\": True,\n            \"restart_on_failure\": True,\n            \"max_restart_attempts\": 3,\n            \"health_check_interval\": 300,\n            \"dependencies\": [\"posco_main_notifier\"],\n            \"environment_vars\": {\n                \"PYTHONUNBUFFERED\": \"1\"\n            },\n            \"working_directory\": \"../Posco_News_mini\",\n            \"timeout\": 30,\n            \"priority\": 2\n        },\n        \"integrated_report_scheduler\": {\n            \"script_path\": \"integrated_report_scheduler.py\",\n            \"description\": \"통합 리포트 스케줄러\",\n            \"auto_start\": True,\n            \"restart_on_failure\": True,\n            \"max_restart_attempts\": 3,\n            \"health_check_interval\": 300,\n            \"dependencies\": [\"posco_main_notifier\"],\n            \"environment_vars\": {\n                \"PYTHONUNBUFFERED\": \"1\"\n            },\n            \"working_directory\": \"../Posco_News_mini\",\n            \"timeout\": 30,\n            \"priority\": 3\n        }\n    }\n}\n\n# 선택적 모듈 확인 및 추가\noptional_modules = [\"historical_data_collector.py\"]\nfor module_file in optional_modules:\n    module_path = f\"Monitoring/Posco_News_mini/{module_file}\"\n    if os.path.exists(module_path):\n        module_name = module_file.replace('.py', '')\n        config_data[\"modules\"][module_name] = {\n            \"script_path\": module_file,\n            \"description\": f\"{module_name} - v1.x에서 마이그레이션\",\n            \"auto_start\": False,\n            \"restart_on_failure\": True,\n            \"max_restart_attempts\": 2,\n            \"health_check_interval\": 600,\n            \"dependencies\": [],\n            \"environment_vars\": {\n                \"PYTHONUNBUFFERED\": \"1\"\n            },\n            \"working_directory\": \"../Posco_News_mini\",\n            \"timeout\": 30,\n            \"priority\": 4\n        }\n        print(f\"✅ 선택적 모듈 추가: {module_name}\")\n\n# modules.json 생성\nwith open('Monitoring/Posco_News_mini_v2/modules.json', 'w', encoding='utf-8') as f:\n    json.dump(config_data, f, indent=2, ensure_ascii=False)\n\nprint(\"✅ modules.json 생성 완료\")\nEOF\n\nprint_success \"설정 파일 마이그레이션 완료\"#\n 단계 4: 워치햄스터 업데이트 확인\nprint_step \"4\" \"워치햄스터 업데이트 확인\"\n\n# 새로운 아키텍처 import 테스트\npython3 -c \"\nimport sys\nimport os\nsys.path.insert(0, 'Monitoring/Posco_News_mini')\n\ntry:\n    from monitor_WatchHamster import PoscoMonitorWatchHamster\n    wh = PoscoMonitorWatchHamster()\n    \n    # 새로운 컴포넌트 확인\n    if hasattr(wh, 'process_manager') and wh.process_manager:\n        print('✅ Enhanced ProcessManager 활성화')\n    else:\n        print('⚠️ Enhanced ProcessManager 비활성화 (기존 방식 사용)')\n        \n    if hasattr(wh, 'module_registry') and wh.module_registry:\n        print('✅ ModuleRegistry 활성화')\n    else:\n        print('⚠️ ModuleRegistry 비활성화')\n        \n    if hasattr(wh, 'notification_manager') and wh.notification_manager:\n        print('✅ NotificationManager 활성화')\n    else:\n        print('⚠️ NotificationManager 비활성화')\n        \n    print('🎉 워치햄스터 v2.0 초기화 성공')\n    \nexcept Exception as e:\n    print(f'❌ 워치햄스터 초기화 실패: {e}')\n    exit(1)\n\"\n\nprint_success \"워치햄스터 업데이트 확인 완료\"\n\n# 단계 5: 제어센터 업데이트 확인\nprint_step \"5\" \"제어센터 업데이트 확인\"\n\nif grep -q \"워치햄스터 통합 관리\" watchhamster_control_center.sh 2>/dev/null; then\n    print_success \"워치햄스터 제어센터 v2.0 메뉴 구조 확인\"\nelse\n    print_warning \"워치햄스터 제어센터가 v2.0으로 업데이트되지 않았습니다\"\nfi\n\n# 단계 6: 마이그레이션 검증\nprint_step \"6\" \"마이그레이션 검증\"\n\n# 테스트 시작\nprint_warning \"워치햄스터 테스트 시작 (10초간)...\"\ntimeout 10s python3 Monitoring/Posco_News_mini/monitor_WatchHamster.py &\nTEST_PID=$!\n\nsleep 5\n\nif kill -0 $TEST_PID 2>/dev/null; then\n    print_success \"워치햄스터 테스트 실행 성공\"\n    kill $TEST_PID 2>/dev/null\n    wait $TEST_PID 2>/dev/null || true\nelse\n    print_error \"워치햄스터 테스트 실행 실패\"\nfi\n\n# 단계 7: 마이그레이션 검증 실행\nprint_step \"7\" \"마이그레이션 검증 실행\"\n\necho \"🔍 마이그레이션 검증 시스템을 실행합니다...\"\nif [ -f \"run_migration_verification.sh\" ]; then\n    if ./run_migration_verification.sh --full; then\n        print_success \"마이그레이션 검증 완료\"\n        VERIFICATION_SUCCESS=true\n    else\n        print_warning \"마이그레이션 검증에서 일부 문제가 발견되었습니다\"\n        VERIFICATION_SUCCESS=false\n    fi\nelse\n    print_warning \"마이그레이션 검증 스크립트를 찾을 수 없습니다\"\n    VERIFICATION_SUCCESS=false\nfi\n\n# 단계 8: 마이그레이션 완료\nprint_step \"8\" \"마이그레이션 완료\"\n\necho \"\"\necho \"🎉 POSCO 워치햄스터 v2.0 마이그레이션 완료!\"\necho \"\"\necho \"📋 마이그레이션 결과:\"\necho \"  ✅ 기존 기능 100% 보존\"\necho \"  ✅ 새로운 아키텍처 적용\"\necho \"  ✅ 향상된 프로세스 관리\"\necho \"  ✅ 개선된 제어센터\"\n\nif [ \"$VERIFICATION_SUCCESS\" = true ]; then\n    echo \"  ✅ 마이그레이션 검증 통과\"\nelse\n    echo \"  ⚠️ 마이그레이션 검증 부분 실패 (상세 내용은 보고서 확인)\"\nfi\n\necho \"\"\necho \"🚀 다음 단계:\"\necho \"  1. ./watchhamster_control_center.sh 실행\"\necho \"  2. 메뉴 1번으로 워치햄스터 시작\"\necho \"  3. 메뉴 4번으로 상태 확인\"\n\nif [ \"$VERIFICATION_SUCCESS\" = false ]; then\n    echo \"  4. 검증 보고서 확인: migration_reports/ 디렉토리\"\n    echo \"  5. 필요시 롤백 고려: ./rollback_migration.sh\"\nfi\n\necho \"\"\necho \"📞 문제 발생 시:\"\necho \"  - 로그 확인: tail -f watchhamster.log\"\necho \"  - 검증 재실행: ./run_migration_verification.sh\"\necho \"  - 롤백: ./rollback_migration.sh\"\necho \"\"",
  "commands": [
    "set -e  # 오류 시 중단",
    "echo \"🚀 POSCO 워치햄스터 v2.0 마이그레이션 시작\"",
    "echo -e \"${BLUE}[단계 $1]${NC} $2\"",
    "echo -e \"${GREEN}✅ $1${NC}\"",
    "echo -e \"${YELLOW}⚠️ $1${NC}\"",
    "echo -e \"${RED}❌ $1${NC}\"",
    "echo \"📦 기존 시스템 백업 중...\"",
    "python3 << 'EOF'",
    "\"PYTHONUNBUFFERED\": \"1\"",
    "\"PYTHONUNBUFFERED\": \"1\"",
    "\"PYTHONUNBUFFERED\": \"1\"",
    "\"PYTHONUNBUFFERED\": \"1\"",
    "python3 -c \"",
    "timeout 10s python3 Monitoring/Posco_News_mini/monitor_WatchHamster.py &",
    "echo \"🔍 마이그레이션 검증 시스템을 실행합니다...\"",
    "echo \"\"",
    "echo \"🎉 POSCO 워치햄스터 v2.0 마이그레이션 완료!\"",
    "echo \"\"",
    "echo \"📋 마이그레이션 결과:\"",
    "echo \"  ✅ 기존 기능 100% 보존\"",
    "echo \"  ✅ 새로운 아키텍처 적용\"",
    "echo \"  ✅ 향상된 프로세스 관리\"",
    "echo \"  ✅ 개선된 제어센터\"",
    "echo \"  ✅ 마이그레이션 검증 통과\"",
    "echo \"  ⚠️ 마이그레이션 검증 부분 실패 (상세 내용은 보고서 확인)\"",
    "echo \"\"",
    "echo \"🚀 다음 단계:\"",
    "echo \"  1. ./watchhamster_control_center.sh 실행\"",
    "echo \"  2. 메뉴 1번으로 워치햄스터 시작\"",
    "echo \"  3. 메뉴 4번으로 상태 확인\"",
    "echo \"  4. 검증 보고서 확인: migration_reports/ 디렉토리\"",
    "echo \"  5. 필요시 롤백 고려: ./rollback_migration.sh\"",
    "echo \"\"",
    "echo \"📞 문제 발생 시:\"",
    "echo \"  - 로그 확인: tail -f watchhamster.log\"",
    "echo \"  - 검증 재실행: ./run_migration_verification.sh\"",
    "echo \"  - 롤백: ./rollback_migration.sh\"",
    "echo \"\""
  ],
  "variables": {
    "RED": "'\\033[0;31m'",
    "GREEN": "'\\033[0;32m'",
    "YELLOW": "'\\033[1;33m'",
    "BLUE": "'\\033[0;34m'",
    "NC": "'\\033[0m' # No Color",
    "BACKUP_DIR": "\"backup_$(date +%Y%m%d_%H%M%S)\"",
    "config_data": "{",
    "optional_modules": "[\"historical_data_collector.py\"]",
    "module_path": "f\"Monitoring/Posco_News_mini/{module_file}\"",
    "module_name": "module_file.replace('.py', '')",
    "wh": "PoscoMonitorWatchHamster()",
    "TEST_PID": "$!"
  }
}