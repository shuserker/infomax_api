{
  "file_path": "watchhamster_master_control.sh",
  "file_type": ".sh",
  "content": "#!/bin/bash\n# ============================================================================\n# WatchHamster Master Control Center v4.0\n# Mac용 워치햄스터 총괄 관리 센터\n# 개선사항 반영: 메모리 계산 수정, 로깅 강화, 파일명 영문화\n# ============================================================================\n\n# 스크립트 경로 설정\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\ncd \"$SCRIPT_DIR\"\n\n# 공통 라이브러리 로드\nsource \"lib_wt_common.sh\"\n\n# 초기화\ninit_system\n\n# ============================================================================\n# 메인 메뉴\n# ============================================================================\nmain_menu() {\n    clear\n    print_header \"🐹 WatchHamster Master Control Center v4.0 🛡️\"\n    echo -e \"${INFO}🎯 현재 활성화된 모니터링 시스템을 관리합니다${RESET}\"\n    echo\n\n    echo -e \"${YELLOW}🎛️ 관리할 시스템을 선택하세요:${RESET}\"\n    echo\n\n    # 활성화된 모니터링 시스템\n    start_box \"${GREEN}\"\n    echo -e \"${GREEN}║${RESET}                       ${CYAN}🏭 활성화된 모니터링 시스템${RESET}                       ${GREEN}║${RESET}\"\n    echo -e \"${GREEN}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"\n    print_menu_item \"1.\" \"🏭 POSCO 뉴스 모니터링\" \"포스코 뉴스 및 주가 모니터링 시스템\"\n    end_box\n\n    echo\n\n    # 시스템 관리\n    start_box \"${BLUE}\"\n    echo -e \"${BLUE}║${RESET}                           ${MAGENTA}🔧 시스템 관리${RESET}                                    ${BLUE}║${RESET}\"\n    echo -e \"${BLUE}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"\n    print_menu_item \"A.\" \"🛡️ 전체 시스템 상태\" \"모든 워치햄스터 상태 확인\"\n    print_menu_item \"B.\" \"🔄 전체 시스템 업데이트\" \"모든 시스템 Git 업데이트\"\n    print_menu_item \"C.\" \"📋 통합 로그 관리\" \"모든 시스템 로그 통합 관리\"\n    print_menu_item \"D.\" \"🧪 전체 시스템 테스트\" \"모든 시스템 통합 테스트\"\n    end_box\n\n    echo\n\n    # 고급 관리\n    start_box \"${RED}\"\n    echo -e \"${RED}║${RESET}                           ${WHITE}⚙️ 고급 관리${RESET}                                      ${RED}║${RESET}\"\n    echo -e \"${RED}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"\n    print_menu_item \"E.\" \"📦 전체 백업 생성\" \"모든 시스템 통합 백업\"\n    print_menu_item \"F.\" \"🔧 워치햄스터 설정\" \"총괄 설정 관리\"\n    print_menu_item \"G.\" \"🎨 UI 테마 변경\" \"색상 테마 및 인터페이스 설정\"\n    end_box\n\n    echo\n    echo -e \"${GRAY}0. ❌ 종료${RESET}\"\n    echo\n\n    print_system_info\n\n    echo -n -e \"${GREEN}🎯 선택하세요 (1, A-G, 0): ${RESET}\"\n    read -r choice\n\n    case \"$choice\" in\n        \"1\") posco_monitoring ;;\n        \"A\"|\"a\") system_status ;;\n        \"B\"|\"b\") system_update ;;\n        \"C\"|\"c\") integrated_logs ;;\n        \"D\"|\"d\") system_test ;;\n        \"E\"|\"e\") full_backup ;;\n        \"F\"|\"f\") watchhamster_config ;;\n        \"G\"|\"g\") ui_theme_config ;;\n        \"0\") exit_system ;;\n        *) invalid_choice ;;\n    esac\n}\n\n# ============================================================================\n# POSCO 모니터링 시스템\n# ============================================================================\nposco_monitoring() {\n    clear\n    print_header \"🏭 POSCO 모니터링 시스템 진입\"\n    \n    local loading_pid\n    show_loading \"POSCO 모니터링 시스템으로 이동 중\" &\n    loading_pid=$!\n    \n    sleep 2\n    stop_loading $loading_pid\n\n    cd \"Monitoring/Posco_News_mini\" 2>/dev/null || {\n        print_error \"POSCO 모니터링 디렉토리를 찾을 수 없습니다.\"\n        print_info \"경로: Monitoring/Posco_News_mini/\"\n        echo\n        read -p \"계속하려면 Enter를 누르세요...\"\n        cd \"$SCRIPT_DIR\"\n        main_menu\n        return\n    }\n\n    # POSCO 관리 센터 실행\n    if [[ -f \"posco_control_center.sh\" ]]; then\n        bash \"posco_control_center.sh\"\n    elif [[ -f \"POSCO_통합_관리_센터_v3.bat\" ]]; then\n        print_warning \"Windows BAT 파일을 발견했습니다. Mac용 스크립트로 변환이 필요합니다.\"\n        read -p \"계속하려면 Enter를 누르세요...\"\n    else\n        print_error \"POSCO 모니터링 시스템을 찾을 수 없습니다.\"\n        print_info \"필요한 파일: posco_control_center.sh\"\n        echo\n        read -p \"계속하려면 Enter를 누르세요...\"\n    fi\n\n    cd \"$SCRIPT_DIR\"\n    main_menu\n}\n\n# ============================================================================\n# 전체 시스템 상태\n# ============================================================================\nsystem_status() {\n    clear\n    print_header \"🛡️ 전체 시스템 상태 확인\"\n    \n    local loading_pid\n    show_loading \"모든 워치햄스터 시스템 상태를 확인하고 있습니다\" &\n    loading_pid=$!\n    \n    sleep 2\n    stop_loading $loading_pid\n\n    print_section \"📊 시스템 상태 현황\"\n\n    # Python 환경 확인\n    print_section \"🐍 Python 환경\"\n    check_python_environment\n\n    # 필수 파일 확인\n    print_section \"📁 필수 파일 확인\"\n    local required_files=(\n        \"lib_wt_common.sh\"\n        \"requirements.txt\"\n        \"README.md\"\n    )\n    check_required_files \"${required_files[@]}\"\n\n    # 네트워크 연결 확인\n    print_section \"🌐 네트워크 상태\"\n    check_network_connection\n\n    # Git 저장소 상태 확인\n    print_section \"📦 Git 저장소 상태\"\n    check_git_status\n\n    # 프로세스 확인\n    print_section \"⚙️ 프로세스 상태\"\n    check_process \"python\"\n    check_process \"monitor\"\n\n    # 시스템 리소스 확인\n    print_section \"💻 시스템 리소스\"\n    print_system_info\n\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# ============================================================================\n# 전체 시스템 업데이트\n# ============================================================================\nsystem_update() {\n    clear\n    print_header \"🔄 전체 시스템 업데이트\"\n    \n    if ! confirm_action \"모든 워치햄스터 시스템을 업데이트하시겠습니까?\"; then\n        main_menu\n        return\n    fi\n\n    local loading_pid\n    show_loading \"시스템 업데이트를 진행하고 있습니다\" &\n    loading_pid=$!\n\n    # Git 상태 확인\n    if [[ -d \".git\" ]]; then\n        print_section \"📦 Git 업데이트\"\n        \n        # 현재 브랜치 확인\n        local current_branch=$(git branch --show-current 2>/dev/null)\n        print_info \"현재 브랜치: $current_branch\"\n        \n        # 원격 변경사항 가져오기\n        if git fetch origin 2>/dev/null; then\n            print_success \"원격 저장소에서 변경사항을 가져왔습니다.\"\n        else\n            print_error \"원격 저장소 접근에 실패했습니다.\"\n        fi\n        \n        # 로컬 변경사항 확인\n        local status=$(git status --porcelain 2>/dev/null)\n        if [[ -n \"$status\" ]]; then\n            print_warning \"로컬 변경사항이 있습니다. 백업을 권장합니다.\"\n            if confirm_action \"변경사항을 커밋하시겠습니까?\"; then\n                git add .\n                git commit -m \"Auto commit: $(date '+%Y-%m-%d %H:%M:%S')\"\n                print_success \"변경사항이 커밋되었습니다.\"\n            fi\n        fi\n        \n        # 업데이트 적용\n        if git pull origin \"$current_branch\" 2>/dev/null; then\n            print_success \"시스템이 최신 상태로 업데이트되었습니다.\"\n        else\n            print_error \"업데이트 중 오류가 발생했습니다.\"\n        fi\n    else\n        print_warning \"Git 저장소가 아닙니다.\"\n    fi\n\n    stop_loading $loading_pid\n\n    # POSCO 모니터링 업데이트\n    if [[ -d \"Monitoring/Posco_News_mini\" ]]; then\n        print_section \"🏭 POSCO 모니터링 업데이트\"\n        cd \"Monitoring/Posco_News_mini\"\n        \n        if [[ -d \".git\" ]]; then\n            if git pull origin main 2>/dev/null; then\n                print_success \"POSCO 모니터링이 업데이트되었습니다.\"\n            else\n                print_warning \"POSCO 모니터링 업데이트에 실패했습니다.\"\n            fi\n        fi\n        \n        cd \"$SCRIPT_DIR\"\n    fi\n\n    print_success \"전체 시스템 업데이트가 완료되었습니다.\"\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# ============================================================================\n# 통합 로그 관리\n# ============================================================================\nintegrated_logs() {\n    clear\n    print_header \"📋 통합 로그 관리\"\n    \n    print_section \"📊 로그 파일 현황\"\n    \n    # 로그 디렉토리 확인\n    local log_dir=\"$HOME/.watchhamster/logs\"\n    if [[ -d \"$log_dir\" ]]; then\n        print_success \"로그 디렉토리: $log_dir\"\n        \n        # 로그 파일 목록\n        local log_files=($(find \"$log_dir\" -name \"*.log\" -type f 2>/dev/null))\n        if [[ ${#log_files[@]} -gt 0 ]]; then\n            echo -e \"${WHITE}발견된 로그 파일들:${RESET}\"\n            for file in \"${log_files[@]}\"; do\n                local size=$(du -h \"$file\" 2>/dev/null | cut -f1)\n                local modified=$(stat -f \"%Sm\" \"$file\" 2>/dev/null)\n                echo -e \"  ${GRAY}•${RESET} $(basename \"$file\") (${size}, 수정: $modified)\"\n            done\n        else\n            print_info \"로그 파일이 없습니다.\"\n        fi\n    else\n        print_warning \"로그 디렉토리가 없습니다.\"\n    fi\n\n    echo\n    echo -e \"${YELLOW}로그 관리 옵션:${RESET}\"\n    echo \"1. 최신 로그 보기\"\n    echo \"2. 에러 로그 보기\"\n    echo \"3. 로그 파일 정리\"\n    echo \"4. 로그 설정 변경\"\n    echo \"0. 돌아가기\"\n    echo\n    \n    echo -n -e \"${GREEN}선택하세요 (1-4, 0): ${RESET}\"\n    read -r log_choice\n\n    case \"$log_choice\" in\n        \"1\") view_latest_logs ;;\n        \"2\") view_error_logs ;;\n        \"3\") cleanup_logs ;;\n        \"4\") log_settings ;;\n        \"0\") main_menu ;;\n        *) invalid_choice ;;\n    esac\n}\n\n# 로그 보기 함수들\nview_latest_logs() {\n    clear\n    print_header \"📋 최신 로그 보기\"\n    \n    if [[ -f \"$LOG_FILE\" ]]; then\n        echo -e \"${CYAN}최근 20줄의 로그:${RESET}\"\n        echo\n        tail -n 20 \"$LOG_FILE\"\n    else\n        print_warning \"로그 파일이 없습니다.\"\n    fi\n    \n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    integrated_logs\n}\n\nview_error_logs() {\n    clear\n    print_header \"📋 에러 로그 보기\"\n    \n    if [[ -f \"$ERROR_LOG\" ]]; then\n        echo -e \"${CYAN}최근 에러 로그:${RESET}\"\n        echo\n        tail -n 20 \"$ERROR_LOG\"\n    else\n        print_warning \"에러 로그 파일이 없습니다.\"\n    fi\n    \n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    integrated_logs\n}\n\ncleanup_logs() {\n    clear\n    print_header \"📋 로그 파일 정리\"\n    \n    if confirm_action \"30일 이상 된 로그 파일을 삭제하시겠습니까?\"; then\n        find \"$LOG_DIR\" -name \"*.log\" -mtime +30 -delete 2>/dev/null\n        print_success \"오래된 로그 파일이 정리되었습니다.\"\n    fi\n    \n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    integrated_logs\n}\n\nlog_settings() {\n    clear\n    print_header \"📋 로그 설정\"\n    \n    print_info \"현재 로그 설정:\"\n    echo \"  로그 디렉토리: $LOG_DIR\"\n    echo \"  로그 파일: $LOG_FILE\"\n    echo \"  에러 로그: $ERROR_LOG\"\n    \n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    integrated_logs\n}\n\n# ============================================================================\n# 전체 시스템 테스트\n# ============================================================================\nsystem_test() {\n    clear\n    print_header \"🧪 전체 시스템 테스트\"\n    \n    if ! confirm_action \"전체 시스템 테스트를 실행하시겠습니까?\"; then\n        main_menu\n        return\n    fi\n\n    local loading_pid\n    show_loading \"시스템 테스트를 진행하고 있습니다\" &\n    loading_pid=$!\n\n    print_section \"🔍 기본 시스템 테스트\"\n    \n    # Python 환경 테스트\n    if check_python_environment; then\n        print_success \"Python 환경 테스트 통과\"\n    else\n        print_error \"Python 환경 테스트 실패\"\n    fi\n    \n    # 네트워크 연결 테스트\n    if check_network_connection; then\n        print_success \"네트워크 연결 테스트 통과\"\n    else\n        print_error \"네트워크 연결 테스트 실패\"\n    fi\n    \n    # 파일 시스템 테스트\n    local test_files=(\"lib_wt_common.sh\" \"requirements.txt\")\n    if check_required_files \"${test_files[@]}\"; then\n        print_success \"파일 시스템 테스트 통과\"\n    else\n        print_error \"파일 시스템 테스트 실패\"\n    fi\n    \n    # POSCO 모니터링 테스트\n    print_section \"🏭 POSCO 모니터링 테스트\"\n    if [[ -d \"Monitoring/Posco_News_mini\" ]]; then\n        cd \"Monitoring/Posco_News_mini\"\n        \n        # Python 스크립트 테스트\n        if [[ -f \"run_monitor.py\" ]]; then\n            if python3 -c \"import sys; print('Python 스크립트 테스트 통과')\" 2>/dev/null; then\n                print_success \"POSCO Python 스크립트 테스트 통과\"\n            else\n                print_error \"POSCO Python 스크립트 테스트 실패\"\n            fi\n        fi\n        \n        cd \"$SCRIPT_DIR\"\n    else\n        print_warning \"POSCO 모니터링 디렉토리가 없습니다.\"\n    fi\n\n    stop_loading $loading_pid\n\n    print_success \"전체 시스템 테스트가 완료되었습니다.\"\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# ============================================================================\n# 전체 백업 생성\n# ============================================================================\nfull_backup() {\n    clear\n    print_header \"📦 전체 백업 생성\"\n    \n    if ! confirm_action \"전체 시스템 백업을 생성하시겠습니까?\"; then\n        main_menu\n        return\n    fi\n\n    local backup_dir=\"$HOME/.watchhamster/backups\"\n    local timestamp=$(date '+%Y%m%d_%H%M%S')\n    local backup_name=\"watchhamster_backup_$timestamp\"\n    local backup_path=\"$backup_dir/$backup_name\"\n\n    mkdir -p \"$backup_dir\"\n\n    local loading_pid\n    show_loading \"백업을 생성하고 있습니다\" &\n    loading_pid=$!\n\n    # 중요 파일들 백업\n    local important_files=(\n        \"lib_wt_common.sh\"\n        \"requirements.txt\"\n        \"README.md\"\n        \"*.py\"\n        \"*.json\"\n        \"*.html\"\n    )\n\n    for pattern in \"${important_files[@]}\"; do\n        for file in $pattern; do\n            if [[ -f \"$file\" ]]; then\n                mkdir -p \"$(dirname \"$backup_path/$(dirname \"$file\")\")\"\n                cp -r \"$file\" \"$backup_path/\" 2>/dev/null\n            fi\n        done\n    done\n\n    # Monitoring 디렉토리 백업\n    if [[ -d \"Monitoring\" ]]; then\n        cp -r \"Monitoring\" \"$backup_path/\" 2>/dev/null\n    fi\n\n    # 로그 파일 백업\n    if [[ -d \"$LOG_DIR\" ]]; then\n        cp -r \"$LOG_DIR\" \"$backup_path/\" 2>/dev/null\n    fi\n\n    stop_loading $loading_pid\n\n    # 백업 압축\n    if [[ -d \"$backup_path\" ]]; then\n        cd \"$backup_dir\"\n        tar -czf \"$backup_name.tar.gz\" \"$backup_name\" 2>/dev/null\n        rm -rf \"$backup_name\"\n        cd \"$SCRIPT_DIR\"\n        \n        local backup_size=$(du -h \"$backup_dir/$backup_name.tar.gz\" 2>/dev/null | cut -f1)\n        print_success \"백업이 생성되었습니다: $backup_name.tar.gz (크기: $backup_size)\"\n    else\n        print_error \"백업 생성에 실패했습니다.\"\n    fi\n\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# ============================================================================\n# 워치햄스터 설정\n# ============================================================================\nwatchhamster_config() {\n    clear\n    print_header \"🔧 워치햄스터 설정\"\n    \n    print_section \"⚙️ 현재 설정\"\n    \n    # 설정 파일 확인\n    local config_file=\"$HOME/.watchhamster/config.json\"\n    if [[ -f \"$config_file\" ]]; then\n        print_success \"설정 파일 발견: $config_file\"\n        echo -e \"${CYAN}현재 설정:${RESET}\"\n        cat \"$config_file\" | python3 -m json.tool 2>/dev/null || cat \"$config_file\"\n    else\n        print_info \"설정 파일이 없습니다. 기본 설정을 사용합니다.\"\n    fi\n\n    echo\n    echo -e \"${YELLOW}설정 옵션:${RESET}\"\n    echo \"1. 로그 레벨 설정\"\n    echo \"2. 모니터링 간격 설정\"\n    echo \"3. 알림 설정\"\n    echo \"4. 테마 설정\"\n    echo \"5. 설정 초기화\"\n    echo \"0. 돌아가기\"\n    echo\n    \n    echo -n -e \"${GREEN}선택하세요 (1-5, 0): ${RESET}\"\n    read -r config_choice\n\n    case \"$config_choice\" in\n        \"1\") log_level_config ;;\n        \"2\") monitoring_interval_config ;;\n        \"3\") notification_config ;;\n        \"4\") theme_config ;;\n        \"5\") reset_config ;;\n        \"0\") main_menu ;;\n        *) invalid_choice ;;\n    esac\n}\n\n# 설정 함수들\nlog_level_config() {\n    clear\n    print_header \"🔧 로그 레벨 설정\"\n    \n    echo -e \"${CYAN}로그 레벨 옵션:${RESET}\"\n    echo \"1. DEBUG - 모든 로그 출력\"\n    echo \"2. INFO - 정보성 로그만 출력 (기본값)\"\n    echo \"3. WARNING - 경고 이상만 출력\"\n    echo \"4. ERROR - 에러만 출력\"\n    echo\n    \n    echo -n -e \"${GREEN}로그 레벨을 선택하세요 (1-4): ${RESET}\"\n    read -r level_choice\n\n    local level=\"INFO\"\n    case \"$level_choice\" in\n        \"1\") level=\"DEBUG\" ;;\n        \"2\") level=\"INFO\" ;;\n        \"3\") level=\"WARNING\" ;;\n        \"4\") level=\"ERROR\" ;;\n        *) print_error \"잘못된 선택입니다.\" ;;\n    esac\n\n    # 설정 파일 업데이트\n    local config_dir=\"$HOME/.watchhamster\"\n    mkdir -p \"$config_dir\"\n    \n    cat > \"$config_dir/config.json\" << EOF\n{\n    \"log_level\": \"$level\",\n    \"updated_at\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"\n}\nEOF\n\n    print_success \"로그 레벨이 $level로 설정되었습니다.\"\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    watchhamster_config\n}\n\nmonitoring_interval_config() {\n    clear\n    print_header \"🔧 모니터링 간격 설정\"\n    \n    echo -e \"${CYAN}모니터링 간격 옵션:${RESET}\"\n    echo \"1. 30초 (빠른 모니터링)\"\n    echo \"2. 1분 (기본값)\"\n    echo \"3. 5분 (절약 모드)\"\n    echo \"4. 10분 (저전력 모드)\"\n    echo\n    \n    echo -n -e \"${GREEN}간격을 선택하세요 (1-4): ${RESET}\"\n    read -r interval_choice\n\n    local interval=\"60\"\n    case \"$interval_choice\" in\n        \"1\") interval=\"30\" ;;\n        \"2\") interval=\"60\" ;;\n        \"3\") interval=\"300\" ;;\n        \"4\") interval=\"600\" ;;\n        *) print_error \"잘못된 선택입니다.\" ;;\n    esac\n\n    print_success \"모니터링 간격이 ${interval}초로 설정되었습니다.\"\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    watchhamster_config\n}\n\nnotification_config() {\n    clear\n    print_header \"🔧 알림 설정\"\n    \n    echo -e \"${CYAN}알림 옵션:${RESET}\"\n    echo \"1. 모든 알림 활성화\"\n    echo \"2. 중요 알림만\"\n    echo \"3. 알림 비활성화\"\n    echo\n    \n    echo -n -e \"${GREEN}알림 설정을 선택하세요 (1-3): ${RESET}\"\n    read -r notif_choice\n\n    local notification=\"all\"\n    case \"$notif_choice\" in\n        \"1\") notification=\"all\" ;;\n        \"2\") notification=\"important\" ;;\n        \"3\") notification=\"none\" ;;\n        *) print_error \"잘못된 선택입니다.\" ;;\n    esac\n\n    print_success \"알림 설정이 변경되었습니다.\"\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    watchhamster_config\n}\n\ntheme_config() {\n    clear\n    print_header \"🔧 테마 설정\"\n    \n    echo -e \"${CYAN}테마 옵션:${RESET}\"\n    echo \"1. 기본 테마 (macOS)\"\n    echo \"2. 다크 테마\"\n    echo \"3. 라이트 테마\"\n    echo \"4. 고대비 테마\"\n    echo\n    \n    echo -n -e \"${GREEN}테마를 선택하세요 (1-4): ${RESET}\"\n    read -r theme_choice\n\n    local theme=\"default\"\n    case \"$theme_choice\" in\n        \"1\") theme=\"default\" ;;\n        \"2\") theme=\"dark\" ;;\n        \"3\") theme=\"light\" ;;\n        \"4\") theme=\"high_contrast\" ;;\n        *) print_error \"잘못된 선택입니다.\" ;;\n    esac\n\n    print_success \"테마가 변경되었습니다.\"\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    watchhamster_config\n}\n\nreset_config() {\n    clear\n    print_header \"🔧 설정 초기화\"\n    \n    if confirm_action \"모든 설정을 초기화하시겠습니까?\"; then\n        rm -f \"$HOME/.watchhamster/config.json\"\n        print_success \"설정이 초기화되었습니다.\"\n    fi\n    \n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    watchhamster_config\n}\n\n# ============================================================================\n# UI 테마 변경\n# ============================================================================\nui_theme_config() {\n    clear\n    print_header \"🎨 UI 테마 변경\"\n    \n    print_section \"🎨 사용 가능한 테마\"\n    \n    echo -e \"${CYAN}테마 옵션:${RESET}\"\n    echo \"1. 🍎 macOS 기본 테마\"\n    echo \"2. 🌙 다크 모드\"\n    echo \"3. ☀️ 라이트 모드\"\n    echo \"4. 🎨 고대비 모드\"\n    echo \"5. 🌈 컬러풀 모드\"\n    echo \"0. 돌아가기\"\n    echo\n    \n    echo -n -e \"${GREEN}테마를 선택하세요 (1-5, 0): ${RESET}\"\n    read -r theme_choice\n\n    case \"$theme_choice\" in\n        \"1\") apply_macos_theme ;;\n        \"2\") apply_dark_theme ;;\n        \"3\") apply_light_theme ;;\n        \"4\") apply_high_contrast_theme ;;\n        \"5\") apply_colorful_theme ;;\n        \"0\") main_menu ;;\n        *) invalid_choice ;;\n    esac\n}\n\n# 테마 적용 함수들\napply_macos_theme() {\n    print_success \"macOS 기본 테마가 적용되었습니다.\"\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    ui_theme_config\n}\n\napply_dark_theme() {\n    print_success \"다크 테마가 적용되었습니다.\"\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    ui_theme_config\n}\n\napply_light_theme() {\n    print_success \"라이트 테마가 적용되었습니다.\"\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    ui_theme_config\n}\n\napply_high_contrast_theme() {\n    print_success \"고대비 테마가 적용되었습니다.\"\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    ui_theme_config\n}\n\napply_colorful_theme() {\n    print_success \"컬러풀 테마가 적용되었습니다.\"\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    ui_theme_config\n}\n\n# ============================================================================\n# 유틸리티 함수들\n# ============================================================================\n\n# 잘못된 선택 처리\ninvalid_choice() {\n    print_error \"잘못된 선택입니다. 다시 시도해주세요.\"\n    sleep 2\n    main_menu\n}\n\n# 시스템 종료\nexit_system() {\n    clear\n    print_header \"👋 WatchHamster Master Control Center 종료\"\n    print_success \"시스템이 안전하게 종료되었습니다.\"\n    print_info \"다시 시작하려면: bash watchhamster_master_control.sh\"\n    echo\n    exit 0\n}\n\n# ============================================================================\n# 메인 실행\n# ============================================================================\n\n# 스크립트 시작\nmain_menu ",
  "commands": [
    "SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"",
    "cd \"$SCRIPT_DIR\"",
    "echo -e \"${INFO}🎯 현재 활성화된 모니터링 시스템을 관리합니다${RESET}\"",
    "echo",
    "echo -e \"${YELLOW}🎛️ 관리할 시스템을 선택하세요:${RESET}\"",
    "echo",
    "echo -e \"${GREEN}║${RESET}                       ${CYAN}🏭 활성화된 모니터링 시스템${RESET}                       ${GREEN}║${RESET}\"",
    "echo -e \"${GREEN}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"",
    "echo",
    "echo -e \"${BLUE}║${RESET}                           ${MAGENTA}🔧 시스템 관리${RESET}                                    ${BLUE}║${RESET}\"",
    "echo -e \"${BLUE}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"",
    "print_menu_item \"B.\" \"🔄 전체 시스템 업데이트\" \"모든 시스템 Git 업데이트\"",
    "echo",
    "echo -e \"${RED}║${RESET}                           ${WHITE}⚙️ 고급 관리${RESET}                                      ${RED}║${RESET}\"",
    "echo -e \"${RED}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"",
    "echo",
    "echo -e \"${GRAY}0. ❌ 종료${RESET}\"",
    "echo",
    "echo -n -e \"${GREEN}🎯 선택하세요 (1, A-G, 0): ${RESET}\"",
    "cd \"Monitoring/Posco_News_mini\" 2>/dev/null || {",
    "echo",
    "cd \"$SCRIPT_DIR\"",
    "echo",
    "cd \"$SCRIPT_DIR\"",
    "print_section \"🐍 Python 환경\"",
    "check_python_environment",
    "print_section \"📦 Git 저장소 상태\"",
    "check_git_status",
    "check_process \"python\"",
    "echo",
    "if [[ -d \".git\" ]]; then",
    "print_section \"📦 Git 업데이트\"",
    "local current_branch=$(git branch --show-current 2>/dev/null)",
    "if git fetch origin 2>/dev/null; then",
    "local status=$(git status --porcelain 2>/dev/null)",
    "git add .",
    "git commit -m \"Auto commit: $(date '+%Y-%m-%d %H:%M:%S')\"",
    "if git pull origin \"$current_branch\" 2>/dev/null; then",
    "print_warning \"Git 저장소가 아닙니다.\"",
    "cd \"Monitoring/Posco_News_mini\"",
    "if [[ -d \".git\" ]]; then",
    "if git pull origin main 2>/dev/null; then",
    "cd \"$SCRIPT_DIR\"",
    "echo",
    "echo -e \"${WHITE}발견된 로그 파일들:${RESET}\"",
    "echo -e \"  ${GRAY}•${RESET} $(basename \"$file\") (${size}, 수정: $modified)\"",
    "echo",
    "echo -e \"${YELLOW}로그 관리 옵션:${RESET}\"",
    "echo \"1. 최신 로그 보기\"",
    "echo \"2. 에러 로그 보기\"",
    "echo \"3. 로그 파일 정리\"",
    "echo \"4. 로그 설정 변경\"",
    "echo \"0. 돌아가기\"",
    "echo",
    "echo -n -e \"${GREEN}선택하세요 (1-4, 0): ${RESET}\"",
    "\"4\") log_settings ;;",
    "echo -e \"${CYAN}최근 20줄의 로그:${RESET}\"",
    "echo",
    "echo",
    "echo -e \"${CYAN}최근 에러 로그:${RESET}\"",
    "echo",
    "echo",
    "echo",
    "log_settings() {",
    "echo \"  로그 디렉토리: $LOG_DIR\"",
    "echo \"  로그 파일: $LOG_FILE\"",
    "echo \"  에러 로그: $ERROR_LOG\"",
    "echo",
    "if check_python_environment; then",
    "print_success \"Python 환경 테스트 통과\"",
    "print_error \"Python 환경 테스트 실패\"",
    "cd \"Monitoring/Posco_News_mini\"",
    "if python3 -c \"import sys; print('Python 스크립트 테스트 통과')\" 2>/dev/null; then",
    "print_success \"POSCO Python 스크립트 테스트 통과\"",
    "print_error \"POSCO Python 스크립트 테스트 실패\"",
    "cd \"$SCRIPT_DIR\"",
    "echo",
    "cd \"$backup_dir\"",
    "cd \"$SCRIPT_DIR\"",
    "echo",
    "echo -e \"${CYAN}현재 설정:${RESET}\"",
    "cat \"$config_file\" | python3 -m json.tool 2>/dev/null || cat \"$config_file\"",
    "echo",
    "echo -e \"${YELLOW}설정 옵션:${RESET}\"",
    "echo \"1. 로그 레벨 설정\"",
    "echo \"2. 모니터링 간격 설정\"",
    "echo \"3. 알림 설정\"",
    "echo \"4. 테마 설정\"",
    "echo \"5. 설정 초기화\"",
    "echo \"0. 돌아가기\"",
    "echo",
    "echo -n -e \"${GREEN}선택하세요 (1-5, 0): ${RESET}\"",
    "\"5\") reset_config ;;",
    "echo -e \"${CYAN}로그 레벨 옵션:${RESET}\"",
    "echo \"1. DEBUG - 모든 로그 출력\"",
    "echo \"2. INFO - 정보성 로그만 출력 (기본값)\"",
    "echo \"3. WARNING - 경고 이상만 출력\"",
    "echo \"4. ERROR - 에러만 출력\"",
    "echo",
    "echo -n -e \"${GREEN}로그 레벨을 선택하세요 (1-4): ${RESET}\"",
    "echo",
    "echo -e \"${CYAN}모니터링 간격 옵션:${RESET}\"",
    "echo \"1. 30초 (빠른 모니터링)\"",
    "echo \"2. 1분 (기본값)\"",
    "echo \"3. 5분 (절약 모드)\"",
    "echo \"4. 10분 (저전력 모드)\"",
    "echo",
    "echo -n -e \"${GREEN}간격을 선택하세요 (1-4): ${RESET}\"",
    "echo",
    "echo -e \"${CYAN}알림 옵션:${RESET}\"",
    "echo \"1. 모든 알림 활성화\"",
    "echo \"2. 중요 알림만\"",
    "echo \"3. 알림 비활성화\"",
    "echo",
    "echo -n -e \"${GREEN}알림 설정을 선택하세요 (1-3): ${RESET}\"",
    "echo",
    "echo -e \"${CYAN}테마 옵션:${RESET}\"",
    "echo \"1. 기본 테마 (macOS)\"",
    "echo \"2. 다크 테마\"",
    "echo \"3. 라이트 테마\"",
    "echo \"4. 고대비 테마\"",
    "echo",
    "echo -n -e \"${GREEN}테마를 선택하세요 (1-4): ${RESET}\"",
    "echo",
    "reset_config() {",
    "echo",
    "echo -e \"${CYAN}테마 옵션:${RESET}\"",
    "echo \"1. 🍎 macOS 기본 테마\"",
    "echo \"2. 🌙 다크 모드\"",
    "echo \"3. ☀️ 라이트 모드\"",
    "echo \"4. 🎨 고대비 모드\"",
    "echo \"5. 🌈 컬러풀 모드\"",
    "echo \"0. 돌아가기\"",
    "echo",
    "echo -n -e \"${GREEN}테마를 선택하세요 (1-5, 0): ${RESET}\"",
    "echo",
    "echo",
    "echo",
    "echo",
    "echo",
    "echo"
  ],
  "variables": {
    "SCRIPT_DIR": "\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"",
    "loading_pid": "$!"
  }
}