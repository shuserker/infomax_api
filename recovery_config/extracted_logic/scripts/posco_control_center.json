{
  "file_path": "Monitoring/Posco_News_mini/posco_control_center.sh",
  "file_type": ".sh",
  "content": "#!/bin/bash\n# ============================================================================\n# POSCO Control Center v4.0\n# Mac용 POSCO 뉴스 및 주가 모니터링 제어 센터\n# ============================================================================\n\n# 스크립트 경로 설정\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\ncd \"$SCRIPT_DIR\"\n\n# 공통 라이브러리 로드\nif [[ -f \"../../lib_wt_common.sh\" ]]; then\n    source \"../../lib_wt_common.sh\"\nelse\n    echo \"Error: lib_wt_common.sh를 찾을 수 없습니다.\"\n    exit 1\nfi\n\n# 초기화\ninit_system\n\n# ============================================================================\n# 메인 메뉴\n# ============================================================================\nmain_menu() {\n    clear\n    print_header \"🏭 POSCO Control Center v4.0 🎛️\"\n    echo -e \"${INFO}🎯 POSCO 뉴스 및 주가 모니터링 시스템을 관리합니다${RESET}\"\n    echo\n\n    echo -e \"${YELLOW}🎛️ 관리할 기능을 선택하세요:${RESET}\"\n    echo\n\n    # 모니터링 관리\n    start_box \"${GREEN}\"\n    echo -e \"${GREEN}║${RESET}                           ${CYAN}📊 모니터링 관리${RESET}                                    ${GREEN}║${RESET}\"\n    echo -e \"${GREEN}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"\n    print_menu_item \"1.\" \"🚀 워치햄스터 시작\" \"POSCO 뉴스 모니터링 시작\"\n    print_menu_item \"2.\" \"🛑 워치햄스터 중지\" \"모니터링 프로세스 중지\"\n    print_menu_item \"3.\" \"🔄 워치햄스터 재시작\" \"모니터링 시스템 재시작\"\n    print_menu_item \"4.\" \"📊 실시간 상태 확인\" \"현재 모니터링 상태 확인\"\n    end_box\n\n    echo\n\n    # 뉴스 관리\n    start_box \"${BLUE}\"\n    echo -e \"${BLUE}║${RESET}                           ${MAGENTA}📰 뉴스 관리${RESET}                                      ${BLUE}║${RESET}\"\n    echo -e \"${BLUE}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"\n    print_menu_item \"A.\" \"📋 뉴스 로그 확인\" \"최신 뉴스 로그 확인\"\n    print_menu_item \"B.\" \"📈 뉴스 통계 보기\" \"뉴스 수집 통계 확인\"\n    print_menu_item \"C.\" \"🔍 뉴스 검색\" \"특정 키워드 뉴스 검색\"\n    end_box\n\n    echo\n\n    # 시스템 관리\n    start_box \"${RED}\"\n    echo -e \"${RED}║${RESET}                           ${WHITE}⚙️ 시스템 관리${RESET}                                      ${RED}║${RESET}\"\n    echo -e \"${RED}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"\n    print_menu_item \"D.\" \"🔧 시스템 상태\" \"POSCO 시스템 상태 확인\"\n    print_menu_item \"E.\" \"🧪 시스템 테스트\" \"모니터링 시스템 테스트\"\n    print_menu_item \"F.\" \"📦 데이터 백업\" \"뉴스 데이터 백업\"\n    end_box\n\n    echo\n    echo -e \"${GRAY}0. ❌ 메인 메뉴로 돌아가기${RESET}\"\n    echo\n\n    print_system_info\n\n    echo -n -e \"${GREEN}🎯 선택하세요 (1-4, A-F, 0): ${RESET}\"\n    read -r choice\n\n    case \"$choice\" in\n        \"1\") start_watchhamster ;;\n        \"2\") stop_watchhamster ;;\n        \"3\") restart_watchhamster ;;\n        \"4\") check_monitoring_status ;;\n        \"A\"|\"a\") view_news_logs ;;\n        \"B\"|\"b\") view_news_stats ;;\n        \"C\"|\"c\") search_news ;;\n        \"D\"|\"d\") check_system_status ;;\n        \"E\"|\"e\") test_system ;;\n        \"F\"|\"f\") backup_data ;;\n        \"0\") return_to_main ;;\n        *) invalid_choice ;;\n    esac\n}\n\n# ============================================================================\n# 모니터링 관리\n# ============================================================================\n\n# 워치햄스터 시작\nstart_watchhamster() {\n    clear\n    print_header \"🚀 워치햄스터 시작\"\n    \n    if ! confirm_action \"POSCO 뉴스 모니터링을 시작하시겠습니까?\"; then\n        main_menu\n        return\n    fi\n\n    # 이미 실행 중인지 확인\n    if pgrep -f \"integrated_report_scheduler.py\" >/dev/null; then\n        print_warning \"워치햄스터가 이미 실행 중입니다.\"\n        echo\n        read -p \"계속하려면 Enter를 누르세요...\"\n        main_menu\n        return\n    fi\n\n    # Python 스크립트 실행 (통합 리포트 스케줄러 사용)\n    if [[ -f \"integrated_report_scheduler.py\" ]]; then\n        nohup python3 integrated_report_scheduler.py > posco_monitor.log 2>&1 &\n        local pid=$!\n        sleep 2\n        \n        if kill -0 $pid 2>/dev/null; then\n            print_success \"워치햄스터가 성공적으로 시작되었습니다. (PID: $pid)\"\n        else\n            print_error \"워치햄스터 시작에 실패했습니다.\"\n        fi\n    elif [[ -f \"run_monitor.py\" ]]; then\n        print_warning \"run_monitor.py는 비활성화되었습니다. integrated_report_scheduler.py를 사용합니다.\"\n        nohup python3 integrated_report_scheduler.py > posco_monitor.log 2>&1 &\n        local pid=$!\n        sleep 2\n        \n        if kill -0 $pid 2>/dev/null; then\n            print_success \"워치햄스터가 성공적으로 시작되었습니다. (PID: $pid)\"\n        else\n            print_error \"워치햄스터 시작에 실패했습니다.\"\n        fi\n    else\n        print_error \"실행할 수 있는 모니터링 스크립트를 찾을 수 없습니다.\"\n    fi\n\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# 워치햄스터 중지\nstop_watchhamster() {\n    clear\n    print_header \"🛑 워치햄스터 중지\"\n    \n    if ! confirm_action \"POSCO 뉴스 모니터링을 중지하시겠습니까?\"; then\n        main_menu\n        return\n    fi\n\n    local pids=$(pgrep -f \"run_monitor.py\")\n    \n    if [[ -n \"$pids\" ]]; then\n        for pid in $pids; do\n            kill $pid 2>/dev/null\n        done\n        sleep 2\n        \n        # 강제 종료\n        local remaining_pids=$(pgrep -f \"run_monitor.py\")\n        if [[ -n \"$remaining_pids\" ]]; then\n            for pid in $remaining_pids; do\n                kill -9 $pid 2>/dev/null\n            done\n        fi\n        \n        print_success \"워치햄스터가 성공적으로 중지되었습니다.\"\n    else\n        print_info \"실행 중인 워치햄스터가 없습니다.\"\n    fi\n\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# 워치햄스터 재시작\nrestart_watchhamster() {\n    clear\n    print_header \"🔄 워치햄스터 재시작\"\n    \n    if ! confirm_action \"워치햄스터를 재시작하시겠습니까?\"; then\n        main_menu\n        return\n    fi\n\n    stop_watchhamster\n    sleep 2\n    start_watchhamster\n}\n\n# 실시간 상태 확인\ncheck_monitoring_status() {\n    clear\n    print_header \"📊 실시간 상태 확인\"\n    \n    print_section \"⚙️ 프로세스 상태\"\n    \n    local pids=$(pgrep -f \"run_monitor.py\")\n    if [[ -n \"$pids\" ]]; then\n        print_success \"워치햄스터가 실행 중입니다.\"\n        for pid in $pids; do\n            local cmd=$(ps -p $pid -o command= 2>/dev/null)\n            local time=$(ps -p $pid -o etime= 2>/dev/null)\n            echo -e \"  ${GRAY}•${RESET} PID: $pid, 실행시간: $time\"\n        done\n    else\n        print_warning \"워치햄스터가 실행되지 않았습니다.\"\n    fi\n\n    print_section \"📊 시스템 리소스\"\n    print_system_info\n\n    print_section \"📁 로그 파일 상태\"\n    \n    local log_files=(\"posco_monitor.log\" \"system.log\" \"error.log\")\n    for log_file in \"${log_files[@]}\"; do\n        if [[ -f \"$log_file\" ]]; then\n            local size=$(du -h \"$log_file\" 2>/dev/null | cut -f1)\n            local modified=$(stat -f \"%Sm\" \"$log_file\" 2>/dev/null)\n            echo -e \"${GREEN}✅${RESET} $log_file (${size}, 수정: $modified)\"\n        else\n            echo -e \"${RED}❌${RESET} $log_file (없음)\"\n        fi\n    done\n\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# ============================================================================\n# 뉴스 관리\n# ============================================================================\n\n# 뉴스 로그 확인\nview_news_logs() {\n    clear\n    print_header \"📋 뉴스 로그 확인\"\n    \n    if [[ -f \"posco_monitor.log\" ]]; then\n        echo -e \"${CYAN}최근 20줄의 로그:${RESET}\"\n        echo\n        tail -n 20 \"posco_monitor.log\"\n    else\n        print_warning \"로그 파일이 없습니다.\"\n    fi\n    \n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# 뉴스 통계 보기\nview_news_stats() {\n    clear\n    print_header \"📈 뉴스 통계 보기\"\n    \n    if [[ -f \"posco_news_data.json\" ]]; then\n        local size=$(du -h \"posco_news_data.json\" 2>/dev/null | cut -f1)\n        local modified=$(stat -f \"%Sm\" \"posco_news_data.json\" 2>/dev/null)\n        echo -e \"${GREEN}✅${RESET} posco_news_data.json (${size}, 수정: $modified)\"\n        \n        # 간단한 통계\n        local count=$(python3 -c \"import json; print(len(json.load(open('posco_news_data.json'))))\" 2>/dev/null || echo \"N/A\")\n        echo -e \"  총 뉴스 수: $count개\"\n    else\n        echo -e \"${RED}❌${RESET} posco_news_data.json (없음)\"\n    fi\n    \n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# 뉴스 검색\nsearch_news() {\n    clear\n    print_header \"🔍 뉴스 검색\"\n    \n    echo -n -e \"${GREEN}검색할 키워드를 입력하세요: ${RESET}\"\n    read -r keyword\n    \n    if [[ -z \"$keyword\" ]]; then\n        print_error \"키워드를 입력해주세요.\"\n        echo\n        read -p \"계속하려면 Enter를 누르세요...\"\n        main_menu\n        return\n    fi\n\n    if [[ -f \"posco_news_data.json\" ]]; then\n        echo -e \"${CYAN}검색 결과:${RESET}\"\n        echo\n        python3 -c \"\nimport json\nkeyword = '$keyword'\ntry:\n    with open('posco_news_data.json', 'r', encoding='utf-8') as f:\n        data = json.load(f)\n    if isinstance(data, list):\n        results = [item for item in data if keyword in item.get('title', '') or keyword in item.get('content', '')]\n        print(f'발견된 뉴스: {len(results)}개')\n        for i, item in enumerate(results[:5]):\n            print(f'{i+1}. {item.get(\\\"title\\\", \\\"제목 없음\\\")}')\n            print(f'   날짜: {item.get(\\\"date\\\", \\\"날짜 없음\\\")}')\n            print()\nexcept Exception as e:\n    print(f'검색 오류: {e}')\n\" 2>/dev/null || echo \"검색 실패\"\n    else\n        print_warning \"뉴스 데이터 파일이 없습니다.\"\n    fi\n\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# ============================================================================\n# 시스템 관리\n# ============================================================================\n\n# 시스템 상태 확인\ncheck_system_status() {\n    clear\n    print_header \"🔧 시스템 상태 확인\"\n    \n    print_section \"📊 POSCO 시스템 현황\"\n    \n    # Python 환경 확인\n    print_section \"🐍 Python 환경\"\n    check_python_environment\n    \n    # 필수 파일 확인\n    print_section \"📁 필수 파일 확인\"\n    local required_files=(\"run_monitor.py\" \"config.py\" \"requirements.txt\")\n    check_required_files \"${required_files[@]}\"\n    \n    # 데이터 파일 확인\n    print_section \"📊 데이터 파일 상태\"\n    local data_files=(\"posco_news_data.json\" \"posco_news_cache.json\")\n    for data_file in \"${data_files[@]}\"; do\n        if [[ -f \"$data_file\" ]]; then\n            local size=$(du -h \"$data_file\" 2>/dev/null | cut -f1)\n            local modified=$(stat -f \"%Sm\" \"$data_file\" 2>/dev/null)\n            echo -e \"${GREEN}✅${RESET} $data_file (${size}, 수정: $modified)\"\n        else\n            echo -e \"${RED}❌${RESET} $data_file (없음)\"\n        fi\n    done\n    \n    # 네트워크 연결 확인\n    print_section \"🌐 네트워크 상태\"\n    check_network_connection\n    \n    # 시스템 리소스 확인\n    print_section \"💻 시스템 리소스\"\n    print_system_info\n\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# 시스템 테스트\ntest_system() {\n    clear\n    print_header \"🧪 시스템 테스트\"\n    \n    if ! confirm_action \"POSCO 모니터링 시스템 테스트를 실행하시겠습니까?\"; then\n        main_menu\n        return\n    fi\n\n    print_section \"🔍 기본 시스템 테스트\"\n    \n    # Python 환경 테스트\n    if check_python_environment; then\n        print_success \"Python 환경 테스트 통과\"\n    else\n        print_error \"Python 환경 테스트 실패\"\n    fi\n    \n    # 네트워크 연결 테스트\n    if check_network_connection; then\n        print_success \"네트워크 연결 테스트 통과\"\n    else\n        print_error \"네트워크 연결 테스트 실패\"\n    fi\n    \n    # Python 스크립트 테스트\n    print_section \"🐍 Python 스크립트 테스트\"\n    if [[ -f \"run_monitor.py\" ]]; then\n        if python3 -c \"import sys; print('Python 스크립트 테스트 통과')\" 2>/dev/null; then\n            print_success \"run_monitor.py 테스트 통과\"\n        else\n            print_error \"run_monitor.py 테스트 실패\"\n        fi\n    else\n        print_warning \"run_monitor.py 파일이 없습니다.\"\n    fi\n\n    print_success \"시스템 테스트가 완료되었습니다.\"\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# 데이터 백업\nbackup_data() {\n    clear\n    print_header \"📦 데이터 백업\"\n    \n    if ! confirm_action \"POSCO 뉴스 데이터를 백업하시겠습니까?\"; then\n        main_menu\n        return\n    fi\n\n    local backup_dir=\"$HOME/.watchhamster/posco_backups\"\n    local timestamp=$(date '+%Y%m%d_%H%M%S')\n    local backup_name=\"posco_backup_$timestamp\"\n    local backup_path=\"$backup_dir/$backup_name\"\n\n    mkdir -p \"$backup_path\"\n\n    # 중요 데이터 파일들 백업\n    local data_files=(\"posco_news_data.json\" \"posco_news_cache.json\" \"*.py\" \"config.py\")\n    local backed_up=0\n    \n    for pattern in \"${data_files[@]}\"; do\n        for file in $pattern; do\n            if [[ -f \"$file\" ]]; then\n                cp \"$file\" \"$backup_path/\" 2>/dev/null\n                backed_up=1\n            fi\n        done\n    done\n\n    # 백업 압축\n    if [[ $backed_up -eq 1 ]]; then\n        cd \"$backup_dir\"\n        tar -czf \"$backup_name.tar.gz\" \"$backup_name\" 2>/dev/null\n        rm -rf \"$backup_name\"\n        cd \"$SCRIPT_DIR\"\n        \n        local backup_size=$(du -h \"$backup_dir/$backup_name.tar.gz\" 2>/dev/null | cut -f1)\n        print_success \"백업이 생성되었습니다: $backup_name.tar.gz (크기: $backup_size)\"\n    else\n        print_error \"백업할 데이터가 없습니다.\"\n    fi\n\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# ============================================================================\n# 유틸리티 함수들\n# ============================================================================\n\n# 잘못된 선택 처리\ninvalid_choice() {\n    print_error \"잘못된 선택입니다. 다시 시도해주세요.\"\n    sleep 2\n    main_menu\n}\n\n# 메인 메뉴로 돌아가기\nreturn_to_main() {\n    cd \"$SCRIPT_DIR/../..\"\n    if [[ -f \"watchhamster_master_control.sh\" ]]; then\n        bash \"watchhamster_master_control.sh\"\n    else\n        print_error \"메인 제어 센터를 찾을 수 없습니다.\"\n        exit 1\n    fi\n}\n\n# ============================================================================\n# 메인 실행\n# ============================================================================\n\n# 스크립트 시작\nmain_menu ",
  "commands": [
    "SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"",
    "cd \"$SCRIPT_DIR\"",
    "echo \"Error: lib_wt_common.sh를 찾을 수 없습니다.\"",
    "echo -e \"${INFO}🎯 POSCO 뉴스 및 주가 모니터링 시스템을 관리합니다${RESET}\"",
    "echo",
    "echo -e \"${YELLOW}🎛️ 관리할 기능을 선택하세요:${RESET}\"",
    "echo",
    "echo -e \"${GREEN}║${RESET}                           ${CYAN}📊 모니터링 관리${RESET}                                    ${GREEN}║${RESET}\"",
    "echo -e \"${GREEN}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"",
    "echo",
    "echo -e \"${BLUE}║${RESET}                           ${MAGENTA}📰 뉴스 관리${RESET}                                      ${BLUE}║${RESET}\"",
    "echo -e \"${BLUE}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"",
    "echo",
    "echo -e \"${RED}║${RESET}                           ${WHITE}⚙️ 시스템 관리${RESET}                                      ${RED}║${RESET}\"",
    "echo -e \"${RED}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"",
    "echo",
    "echo -e \"${GRAY}0. ❌ 메인 메뉴로 돌아가기${RESET}\"",
    "echo",
    "echo -n -e \"${GREEN}🎯 선택하세요 (1-4, A-F, 0): ${RESET}\"",
    "echo",
    "nohup python3 integrated_report_scheduler.py > posco_monitor.log 2>&1 &",
    "nohup python3 integrated_report_scheduler.py > posco_monitor.log 2>&1 &",
    "echo",
    "echo",
    "echo -e \"  ${GRAY}•${RESET} PID: $pid, 실행시간: $time\"",
    "echo -e \"${GREEN}✅${RESET} $log_file (${size}, 수정: $modified)\"",
    "echo -e \"${RED}❌${RESET} $log_file (없음)\"",
    "echo",
    "echo -e \"${CYAN}최근 20줄의 로그:${RESET}\"",
    "echo",
    "echo",
    "echo -e \"${GREEN}✅${RESET} posco_news_data.json (${size}, 수정: $modified)\"",
    "local count=$(python3 -c \"import json; print(len(json.load(open('posco_news_data.json'))))\" 2>/dev/null || echo \"N/A\")",
    "echo -e \"  총 뉴스 수: $count개\"",
    "echo -e \"${RED}❌${RESET} posco_news_data.json (없음)\"",
    "echo",
    "echo -n -e \"${GREEN}검색할 키워드를 입력하세요: ${RESET}\"",
    "echo",
    "echo -e \"${CYAN}검색 결과:${RESET}\"",
    "echo",
    "python3 -c \"",
    "\" 2>/dev/null || echo \"검색 실패\"",
    "echo",
    "print_section \"🐍 Python 환경\"",
    "check_python_environment",
    "echo -e \"${GREEN}✅${RESET} $data_file (${size}, 수정: $modified)\"",
    "echo -e \"${RED}❌${RESET} $data_file (없음)\"",
    "echo",
    "if check_python_environment; then",
    "print_success \"Python 환경 테스트 통과\"",
    "print_error \"Python 환경 테스트 실패\"",
    "print_section \"🐍 Python 스크립트 테스트\"",
    "if python3 -c \"import sys; print('Python 스크립트 테스트 통과')\" 2>/dev/null; then",
    "echo",
    "cd \"$backup_dir\"",
    "cd \"$SCRIPT_DIR\"",
    "echo",
    "cd \"$SCRIPT_DIR/../..\""
  ],
  "variables": {
    "SCRIPT_DIR": "\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"",
    "keyword": "'$keyword'",
    "data": "json.load(f)",
    "backed_up": "1"
  }
}