{
  "file_path": "watchhamster_control_center.sh",
  "file_type": ".sh",
  "content": "#!/bin/bash\n# ============================================================================\n# POSCO WatchHamster Control Center v2.0\n# POSCO 워치햄스터 통합 제어 센터 - 워치햄스터가 모든 것을 관리합니다\n# ============================================================================\n\n# 스크립트 경로 설정\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\ncd \"$SCRIPT_DIR\"\n\n# 공통 라이브러리 로드\nif [[ -f \"./lib_wt_common.sh\" ]]; then\n    source \"./lib_wt_common.sh\"\nelse\n    echo \"Error: lib_wt_common.sh를 찾을 수 없습니다.\"\n    echo \"현재 경로: $(pwd)\"\n    echo \"스크립트 경로: $SCRIPT_DIR\"\n    exit 1\nfi\n\n# 초기화\ninit_system\n\n# ============================================================================\n# 메인 메뉴\n# ============================================================================\nmain_menu() {\n    clear\n    print_header \"🐹 POSCO WatchHamster Control Center v2.0 🎛️\"\n    echo -e \"${INFO}🎯 워치햄스터가 모든 POSCO 모니터링 시스템을 통합 관리합니다${RESET}\"\n    echo\n\n    echo -e \"${YELLOW}🐹 워치햄스터 제어 메뉴를 선택하세요:${RESET}\"\n    echo\n\n    # 워치햄스터 관리 (최상위)\n    start_box \"${GREEN}\"\n    echo -e \"${GREEN}║${RESET}                           ${CYAN}🐹 워치햄스터 통합 관리${RESET}                                   ${GREEN}║${RESET}\"\n    echo -e \"${GREEN}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"\n    print_menu_item \"1.\" \"🚀 워치햄스터 시작\" \"전체 모니터링 시스템 시작\"\n    print_menu_item \"2.\" \"🛑 워치햄스터 중지\" \"전체 모니터링 시스템 중지\"\n    print_menu_item \"3.\" \"🔄 워치햄스터 재시작\" \"전체 모니터링 시스템 재시작\"\n    print_menu_item \"4.\" \"📊 워치햄스터 상태\" \"전체 시스템 상태 확인\"\n    print_menu_item \"5.\" \"🔧 모듈 관리\" \"개별 모듈 상태 및 제어\"\n    end_box\n\n    echo\n\n    # 뉴스 관리\n    start_box \"${BLUE}\"\n    echo -e \"${BLUE}║${RESET}                           ${MAGENTA}📰 뉴스 관리${RESET}                                      ${BLUE}║${RESET}\"\n    echo -e \"${BLUE}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"\n    print_menu_item \"A.\" \"📋 뉴스 로그 확인\" \"최신 뉴스 로그 확인\"\n    print_menu_item \"B.\" \"📈 뉴스 통계 보기\" \"뉴스 수집 통계 확인\"\n    print_menu_item \"C.\" \"🔍 뉴스 검색\" \"특정 키워드 뉴스 검색\"\n    end_box\n\n    echo\n\n    # 고급 옵션 (개별 모듈 관리)\n    start_box \"${YELLOW}\"\n    echo -e \"${YELLOW}║${RESET}                           ${WHITE}⚙️ 고급 옵션${RESET}                                      ${YELLOW}║${RESET}\"\n    echo -e \"${YELLOW}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"\n    print_menu_item \"D.\" \"🔧 시스템 진단\" \"POSCO 시스템 상태 진단\"\n    print_menu_item \"E.\" \"🧪 시스템 테스트\" \"모니터링 시스템 테스트\"\n    print_menu_item \"F.\" \"📦 데이터 백업\" \"뉴스 데이터 백업\"\n    end_box\n\n    echo\n    echo -e \"${GRAY}0. ❌ 메인 메뉴로 돌아가기${RESET}\"\n    echo\n\n    print_system_info\n\n    echo -n -e \"${GREEN}🎯 선택하세요 (1-5, A-F, 0): ${RESET}\"\n    read -r choice\n\n    case \"$choice\" in\n        \"1\") start_watchhamster ;;\n        \"2\") stop_watchhamster ;;\n        \"3\") restart_watchhamster ;;\n        \"4\") check_watchhamster_status ;;\n        \"5\") manage_modules ;;\n        \"A\"|\"a\") view_news_logs ;;\n        \"B\"|\"b\") view_news_stats ;;\n        \"C\"|\"c\") search_news ;;\n        \"D\"|\"d\") check_system_status ;;\n        \"E\"|\"e\") test_system ;;\n        \"F\"|\"f\") backup_data ;;\n        \"0\") return_to_main ;;\n        *) invalid_choice ;;\n    esac\n}\n\n# ============================================================================\n# 모니터링 관리\n# ============================================================================\n\n# 워치햄스터 시작\nstart_watchhamster() {\n    clear\n    print_header \"🚀 워치햄스터 시작\"\n    \n    if ! confirm_action \"POSCO 워치햄스터 모니터링 시스템을 시작하시겠습니까?\"; then\n        main_menu\n        return\n    fi\n\n    # 1. 환경 체크\n    print_info \"🔍 시스템 환경 체크 중...\"\n    \n    if ! command -v python3 &> /dev/null; then\n        print_error \"Python3가 설치되지 않았습니다\"\n        echo\n        read -p \"계속하려면 Enter를 누르세요...\"\n        main_menu\n        return 1\n    fi\n    \n    # 워치햄스터 스크립트 확인\n    if [[ ! -f \"Monitoring/Posco_News_mini/monitor_WatchHamster.py\" ]]; then\n        print_error \"워치햄스터 스크립트를 찾을 수 없습니다\"\n        print_info \"파일 경로: $SCRIPT_DIR/Monitoring/Posco_News_mini/monitor_WatchHamster.py\"\n        echo\n        read -p \"계속하려면 Enter를 누르세요...\"\n        main_menu\n        return 1\n    fi\n    \n    # 2. 기존 프로세스 정리\n    print_info \"🧹 기존 프로세스 정리 중...\"\n    pkill -f \"monitor_WatchHamster.py\" 2>/dev/null || true\n    sleep 2\n    \n    # 3. 워치햄스터 시작\n    print_info \"🐹 워치햄스터 시작 중...\"\n    cd \"Monitoring/Posco_News_mini\"\n    \n    nohup python3 monitor_WatchHamster.py > ../../watchhamster.log 2>&1 &\n    WATCHHAMSTER_PID=$!\n    cd \"$SCRIPT_DIR\"\n    \n    # 4. 초기화 대기\n    print_info \"⏳ 시스템 초기화 대기 중 (10초)...\"\n    sleep 10\n    \n    # 5. 상태 확인\n    if kill -0 $WATCHHAMSTER_PID 2>/dev/null; then\n        print_success \"워치햄스터 시작 성공 (PID: $WATCHHAMSTER_PID)\"\n        \n        # 하위 프로세스 상태 확인\n        print_info \"📊 하위 프로세스 상태 확인 중...\"\n        sleep 5\n        \n        check_managed_processes\n    else\n        print_error \"워치햄스터 시작 실패\"\n        if [[ -f \"$SCRIPT_DIR/watchhamster.log\" ]]; then\n            print_info \"최근 오류 로그:\"\n            tail -10 \"$SCRIPT_DIR/watchhamster.log\"\n        fi\n        echo\n        read -p \"계속하려면 Enter를 누르세요...\"\n        main_menu\n        return 1\n    fi\n    \n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# 워치햄스터 중지\nstop_watchhamster() {\n    clear\n    print_header \"🛑 워치햄스터 중지\"\n    \n    if ! confirm_action \"POSCO 워치햄스터 모니터링 시스템을 중지하시겠습니까?\"; then\n        main_menu\n        return\n    fi\n\n    print_info \"🛑 워치햄스터 중지 중...\"\n    \n    # 1. 워치햄스터 메인 프로세스 중지\n    local watchhamster_pid=$(pgrep -f \"monitor_WatchHamster.py\")\n    if [[ -n \"$watchhamster_pid\" ]]; then\n        print_info \"🐹 워치햄스터 메인 프로세스 중지 중... (PID: $watchhamster_pid)\"\n        kill $watchhamster_pid 2>/dev/null\n        sleep 3\n        \n        # 강제 종료가 필요한 경우\n        if kill -0 $watchhamster_pid 2>/dev/null; then\n            print_warning \"강제 종료 중...\"\n            kill -9 $watchhamster_pid 2>/dev/null\n        fi\n    fi\n    \n    # 2. 관리되는 하위 프로세스들 중지\n    local processes=(\"posco_main_notifier.py\" \"realtime_news_monitor.py\" \"integrated_report_scheduler.py\" \"historical_data_collector.py\")\n    \n    for process in \"${processes[@]}\"; do\n        local pid=$(pgrep -f \"$process\")\n        if [[ -n \"$pid\" ]]; then\n            print_info \"📊 $process 중지 중... (PID: $pid)\"\n            kill $pid 2>/dev/null\n            sleep 1\n            \n            # 강제 종료가 필요한 경우\n            if kill -0 $pid 2>/dev/null; then\n                kill -9 $pid 2>/dev/null\n            fi\n        fi\n    done\n    \n    # 3. 최종 상태 확인\n    sleep 2\n    local remaining_processes=0\n    for process in \"monitor_WatchHamster.py\" \"${processes[@]}\"; do\n        if pgrep -f \"$process\" >/dev/null; then\n            ((remaining_processes++))\n        fi\n    done\n    \n    if [[ $remaining_processes -eq 0 ]]; then\n        print_success \"🎉 모든 워치햄스터 프로세스가 성공적으로 중지되었습니다\"\n    else\n        print_warning \"⚠️ 일부 프로세스가 여전히 실행 중일 수 있습니다\"\n        print_info \"강제 정리를 위해 'pkill -f WatchHamster' 명령을 사용하세요\"\n    fi\n\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# 워치햄스터 재시작\nrestart_watchhamster() {\n    clear\n    print_header \"🔄 워치햄스터 재시작\"\n    \n    if ! confirm_action \"워치햄스터를 재시작하시겠습니까?\"; then\n        main_menu\n        return\n    fi\n\n    stop_watchhamster\n    sleep 2\n    start_watchhamster\n}\n\n# 워치햄스터 상태 확인\ncheck_watchhamster_status() {\n    clear\n    print_header \"📊 워치햄스터 상태 확인\"\n    \n    # 워치햄스터 프로세스 확인\n    if pgrep -f \"monitor_WatchHamster.py\" > /dev/null; then\n        WATCHHAMSTER_PID=$(pgrep -f \"monitor_WatchHamster.py\")\n        print_success \"🐹 워치햄스터가 실행 중입니다\"\n        echo -e \"${INFO}  • PID: $WATCHHAMSTER_PID${RESET}\"\n        \n        # 실행 시간 계산\n        if command -v ps &> /dev/null; then\n            UPTIME=$(ps -o etime= -p $WATCHHAMSTER_PID 2>/dev/null | tr -d ' ')\n            echo -e \"${INFO}  • 실행시간: $UPTIME${RESET}\"\n        fi\n        \n        # CPU/메모리 사용률\n        if command -v ps &> /dev/null; then\n            CPU_MEM=$(ps -o pcpu,pmem -p $WATCHHAMSTER_PID --no-headers 2>/dev/null)\n            echo -e \"${INFO}  • CPU/메모리: $CPU_MEM${RESET}\"\n        fi\n        \n        echo\n        echo -e \"${YELLOW}📊 관리 중인 모듈 상태${RESET}\"\n        check_managed_processes\n        \n    else\n        print_error \"🐹 워치햄스터가 실행되지 않고 있습니다\"\n        echo -e \"${INFO}워치햄스터를 먼저 시작해주세요${RESET}\"\n    fi\n    \n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# 관리되는 프로세스 상태 확인\ncheck_managed_processes() {\n    local processes=(\"posco_main_notifier.py\" \"realtime_news_monitor.py\" \"integrated_report_scheduler.py\")\n    local running_count=0\n    local total_count=${#processes[@]}\n    \n    for process in \"${processes[@]}\"; do\n        if pgrep -f \"$process\" > /dev/null; then\n            PID=$(pgrep -f \"$process\")\n            print_success \"  ✅ ${process%.*} (PID: $PID)\"\n            ((running_count++))\n        else\n            print_warning \"  ❌ ${process%.*} (중지됨)\"\n        fi\n    done\n    \n    echo\n    if [ $running_count -eq $total_count ]; then\n        print_success \"🎯 모든 모듈이 정상 작동 중입니다 ($running_count/$total_count)\"\n    else\n        print_warning \"⚠️ 일부 모듈이 중지되어 있습니다 ($running_count/$total_count)\"\n    fi\n}\n\n# 모듈 관리 메뉴\nmanage_modules() {\n    clear\n    print_header \"🔧 모듈 관리\"\n    \n    # 워치햄스터 실행 상태 확인\n    local watchhamster_pid=$(pgrep -f \"monitor_WatchHamster.py\")\n    if [[ -z \"$watchhamster_pid\" ]]; then\n        print_error \"❌ 워치햄스터가 실행되지 않았습니다\"\n        print_info \"개별 모듈 관리를 위해서는 먼저 워치햄스터를 시작해주세요\"\n        echo\n        read -p \"계속하려면 Enter를 누르세요...\"\n        main_menu\n        return\n    fi\n    \n    print_success \"🐹 워치햄스터가 실행 중입니다 (PID: $watchhamster_pid)\"\n    echo\n    \n    print_section \"📊 개별 모듈 상태\"\n    \n    local modules=(\n        \"posco_main_notifier.py:메인 알림 시스템:1\"\n        \"realtime_news_monitor.py:실시간 뉴스 모니터:2\"\n        \"integrated_report_scheduler.py:통합 리포트 스케줄러:3\"\n        \"historical_data_collector.py:히스토리 데이터 수집기:4\"\n    )\n    \n    for module_info in \"${modules[@]}\"; do\n        local script_name=\"${module_info%%:*}\"\n        local display_name=\"${module_info#*:}\"\n        display_name=\"${display_name%%:*}\"\n        local module_num=\"${module_info##*:}\"\n        local module_pid=$(pgrep -f \"$script_name\")\n        \n        if [[ -n \"$module_pid\" ]]; then\n            local module_time=$(ps -p $module_pid -o etime= 2>/dev/null | tr -d ' ')\n            echo -e \"${GREEN}$module_num.${RESET} ✅ $display_name (PID: $module_pid, 실행시간: $module_time)\"\n        else\n            echo -e \"${RED}$module_num.${RESET} ❌ $display_name (중지됨)\"\n        fi\n    done\n    \n    echo\n    echo -e \"${YELLOW}🔧 모듈 제어 옵션:${RESET}\"\n    echo -e \"${GRAY}R.${RESET} 🔄 모든 모듈 재시작\"\n    echo -e \"${GRAY}S.${RESET} 📊 상세 상태 보기\"\n    echo -e \"${GRAY}L.${RESET} 📋 로그 보기\"\n    echo -e \"${GRAY}0.${RESET} ⬅️ 메인 메뉴로 돌아가기\"\n    echo\n    \n    echo -n -e \"${GREEN}🎯 선택하세요 (1-4, R, S, L, 0): ${RESET}\"\n    read -r choice\n    \n    case \"$choice\" in\n        \"1\") control_individual_module \"posco_main_notifier.py\" \"메인 알림 시스템\" ;;\n        \"2\") control_individual_module \"realtime_news_monitor.py\" \"실시간 뉴스 모니터\" ;;\n        \"3\") control_individual_module \"integrated_report_scheduler.py\" \"통합 리포트 스케줄러\" ;;\n        \"4\") control_individual_module \"historical_data_collector.py\" \"히스토리 데이터 수집기\" ;;\n        \"R\"|\"r\") restart_all_modules ;;\n        \"S\"|\"s\") show_detailed_module_status ;;\n        \"L\"|\"l\") view_module_logs ;;\n        \"0\") main_menu ;;\n        *) \n            print_error \"잘못된 선택입니다\"\n            sleep 2\n            manage_modules\n            ;;\n    esac\n}\n\n# 개별 모듈 제어\ncontrol_individual_module() {\n    local script_name=\"$1\"\n    local display_name=\"$2\"\n    \n    clear\n    print_header \"🔧 $display_name 제어\"\n    \n    local module_pid=$(pgrep -f \"$script_name\")\n    if [[ -n \"$module_pid\" ]]; then\n        local module_time=$(ps -p $module_pid -o etime= 2>/dev/null | tr -d ' ')\n        local cpu=$(ps -p $module_pid -o %cpu= 2>/dev/null | tr -d ' ')\n        local mem=$(ps -p $module_pid -o %mem= 2>/dev/null | tr -d ' ')\n        \n        print_success \"✅ $display_name이 실행 중입니다\"\n        echo -e \"${INFO}  • PID: $module_pid${RESET}\"\n        echo -e \"${INFO}  • 실행시간: $module_time${RESET}\"\n        echo -e \"${INFO}  • CPU: ${cpu}%, 메모리: ${mem}%${RESET}\"\n    else\n        print_warning \"❌ $display_name이 중지되어 있습니다\"\n    fi\n    \n    echo\n    echo -e \"${YELLOW}🔧 제어 옵션:${RESET}\"\n    echo -e \"${GREEN}1.${RESET} 🔄 모듈 재시작\"\n    echo -e \"${GREEN}2.${RESET} 🛑 모듈 중지\"\n    echo -e \"${GREEN}3.${RESET} 📋 모듈 로그 보기\"\n    echo -e \"${GREEN}0.${RESET} ⬅️ 돌아가기\"\n    echo\n    \n    echo -n -e \"${GREEN}🎯 선택하세요 (1-3, 0): ${RESET}\"\n    read -r choice\n    \n    case \"$choice\" in\n        \"1\") restart_individual_module \"$script_name\" \"$display_name\" ;;\n        \"2\") stop_individual_module \"$script_name\" \"$display_name\" ;;\n        \"3\") show_individual_module_log \"$script_name\" \"$display_name\" ;;\n        \"0\") manage_modules ;;\n        *) \n            print_error \"잘못된 선택입니다\"\n            sleep 2\n            control_individual_module \"$script_name\" \"$display_name\"\n            ;;\n    esac\n}\n\n# 개별 모듈 재시작\nrestart_individual_module() {\n    local script_name=\"$1\"\n    local display_name=\"$2\"\n    \n    clear\n    print_header \"🔄 $display_name 재시작\"\n    \n    if ! confirm_action \"$display_name을(를) 재시작하시겠습니까?\"; then\n        manage_modules\n        return\n    fi\n    \n    print_info \"🔄 $display_name 재시작 중...\"\n    \n    # 기존 프로세스 종료\n    local old_pid=$(pgrep -f \"$script_name\")\n    if [[ -n \"$old_pid\" ]]; then\n        print_info \"⏹️ 기존 프로세스 종료 중... (PID: $old_pid)\"\n        kill \"$old_pid\"\n        sleep 3\n    fi\n    \n    # 워치햄스터가 자동으로 재시작할 때까지 대기\n    print_info \"⏳ 워치햄스터의 자동 복구 대기 중... (10초)\"\n    sleep 10\n    \n    # 새 프로세스 확인\n    local new_pid=$(pgrep -f \"$script_name\")\n    if [[ -n \"$new_pid\" ]]; then\n        print_success \"✅ $display_name이(가) 성공적으로 재시작되었습니다. (PID: $new_pid)\"\n    else\n        print_warning \"⚠️ 자동 재시작이 지연되고 있습니다. 워치햄스터 로그를 확인해주세요.\"\n    fi\n    \n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    control_individual_module \"$script_name\" \"$display_name\"\n}\n\n# 개별 모듈 중지\nstop_individual_module() {\n    local script_name=\"$1\"\n    local display_name=\"$2\"\n    \n    clear\n    print_header \"🛑 $display_name 중지\"\n    \n    if ! confirm_action \"$display_name을(를) 중지하시겠습니까?\"; then\n        control_individual_module \"$script_name\" \"$display_name\"\n        return\n    fi\n    \n    local module_pid=$(pgrep -f \"$script_name\")\n    if [[ -n \"$module_pid\" ]]; then\n        print_info \"🛑 $display_name 중지 중... (PID: $module_pid)\"\n        kill \"$module_pid\" 2>/dev/null\n        sleep 2\n        \n        # 강제 종료가 필요한 경우\n        if kill -0 \"$module_pid\" 2>/dev/null; then\n            print_warning \"강제 종료 중...\"\n            kill -9 \"$module_pid\" 2>/dev/null\n        fi\n        \n        print_success \"✅ $display_name이 중지되었습니다\"\n        print_warning \"⚠️ 워치햄스터가 자동으로 재시작할 수 있습니다\"\n    else\n        print_info \"ℹ️ $display_name이 이미 중지되어 있습니다\"\n    fi\n    \n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    control_individual_module \"$script_name\" \"$display_name\"\n}\n\n# 개별 모듈 로그 보기\nshow_individual_module_log() {\n    local script_name=\"$1\"\n    local display_name=\"$2\"\n    \n    clear\n    print_header \"📋 $display_name 로그\"\n    \n    # 로그 파일 경로 추정\n    local log_files=(\"$SCRIPT_DIR/watchhamster.log\" \"$SCRIPT_DIR/posco_monitor.log\" \"$SCRIPT_DIR/Monitoring/Posco_News_mini/WatchHamster.log\")\n    local found_log=false\n    \n    for log_file in \"${log_files[@]}\"; do\n        if [[ -f \"$log_file\" ]]; then\n            print_info \"📁 로그 파일: $log_file\"\n            echo\n            print_section \"최근 로그 (마지막 20줄, $script_name 관련)\"\n            \n            # 해당 모듈과 관련된 로그만 필터링\n            if grep -i \"${script_name%.*}\" \"$log_file\" | tail -20 | grep -q .; then\n                echo -e \"${GRAY}$(grep -i \"${script_name%.*}\" \"$log_file\" | tail -20)${RESET}\"\n                found_log=true\n            else\n                echo -e \"${GRAY}$(tail -20 \"$log_file\")${RESET}\"\n                found_log=true\n            fi\n            break\n        fi\n    done\n    \n    if [[ \"$found_log\" == false ]]; then\n        print_warning \"❌ 관련 로그 파일을 찾을 수 없습니다\"\n    fi\n    \n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    control_individual_module \"$script_name\" \"$display_name\"\n}\n\n# 모든 모듈 재시작\nrestart_all_modules() {\n    clear\n    print_header \"🔄 모든 모듈 재시작\"\n    \n    if ! confirm_action \"모든 모듈을 재시작하시겠습니까?\"; then\n        manage_modules\n        return\n    fi\n    \n    print_info \"🔄 워치햄스터를 통한 전체 시스템 재시작 중...\"\n    \n    # 워치햄스터 재시작으로 모든 모듈 재시작\n    restart_watchhamster\n}\n\n# 상세 모듈 상태 보기\nshow_detailed_module_status() {\n    clear\n    print_header \"📊 상세 모듈 상태\"\n    \n    local modules=(\n        \"posco_main_notifier.py:메인 알림 시스템\"\n        \"realtime_news_monitor.py:실시간 뉴스 모니터\"\n        \"integrated_report_scheduler.py:통합 리포트 스케줄러\"\n        \"historical_data_collector.py:히스토리 데이터 수집기\"\n    )\n    \n    for module_info in \"${modules[@]}\"; do\n        local script_name=\"${module_info%%:*}\"\n        local display_name=\"${module_info##*:}\"\n        local module_pid=$(pgrep -f \"$script_name\")\n        \n        print_section \"$display_name\"\n        \n        if [[ -n \"$module_pid\" ]]; then\n            local time=$(ps -p $module_pid -o etime= 2>/dev/null | tr -d ' ')\n            local cpu=$(ps -p $module_pid -o %cpu= 2>/dev/null | tr -d ' ')\n            local mem=$(ps -p $module_pid -o %mem= 2>/dev/null | tr -d ' ')\n            local vsz=$(ps -p $module_pid -o vsz= 2>/dev/null | tr -d ' ')\n            \n            print_success \"✅ 실행 중\"\n            echo -e \"  ${GRAY}•${RESET} PID: $module_pid\"\n            echo -e \"  ${GRAY}•${RESET} 실행시간: $time\"\n            echo -e \"  ${GRAY}•${RESET} CPU 사용률: ${cpu}%\"\n            echo -e \"  ${GRAY}•${RESET} 메모리 사용률: ${mem}%\"\n            echo -e \"  ${GRAY}•${RESET} 가상 메모리: ${vsz}KB\"\n        else\n            print_error \"❌ 중지됨\"\n        fi\n        echo\n    done\n    \n    read -p \"계속하려면 Enter를 누르세요...\"\n    manage_modules\n}\n\n# 모듈 로그 보기\nview_module_logs() {\n    clear\n    print_header \"📋 모듈 로그 보기\"\n    \n    echo -e \"${YELLOW}📋 확인할 로그를 선택하세요:${RESET}\"\n    echo\n    echo -e \"${GREEN}1.${RESET} 🐹 워치햄스터 로그\"\n    echo -e \"${GREEN}2.${RESET} 📊 메인 알림 시스템 로그\"\n    echo -e \"${GREEN}3.${RESET} 🔄 실시간 모니터 로그\"\n    echo -e \"${GREEN}4.${RESET} 📈 통합 리포트 로그\"\n    echo -e \"${GREEN}0.${RESET} ⬅️ 돌아가기\"\n    echo\n    \n    echo -n -e \"${GREEN}🎯 선택하세요 (1-4, 0): ${RESET}\"\n    read -r choice\n    \n    case \"$choice\" in\n        \"1\") show_log_file \"watchhamster.log\" \"워치햄스터\" ;;\n        \"2\") show_log_file \"posco_monitor.log\" \"메인 알림 시스템\" ;;\n        \"3\") show_log_file \"realtime_monitor.log\" \"실시간 모니터\" ;;\n        \"4\") show_log_file \"integrated_report.log\" \"통합 리포트\" ;;\n        \"0\") manage_modules ;;\n        *) \n            print_error \"잘못된 선택입니다.\"\n            sleep 2\n            view_module_logs\n            ;;\n    esac\n}\n\n# 로그 파일 표시\nshow_log_file() {\n    local log_file=\"$1\"\n    local log_name=\"$2\"\n    local log_path=\"$SCRIPT_DIR/$log_file\"\n    \n    clear\n    print_header \"📋 $log_name 로그\"\n    \n    if [[ -f \"$log_path\" ]]; then\n        print_info \"📁 로그 파일: $log_path\"\n        local size=$(du -h \"$log_path\" 2>/dev/null | cut -f1)\n        print_info \"📊 파일 크기: $size\"\n        echo\n        \n        print_section \"최근 로그 (마지막 20줄)\"\n        echo -e \"${GRAY}$(tail -20 \"$log_path\")${RESET}\"\n    else\n        print_warning \"❌ 로그 파일을 찾을 수 없습니다: $log_path\"\n    fi\n    \n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    view_module_logs\n}\n\n# ============================================================================\n# 뉴스 관리\n# ============================================================================\n\n# 뉴스 로그 확인\nview_news_logs() {\n    clear\n    print_header \"📋 뉴스 로그 확인\"\n    \n    if [[ -f \"posco_monitor.log\" ]]; then\n        echo -e \"${CYAN}최근 20줄의 로그:${RESET}\"\n        echo\n        tail -n 20 \"posco_monitor.log\"\n    else\n        print_warning \"로그 파일이 없습니다.\"\n    fi\n    \n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# 뉴스 통계 보기\nview_news_stats() {\n    clear\n    print_header \"📈 뉴스 통계 보기\"\n    \n    if [[ -f \"posco_news_data.json\" ]]; then\n        local size=$(du -h \"posco_news_data.json\" 2>/dev/null | cut -f1)\n        local modified=$(stat -f \"%Sm\" \"posco_news_data.json\" 2>/dev/null)\n        echo -e \"${GREEN}✅${RESET} posco_news_data.json (${size}, 수정: $modified)\"\n        \n        # 간단한 통계\n        local count=$(python3 -c \"import json; print(len(json.load(open('posco_news_data.json'))))\" 2>/dev/null || echo \"N/A\")\n        echo -e \"  총 뉴스 수: $count개\"\n    else\n        echo -e \"${RED}❌${RESET} posco_news_data.json (없음)\"\n    fi\n    \n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# 뉴스 검색\nsearch_news() {\n    clear\n    print_header \"🔍 뉴스 검색\"\n    \n    echo -n -e \"${GREEN}검색할 키워드를 입력하세요: ${RESET}\"\n    read -r keyword\n    \n    if [[ -z \"$keyword\" ]]; then\n        print_error \"키워드를 입력해주세요.\"\n        echo\n        read -p \"계속하려면 Enter를 누르세요...\"\n        main_menu\n        return\n    fi\n\n    if [[ -f \"posco_news_data.json\" ]]; then\n        echo -e \"${CYAN}검색 결과:${RESET}\"\n        echo\n        python3 -c \"\nimport json\nkeyword = '$keyword'\ntry:\n    with open('posco_news_data.json', 'r', encoding='utf-8') as f:\n        data = json.load(f)\n    if isinstance(data, list):\n        results = [item for item in data if keyword in item.get('title', '') or keyword in item.get('content', '')]\n        print(f'발견된 뉴스: {len(results)}개')\n        for i, item in enumerate(results[:5]):\n            print(f'{i+1}. {item.get(\\\"title\\\", \\\"제목 없음\\\")}')\n            print(f'   날짜: {item.get(\\\"date\\\", \\\"날짜 없음\\\")}')\n            print()\nexcept Exception as e:\n    print(f'검색 오류: {e}')\n\" 2>/dev/null || echo \"검색 실패\"\n    else\n        print_warning \"뉴스 데이터 파일이 없습니다.\"\n    fi\n\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# ============================================================================\n# 시스템 관리\n# ============================================================================\n\n# 시스템 상태 확인\ncheck_system_status() {\n    clear\n    print_header \"🔧 시스템 상태 확인\"\n    \n    print_section \"📊 POSCO 시스템 현황\"\n    \n    # Python 환경 확인\n    print_section \"🐍 Python 환경\"\n    check_python_environment\n    \n    # 필수 파일 확인\n    print_section \"📁 필수 파일 확인\"\n    local required_files=(\"Monitoring/Posco_News_mini/posco_main_notifier.py\" \"Monitoring/Posco_News_mini/monitor_WatchHamster.py\" \"Monitoring/Posco_News_mini/config.py\" \"requirements.txt\")\n    check_required_files \"${required_files[@]}\"\n    \n    # 데이터 파일 확인\n    print_section \"📊 데이터 파일 상태\"\n    local data_files=(\"posco_news_data.json\" \"posco_news_cache.json\")\n    for data_file in \"${data_files[@]}\"; do\n        if [[ -f \"$data_file\" ]]; then\n            local size=$(du -h \"$data_file\" 2>/dev/null | cut -f1)\n            local modified=$(stat -f \"%Sm\" \"$data_file\" 2>/dev/null)\n            echo -e \"${GREEN}✅${RESET} $data_file (${size}, 수정: $modified)\"\n        else\n            echo -e \"${RED}❌${RESET} $data_file (없음)\"\n        fi\n    done\n    \n    # 네트워크 연결 확인\n    print_section \"🌐 네트워크 상태\"\n    check_network_connection\n    \n    # 시스템 리소스 확인\n    print_section \"💻 시스템 리소스\"\n    print_system_info\n\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# 시스템 테스트\ntest_system() {\n    clear\n    print_header \"🧪 시스템 테스트\"\n    \n    if ! confirm_action \"POSCO 모니터링 시스템 테스트를 실행하시겠습니까?\"; then\n        main_menu\n        return\n    fi\n\n    print_section \"🔍 기본 시스템 테스트\"\n    \n    # Python 환경 테스트\n    if check_python_environment; then\n        print_success \"Python 환경 테스트 통과\"\n    else\n        print_error \"Python 환경 테스트 실패\"\n    fi\n    \n    # 네트워크 연결 테스트\n    if check_network_connection; then\n        print_success \"네트워크 연결 테스트 통과\"\n    else\n        print_error \"네트워크 연결 테스트 실패\"\n    fi\n    \n    # Python 스크립트 테스트\n    print_section \"🐍 Python 스크립트 테스트\"\n    if [[ -f \"Monitoring/Posco_News_mini/posco_main_notifier.py\" ]]; then\n        if python3 -c \"import sys; print('Python 스크립트 테스트 통과')\" 2>/dev/null; then\n            print_success \"🐹 POSCO 메인 알림 시스템 테스트 통과\"\n        else\n            print_error \"🐹 POSCO 메인 알림 시스템 테스트 실패\"\n        fi\n    elif [[ -f \"Monitoring/Posco_News_mini/monitor_WatchHamster.py\" ]]; then\n        if python3 -c \"import sys; print('Python 스크립트 테스트 통과')\" 2>/dev/null; then\n            print_success \"🐹 POSCO 워치햄스터 테스트 통과\"\n        else\n            print_error \"🐹 POSCO 워치햄스터 테스트 실패\"\n        fi\n    else\n        print_warning \"🐹 POSCO 모니터링 시스템 파일이 없습니다.\"\n    fi\n\n    print_success \"시스템 테스트가 완료되었습니다.\"\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# 데이터 백업\nbackup_data() {\n    clear\n    print_header \"📦 데이터 백업\"\n    \n    if ! confirm_action \"POSCO 뉴스 데이터를 백업하시겠습니까?\"; then\n        main_menu\n        return\n    fi\n\n    local backup_dir=\"$HOME/.watchhamster/posco_backups\"\n    local timestamp=$(date '+%Y%m%d_%H%M%S')\n    local backup_name=\"posco_backup_$timestamp\"\n    local backup_path=\"$backup_dir/$backup_name\"\n\n    mkdir -p \"$backup_path\"\n\n    # 중요 데이터 파일들 백업\n    local data_files=(\"posco_news_data.json\" \"posco_news_cache.json\" \"*.py\" \"config.py\")\n    local backed_up=0\n    \n    for pattern in \"${data_files[@]}\"; do\n        for file in $pattern; do\n            if [[ -f \"$file\" ]]; then\n                cp \"$file\" \"$backup_path/\" 2>/dev/null\n                backed_up=1\n            fi\n        done\n    done\n\n    # 백업 압축\n    if [[ $backed_up -eq 1 ]]; then\n        cd \"$backup_dir\"\n        tar -czf \"$backup_name.tar.gz\" \"$backup_name\" 2>/dev/null\n        rm -rf \"$backup_name\"\n        cd \"$SCRIPT_DIR\"\n        \n        local backup_size=$(du -h \"$backup_dir/$backup_name.tar.gz\" 2>/dev/null | cut -f1)\n        print_success \"백업이 생성되었습니다: $backup_name.tar.gz (크기: $backup_size)\"\n    else\n        print_error \"백업할 데이터가 없습니다.\"\n    fi\n\n    echo\n    read -p \"계속하려면 Enter를 누르세요...\"\n    main_menu\n}\n\n# ============================================================================\n# 유틸리티 함수들\n# ============================================================================\n\n# 잘못된 선택 처리\ninvalid_choice() {\n    print_error \"잘못된 선택입니다. 다시 시도해주세요.\"\n    sleep 2\n    main_menu\n}\n\n# 메인 메뉴로 돌아가기\nreturn_to_main() {\n    cd \"$SCRIPT_DIR/..\"\n    if [[ -f \"watchhamster_master_control.sh\" ]]; then\n        bash \"watchhamster_master_control.sh\"\n    else\n        print_error \"메인 제어 센터를 찾을 수 없습니다.\"\n        exit 1\n    fi\n}\n\n# ============================================================================\n# 메인 실행\n# ============================================================================\n\n# 스크립트 시작\nmain_menu ",
  "commands": [
    "SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"",
    "cd \"$SCRIPT_DIR\"",
    "echo \"Error: lib_wt_common.sh를 찾을 수 없습니다.\"",
    "echo \"현재 경로: $(pwd)\"",
    "echo \"스크립트 경로: $SCRIPT_DIR\"",
    "echo -e \"${INFO}🎯 워치햄스터가 모든 POSCO 모니터링 시스템을 통합 관리합니다${RESET}\"",
    "echo",
    "echo -e \"${YELLOW}🐹 워치햄스터 제어 메뉴를 선택하세요:${RESET}\"",
    "echo",
    "echo -e \"${GREEN}║${RESET}                           ${CYAN}🐹 워치햄스터 통합 관리${RESET}                                   ${GREEN}║${RESET}\"",
    "echo -e \"${GREEN}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"",
    "echo",
    "echo -e \"${BLUE}║${RESET}                           ${MAGENTA}📰 뉴스 관리${RESET}                                      ${BLUE}║${RESET}\"",
    "echo -e \"${BLUE}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"",
    "echo",
    "echo -e \"${YELLOW}║${RESET}                           ${WHITE}⚙️ 고급 옵션${RESET}                                      ${YELLOW}║${RESET}\"",
    "echo -e \"${YELLOW}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"",
    "echo",
    "echo -e \"${GRAY}0. ❌ 메인 메뉴로 돌아가기${RESET}\"",
    "echo",
    "echo -n -e \"${GREEN}🎯 선택하세요 (1-5, A-F, 0): ${RESET}\"",
    "if ! command -v python3 &> /dev/null; then",
    "print_error \"Python3가 설치되지 않았습니다\"",
    "echo",
    "echo",
    "cd \"Monitoring/Posco_News_mini\"",
    "nohup python3 monitor_WatchHamster.py > ../../watchhamster.log 2>&1 &",
    "cd \"$SCRIPT_DIR\"",
    "echo",
    "echo",
    "echo",
    "echo -e \"${INFO}  • PID: $WATCHHAMSTER_PID${RESET}\"",
    "echo -e \"${INFO}  • 실행시간: $UPTIME${RESET}\"",
    "echo -e \"${INFO}  • CPU/메모리: $CPU_MEM${RESET}\"",
    "echo",
    "echo -e \"${YELLOW}📊 관리 중인 모듈 상태${RESET}\"",
    "echo -e \"${INFO}워치햄스터를 먼저 시작해주세요${RESET}\"",
    "echo",
    "echo",
    "echo",
    "echo",
    "echo -e \"${GREEN}$module_num.${RESET} ✅ $display_name (PID: $module_pid, 실행시간: $module_time)\"",
    "echo -e \"${RED}$module_num.${RESET} ❌ $display_name (중지됨)\"",
    "echo",
    "echo -e \"${YELLOW}🔧 모듈 제어 옵션:${RESET}\"",
    "echo -e \"${GRAY}R.${RESET} 🔄 모든 모듈 재시작\"",
    "echo -e \"${GRAY}S.${RESET} 📊 상세 상태 보기\"",
    "echo -e \"${GRAY}L.${RESET} 📋 로그 보기\"",
    "echo -e \"${GRAY}0.${RESET} ⬅️ 메인 메뉴로 돌아가기\"",
    "echo",
    "echo -n -e \"${GREEN}🎯 선택하세요 (1-4, R, S, L, 0): ${RESET}\"",
    "echo -e \"${INFO}  • PID: $module_pid${RESET}\"",
    "echo -e \"${INFO}  • 실행시간: $module_time${RESET}\"",
    "echo -e \"${INFO}  • CPU: ${cpu}%, 메모리: ${mem}%${RESET}\"",
    "echo",
    "echo -e \"${YELLOW}🔧 제어 옵션:${RESET}\"",
    "echo -e \"${GREEN}1.${RESET} 🔄 모듈 재시작\"",
    "echo -e \"${GREEN}2.${RESET} 🛑 모듈 중지\"",
    "echo -e \"${GREEN}3.${RESET} 📋 모듈 로그 보기\"",
    "echo -e \"${GREEN}0.${RESET} ⬅️ 돌아가기\"",
    "echo",
    "echo -n -e \"${GREEN}🎯 선택하세요 (1-3, 0): ${RESET}\"",
    "echo",
    "echo",
    "echo",
    "echo -e \"${GRAY}$(grep -i \"${script_name%.*}\" \"$log_file\" | tail -20)${RESET}\"",
    "echo -e \"${GRAY}$(tail -20 \"$log_file\")${RESET}\"",
    "echo",
    "echo -e \"  ${GRAY}•${RESET} PID: $module_pid\"",
    "echo -e \"  ${GRAY}•${RESET} 실행시간: $time\"",
    "echo -e \"  ${GRAY}•${RESET} CPU 사용률: ${cpu}%\"",
    "echo -e \"  ${GRAY}•${RESET} 메모리 사용률: ${mem}%\"",
    "echo -e \"  ${GRAY}•${RESET} 가상 메모리: ${vsz}KB\"",
    "echo",
    "echo -e \"${YELLOW}📋 확인할 로그를 선택하세요:${RESET}\"",
    "echo",
    "echo -e \"${GREEN}1.${RESET} 🐹 워치햄스터 로그\"",
    "echo -e \"${GREEN}2.${RESET} 📊 메인 알림 시스템 로그\"",
    "echo -e \"${GREEN}3.${RESET} 🔄 실시간 모니터 로그\"",
    "echo -e \"${GREEN}4.${RESET} 📈 통합 리포트 로그\"",
    "echo -e \"${GREEN}0.${RESET} ⬅️ 돌아가기\"",
    "echo",
    "echo -n -e \"${GREEN}🎯 선택하세요 (1-4, 0): ${RESET}\"",
    "echo",
    "echo -e \"${GRAY}$(tail -20 \"$log_path\")${RESET}\"",
    "echo",
    "echo -e \"${CYAN}최근 20줄의 로그:${RESET}\"",
    "echo",
    "echo",
    "echo -e \"${GREEN}✅${RESET} posco_news_data.json (${size}, 수정: $modified)\"",
    "local count=$(python3 -c \"import json; print(len(json.load(open('posco_news_data.json'))))\" 2>/dev/null || echo \"N/A\")",
    "echo -e \"  총 뉴스 수: $count개\"",
    "echo -e \"${RED}❌${RESET} posco_news_data.json (없음)\"",
    "echo",
    "echo -n -e \"${GREEN}검색할 키워드를 입력하세요: ${RESET}\"",
    "echo",
    "echo -e \"${CYAN}검색 결과:${RESET}\"",
    "echo",
    "python3 -c \"",
    "\" 2>/dev/null || echo \"검색 실패\"",
    "echo",
    "print_section \"🐍 Python 환경\"",
    "check_python_environment",
    "echo -e \"${GREEN}✅${RESET} $data_file (${size}, 수정: $modified)\"",
    "echo -e \"${RED}❌${RESET} $data_file (없음)\"",
    "echo",
    "if check_python_environment; then",
    "print_success \"Python 환경 테스트 통과\"",
    "print_error \"Python 환경 테스트 실패\"",
    "print_section \"🐍 Python 스크립트 테스트\"",
    "if python3 -c \"import sys; print('Python 스크립트 테스트 통과')\" 2>/dev/null; then",
    "if python3 -c \"import sys; print('Python 스크립트 테스트 통과')\" 2>/dev/null; then",
    "echo",
    "cd \"$backup_dir\"",
    "cd \"$SCRIPT_DIR\"",
    "echo",
    "cd \"$SCRIPT_DIR/..\""
  ],
  "variables": {
    "SCRIPT_DIR": "\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"",
    "WATCHHAMSTER_PID": "$(pgrep -f \"monitor_WatchHamster.py\")",
    "UPTIME": "$(ps -o etime= -p $WATCHHAMSTER_PID 2>/dev/null | tr -d ' ')",
    "CPU_MEM": "$(ps -o pcpu,pmem -p $WATCHHAMSTER_PID --no-headers 2>/dev/null)",
    "PID": "$(pgrep -f \"$process\")",
    "display_name": "\"${display_name%%:*}\"",
    "found_log": "true",
    "keyword": "'$keyword'",
    "data": "json.load(f)",
    "backed_up": "1"
  }
}