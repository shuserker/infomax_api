{
  "file_path": "lib_wt_common.sh",
  "file_type": ".sh",
  "content": "#!/bin/bash\n# ============================================================================\n# Mac용 워치햄스터 공통 라이브러리 v4.0\n# macOS 최적화 및 개선사항 반영\n# 모든 워치햄스터 스크립트에서 사용하는 공통 함수들\n# ============================================================================\n\n# UTF-8 인코딩 설정\nexport LANG=en_US.UTF-8\nexport LC_ALL=en_US.UTF-8\n\n# ============================================================================\n# 현대적 색상 팔레트 (macOS Terminal 최적화)\n# ============================================================================\n\n# 기본 제어\nRESET='\\033[0m'\nBOLD='\\033[1m'\nDIM='\\033[2m'\nUNDERLINE='\\033[4m'\n\n# macOS 시스템 색상 (RGB 기반)\nPRIMARY='\\033[38;2;0;122;255m'      # macOS Blue\nSECONDARY='\\033[38;2;52;199;89m'    # Success Green  \nACCENT='\\033[38;2;255;149;0m'       # Warning Orange\nDANGER='\\033[38;2;255;59;48m'       # Error Red\n\n# 뉴트럴 색상 (고대비 지원)\nWHITE='\\033[38;2;255;255;255m'\nLIGHT_GRAY='\\033[38;2;200;200;200m'\nGRAY='\\033[38;2;150;150;150m'\nDARK_GRAY='\\033[38;2;100;100;100m'\nBLACK='\\033[38;2;0;0;0m'\n\n# 기능별 색상 (접근성 고려)\nSUCCESS='\\033[38;2;52;199;89m'\nERROR='\\033[38;2;255;59;48m'\nWARNING='\\033[38;2;255;149;0m'\nINFO='\\033[38;2;0;122;255m'\n\n# 배경 강조 (선택적 사용)\nBG_PRIMARY='\\033[48;2;0;122;255m'\nBG_SUCCESS='\\033[48;2;52;199;89m'\nBG_WARNING='\\033[48;2;255;149;0m'\nBG_ERROR='\\033[48;2;255;59;48m'\n\n# 레거시 호환성 (기존 코드 지원)\nRED=$ERROR\nGREEN=$SUCCESS\nYELLOW=$WARNING\nBLUE=$INFO\nCYAN=$INFO\nMAGENTA=$ACCENT\nHEADER=\"${PRIMARY}${BOLD}\"\n\n# ============================================================================\n# 로깅 시스템 (개선됨)\n# ============================================================================\n\n# 로그 파일 경로\nLOG_DIR=\"$HOME/.watchhamster/logs\"\nLOG_FILE=\"$LOG_DIR/system.log\"\nERROR_LOG=\"$LOG_DIR/error.log\"\n\n# 로그 디렉토리 생성\nmkdir -p \"$LOG_DIR\"\n\n# 로그 함수들\nlog_message() {\n    local level=\"$1\"\n    local message=\"$2\"\n    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')\n    echo \"[$timestamp] [$level] $message\" >> \"$LOG_FILE\"\n}\n\nlog_info() {\n    log_message \"INFO\" \"$1\"\n}\n\nlog_warning() {\n    log_message \"WARNING\" \"$1\"\n}\n\nlog_error() {\n    log_message \"ERROR\" \"$1\"\n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] $1\" >> \"$ERROR_LOG\"\n}\n\nlog_success() {\n    log_message \"SUCCESS\" \"$1\"\n}\n\n# ============================================================================\n# 시스템 정보 함수들 (개선됨)\n# ============================================================================\n\n# 개선된 메모리 사용률 계산\nget_memory_usage() {\n    local total_mem=$(sysctl -n hw.memsize 2>/dev/null | awk '{print $1/1024/1024/1024}')\n    local free_mem=$(vm_stat 2>/dev/null | awk '/free/ {gsub(/\\./, \"\", $3); print $3*4096/1024/1024/1024}')\n    \n    if [[ -n \"$total_mem\" && -n \"$free_mem\" ]]; then\n        local used_mem=$(echo \"$total_mem - $free_mem\" | bc -l 2>/dev/null)\n        local usage_percent=$(echo \"scale=1; ($used_mem / $total_mem) * 100\" | bc -l 2>/dev/null)\n        echo \"${usage_percent:-0}\"\n    else\n        # 대체 방법: top 명령어 사용\n        top -l 1 | grep \"PhysMem\" | awk '{print $2}' | sed 's/[^0-9.]//g'\n    fi\n}\n\n# CPU 사용률\nget_cpu_usage() {\n    top -l 1 | grep \"CPU usage\" | awk '{print $3}' | sed 's/%//'\n}\n\n# 디스크 사용률\nget_disk_usage() {\n    df -h / | awk 'NR==2 {print $5}' | sed 's/%//'\n}\n\n# 시스템 정보 출력\nprint_system_info() {\n    echo -e \"${GRAY}╔═══════════════════════════════════════════════════════════════════════════════╗${RESET}\"\n    echo -e \"${GRAY}║${RESET}                           ${CYAN}📊 시스템 정보${RESET}                                    ${GRAY}║${RESET}\"\n    echo -e \"${GRAY}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"\n    \n    # CPU 정보\n    local cpu_usage=$(get_cpu_usage)\n    echo -e \"${GRAY}║${RESET}  ${WHITE}CPU 사용률:${RESET} ${cpu_usage:-N/A}%\"\n    \n    # 메모리 정보 (개선됨)\n    local mem_usage=$(get_memory_usage)\n    echo -e \"${GRAY}║${RESET}  ${WHITE}메모리 사용률:${RESET} ${mem_usage:-N/A}%\"\n    \n    # 디스크 정보\n    local disk_usage=$(get_disk_usage)\n    echo -e \"${GRAY}║${RESET}  ${WHITE}디스크 사용률:${RESET} ${disk_usage:-N/A}%\"\n    \n    # Python 버전\n    local python_version=$(python3 --version 2>/dev/null | cut -d' ' -f2)\n    echo -e \"${GRAY}║${RESET}  ${WHITE}Python 버전:${RESET} ${python_version:-N/A}\"\n    \n    # 네트워크 상태\n    if ping -c 1 8.8.8.8 >/dev/null 2>&1; then\n        echo -e \"${GRAY}║${RESET}  ${WHITE}네트워크:${RESET} ${GREEN}연결됨${RESET}\"\n    else\n        echo -e \"${GRAY}║${RESET}  ${WHITE}네트워크:${RESET} ${RED}연결 안됨${RESET}\"\n    fi\n    \n    echo -e \"${GRAY}╚═══════════════════════════════════════════════════════════════════════════════╝${RESET}\"\n    echo\n}\n\n# ============================================================================\n# 공통 함수들\n# ============================================================================\n\n# 함수: 헤더 출력\nprint_header() {\n    echo -e \"${HEADER}████████████████████████████████████████████████████████████████████████████████${RESET}\"\n    echo -e \"${HEADER}██                                                                            ██${RESET}\"\n    echo -e \"${HEADER}██    $1                                         ██${RESET}\"\n    echo -e \"${HEADER}██                                                                            ██${RESET}\"\n    echo -e \"${HEADER}████████████████████████████████████████████████████████████████████████████████${RESET}\"\n    echo\n    log_info \"Header displayed: $1\"\n}\n\n# 함수: 섹션 헤더 출력\nprint_section() {\n    echo -e \"${CYAN}╔═══════════════════════════════════════════════════════════════════════════════╗${RESET}\"\n    echo -e \"${CYAN}║${RESET}                           $1                                    ${CYAN}║${RESET}\"\n    echo -e \"${CYAN}╚═══════════════════════════════════════════════════════════════════════════════╝${RESET}\"\n    echo\n    log_info \"Section displayed: $1\"\n}\n\n# 함수: 성공 메시지\nprint_success() {\n    echo -e \"${SUCCESS}✅ $1${RESET}\"\n    log_success \"$1\"\n}\n\n# 함수: 에러 메시지\nprint_error() {\n    echo -e \"${ERROR}❌ $1${RESET}\"\n    log_error \"$1\"\n}\n\n# 함수: 경고 메시지\nprint_warning() {\n    echo -e \"${WARNING}⚠️ $1${RESET}\"\n    log_warning \"$1\"\n}\n\n# 함수: 정보 메시지\nprint_info() {\n    echo -e \"${INFO}ℹ️ $1${RESET}\"\n    log_info \"$1\"\n}\n\n# 함수: 로딩 애니메이션\nshow_loading() {\n    local message=\"$1\"\n    local delay=0.1\n    local spin='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'\n    local i=0\n    \n    echo -n \"$message \"\n    while true; do\n        printf \"\\b${spin:$((i % ${#spin})):1}\"\n        sleep $delay\n        ((i++))\n    done &\n    local pid=$!\n    \n    # 함수 종료 시 애니메이션 중지\n    trap \"kill $pid 2>/dev/null\" EXIT\n    return $pid\n}\n\n# 함수: 로딩 중지\nstop_loading() {\n    local pid=$1\n    kill $pid 2>/dev/null\n    echo\n}\n\n# 함수: 박스 시작\nstart_box() {\n    local color=\"$1\"\n    echo -e \"${color}╔═══════════════════════════════════════════════════════════════════════════════╗${RESET}\"\n}\n\n# 함수: 박스 끝\nend_box() {\n    local color=\"$1\"\n    echo -e \"${color}╚═══════════════════════════════════════════════════════════════════════════════╝${RESET}\"\n}\n\n# 함수: 메뉴 아이템 출력\nprint_menu_item() {\n    local number=\"$1\"\n    local title=\"$2\"\n    local description=\"$3\"\n    echo -e \"${GRAY}║${RESET}  ${YELLOW}$number${RESET} ${WHITE}$title${RESET}\"\n    echo -e \"${GRAY}║${RESET}     ${GRAY}$description${RESET}\"\n}\n\n# 함수: Python 환경 확인\ncheck_python_environment() {\n    if command -v python3 &> /dev/null; then\n        local version=$(python3 --version 2>&1 | cut -d' ' -f2)\n        print_success \"Python3 발견: $version\"\n        return 0\n    elif command -v python &> /dev/null; then\n        local version=$(python --version 2>&1 | cut -d' ' -f2)\n        print_success \"Python 발견: $version\"\n        return 0\n    else\n        print_error \"Python이 설치되지 않았습니다.\"\n        print_info \"Python을 설치해주세요: https://www.python.org/downloads/\"\n        return 1\n    fi\n}\n\n# 함수: 필수 파일 확인\ncheck_required_files() {\n    local files=(\"$@\")\n    local missing_files=()\n    \n    for file in \"${files[@]}\"; do\n        if [[ ! -f \"$file\" ]]; then\n            missing_files+=(\"$file\")\n        fi\n    done\n    \n    if [[ ${#missing_files[@]} -eq 0 ]]; then\n        print_success \"모든 필수 파일이 존재합니다.\"\n        return 0\n    else\n        print_error \"누락된 파일들:\"\n        for file in \"${missing_files[@]}\"; do\n            echo -e \"  ${RED}• $file${RESET}\"\n        done\n        return 1\n    fi\n}\n\n# 함수: 네트워크 연결 확인\ncheck_network_connection() {\n    if ping -c 1 8.8.8.8 >/dev/null 2>&1; then\n        print_success \"인터넷 연결이 정상입니다.\"\n        return 0\n    else\n        print_error \"인터넷 연결을 확인해주세요.\"\n        return 1\n    fi\n}\n\n# 함수: Git 저장소 상태 확인\ncheck_git_status() {\n    if [[ -d \".git\" ]]; then\n        local status=$(git status --porcelain 2>/dev/null)\n        if [[ -z \"$status\" ]]; then\n            print_success \"Git 저장소가 깨끗한 상태입니다.\"\n        else\n            print_warning \"Git 저장소에 변경사항이 있습니다.\"\n        fi\n        return 0\n    else\n        print_warning \"Git 저장소가 아닙니다.\"\n        return 1\n    fi\n}\n\n# 함수: 프로세스 확인\ncheck_process() {\n    local process_name=\"$1\"\n    if pgrep -f \"$process_name\" >/dev/null; then\n        print_success \"$process_name 프로세스가 실행 중입니다.\"\n        return 0\n    else\n        print_info \"$process_name 프로세스가 실행되지 않았습니다.\"\n        return 1\n    fi\n}\n\n# 함수: 사용자 입력 처리\nget_user_input() {\n    local prompt=\"$1\"\n    local default=\"$2\"\n    \n    if [[ -n \"$default\" ]]; then\n        echo -n -e \"${GREEN}$prompt${RESET} (기본값: $default): \"\n    else\n        echo -n -e \"${GREEN}$prompt${RESET}: \"\n    fi\n    \n    read -r user_input\n    \n    if [[ -z \"$user_input\" && -n \"$default\" ]]; then\n        echo \"$default\"\n    else\n        echo \"$user_input\"\n    fi\n}\n\n# 함수: 확인 대화상자\nconfirm_action() {\n    local message=\"$1\"\n    echo -n -e \"${YELLOW}$message${RESET} (y/N): \"\n    read -r response\n    \n    case \"$response\" in\n        [yY]|[yY][eE][sS])\n            return 0\n            ;;\n        *)\n            return 1\n            ;;\n    esac\n}\n\n# 함수: 초기화\ninit_system() {\n    log_info \"시스템 초기화 시작\"\n    \n    # 로그 디렉토리 생성\n    mkdir -p \"$LOG_DIR\"\n    \n    # Python 환경 확인\n    check_python_environment\n    \n    # 네트워크 연결 확인\n    check_network_connection\n    \n    # Git 상태 확인\n    check_git_status\n    \n    log_info \"시스템 초기화 완료\"\n}\n\n# 함수: 정리\ncleanup() {\n    log_info \"시스템 정리 시작\"\n    # 필요한 정리 작업 수행\n    log_info \"시스템 정리 완료\"\n}\n\n# 스크립트 종료 시 정리\ntrap cleanup EXIT\n\n# 초기화 실행\nif [[ \"${BASH_SOURCE[0]}\" == \"${0}\" ]]; then\n    init_system\nfi ",
  "commands": [
    "RESET='\\033[0m'",
    "echo \"[$timestamp] [$level] $message\" >> \"$LOG_FILE\"",
    "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] $1\" >> \"$ERROR_LOG\"",
    "local used_mem=$(echo \"$total_mem - $free_mem\" | bc -l 2>/dev/null)",
    "local usage_percent=$(echo \"scale=1; ($used_mem / $total_mem) * 100\" | bc -l 2>/dev/null)",
    "echo \"${usage_percent:-0}\"",
    "echo -e \"${GRAY}╔═══════════════════════════════════════════════════════════════════════════════╗${RESET}\"",
    "echo -e \"${GRAY}║${RESET}                           ${CYAN}📊 시스템 정보${RESET}                                    ${GRAY}║${RESET}\"",
    "echo -e \"${GRAY}╠═══════════════════════════════════════════════════════════════════════════════╣${RESET}\"",
    "echo -e \"${GRAY}║${RESET}  ${WHITE}CPU 사용률:${RESET} ${cpu_usage:-N/A}%\"",
    "echo -e \"${GRAY}║${RESET}  ${WHITE}메모리 사용률:${RESET} ${mem_usage:-N/A}%\"",
    "echo -e \"${GRAY}║${RESET}  ${WHITE}디스크 사용률:${RESET} ${disk_usage:-N/A}%\"",
    "local python_version=$(python3 --version 2>/dev/null | cut -d' ' -f2)",
    "echo -e \"${GRAY}║${RESET}  ${WHITE}Python 버전:${RESET} ${python_version:-N/A}\"",
    "echo -e \"${GRAY}║${RESET}  ${WHITE}네트워크:${RESET} ${GREEN}연결됨${RESET}\"",
    "echo -e \"${GRAY}║${RESET}  ${WHITE}네트워크:${RESET} ${RED}연결 안됨${RESET}\"",
    "echo -e \"${GRAY}╚═══════════════════════════════════════════════════════════════════════════════╝${RESET}\"",
    "echo",
    "echo -e \"${HEADER}████████████████████████████████████████████████████████████████████████████████${RESET}\"",
    "echo -e \"${HEADER}██                                                                            ██${RESET}\"",
    "echo -e \"${HEADER}██    $1                                         ██${RESET}\"",
    "echo -e \"${HEADER}██                                                                            ██${RESET}\"",
    "echo -e \"${HEADER}████████████████████████████████████████████████████████████████████████████████${RESET}\"",
    "echo",
    "echo -e \"${CYAN}╔═══════════════════════════════════════════════════════════════════════════════╗${RESET}\"",
    "echo -e \"${CYAN}║${RESET}                           $1                                    ${CYAN}║${RESET}\"",
    "echo -e \"${CYAN}╚═══════════════════════════════════════════════════════════════════════════════╝${RESET}\"",
    "echo",
    "echo -e \"${SUCCESS}✅ $1${RESET}\"",
    "echo -e \"${ERROR}❌ $1${RESET}\"",
    "echo -e \"${WARNING}⚠️ $1${RESET}\"",
    "echo -e \"${INFO}ℹ️ $1${RESET}\"",
    "echo -n \"$message \"",
    "echo",
    "echo -e \"${color}╔═══════════════════════════════════════════════════════════════════════════════╗${RESET}\"",
    "echo -e \"${color}╚═══════════════════════════════════════════════════════════════════════════════╝${RESET}\"",
    "echo -e \"${GRAY}║${RESET}  ${YELLOW}$number${RESET} ${WHITE}$title${RESET}\"",
    "echo -e \"${GRAY}║${RESET}     ${GRAY}$description${RESET}\"",
    "check_python_environment() {",
    "if command -v python3 &> /dev/null; then",
    "local version=$(python3 --version 2>&1 | cut -d' ' -f2)",
    "print_success \"Python3 발견: $version\"",
    "elif command -v python &> /dev/null; then",
    "local version=$(python --version 2>&1 | cut -d' ' -f2)",
    "print_success \"Python 발견: $version\"",
    "print_error \"Python이 설치되지 않았습니다.\"",
    "print_info \"Python을 설치해주세요: https://www.python.org/downloads/\"",
    "echo -e \"  ${RED}• $file${RESET}\"",
    "check_git_status() {",
    "if [[ -d \".git\" ]]; then",
    "local status=$(git status --porcelain 2>/dev/null)",
    "print_success \"Git 저장소가 깨끗한 상태입니다.\"",
    "print_warning \"Git 저장소에 변경사항이 있습니다.\"",
    "print_warning \"Git 저장소가 아닙니다.\"",
    "echo -n -e \"${GREEN}$prompt${RESET} (기본값: $default): \"",
    "echo -n -e \"${GREEN}$prompt${RESET}: \"",
    "echo \"$default\"",
    "echo \"$user_input\"",
    "echo -n -e \"${YELLOW}$message${RESET} (y/N): \"",
    "check_python_environment",
    "check_git_status"
  ],
  "variables": {
    "RESET": "'\\033[0m'",
    "BOLD": "'\\033[1m'",
    "DIM": "'\\033[2m'",
    "UNDERLINE": "'\\033[4m'",
    "PRIMARY": "'\\033[38;2;0;122;255m'      # macOS Blue",
    "SECONDARY": "'\\033[38;2;52;199;89m'    # Success Green",
    "ACCENT": "'\\033[38;2;255;149;0m'       # Warning Orange",
    "DANGER": "'\\033[38;2;255;59;48m'       # Error Red",
    "WHITE": "'\\033[38;2;255;255;255m'",
    "LIGHT_GRAY": "'\\033[38;2;200;200;200m'",
    "GRAY": "'\\033[38;2;150;150;150m'",
    "DARK_GRAY": "'\\033[38;2;100;100;100m'",
    "BLACK": "'\\033[38;2;0;0;0m'",
    "SUCCESS": "'\\033[38;2;52;199;89m'",
    "ERROR": "'\\033[38;2;255;59;48m'",
    "WARNING": "'\\033[38;2;255;149;0m'",
    "INFO": "'\\033[38;2;0;122;255m'",
    "BG_PRIMARY": "'\\033[48;2;0;122;255m'",
    "BG_SUCCESS": "'\\033[48;2;52;199;89m'",
    "BG_WARNING": "'\\033[48;2;255;149;0m'",
    "BG_ERROR": "'\\033[48;2;255;59;48m'",
    "RED": "$ERROR",
    "GREEN": "$SUCCESS",
    "YELLOW": "$WARNING",
    "BLUE": "$INFO",
    "CYAN": "$INFO",
    "MAGENTA": "$ACCENT",
    "HEADER": "\"${PRIMARY}${BOLD}\"",
    "LOG_DIR": "\"$HOME/.watchhamster/logs\"",
    "LOG_FILE": "\"$LOG_DIR/system.log\"",
    "ERROR_LOG": "\"$LOG_DIR/error.log\""
  }
}